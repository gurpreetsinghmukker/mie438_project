
testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800e288  0800e288  0001e288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8d8  0800e8d8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8d8  0800e8d8  0001e8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8e0  0800e8e0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8e0  0800e8e0  0001e8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8e4  0800e8e4  0001e8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800e8e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00000574  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000764  20000764  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b291  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043f3  00000000  00000000  0003b4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001898  00000000  00000000  0003f8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000134b  00000000  00000000  00041180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029d76  00000000  00000000  000424cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002105f  00000000  00000000  0006c241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f505a  00000000  00000000  0008d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007abc  00000000  00000000  001822fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00189db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e270 	.word	0x0800e270

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	0800e270 	.word	0x0800e270

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb6:	f000 b9f1 	b.w	800109c <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d4c:	f000 b9a6 	b.w	800109c <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9e08      	ldr	r6, [sp, #32]
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	460f      	mov	r7, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4694      	mov	ip, r2
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0xe2>
 8000dea:	fab2 f382 	clz	r3, r2
 8000dee:	b143      	cbz	r3, 8000e02 <__udivmoddi4+0x2e>
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	f1c3 0220 	rsb	r2, r3, #32
 8000df8:	409f      	lsls	r7, r3
 8000dfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dfe:	4317      	orrs	r7, r2
 8000e00:	409c      	lsls	r4, r3
 8000e02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e06:	fa1f f58c 	uxth.w	r5, ip
 8000e0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e0e:	0c22      	lsrs	r2, r4, #16
 8000e10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e18:	fb01 f005 	mul.w	r0, r1, r5
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e20:	eb1c 0202 	adds.w	r2, ip, r2
 8000e24:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000e28:	f080 811c 	bcs.w	8001064 <__udivmoddi4+0x290>
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	f240 8119 	bls.w	8001064 <__udivmoddi4+0x290>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4462      	add	r2, ip
 8000e36:	1a12      	subs	r2, r2, r0
 8000e38:	b2a4      	uxth	r4, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e46:	fb00 f505 	mul.w	r5, r0, r5
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d90a      	bls.n	8000e64 <__udivmoddi4+0x90>
 8000e4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e52:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e56:	f080 8107 	bcs.w	8001068 <__udivmoddi4+0x294>
 8000e5a:	42a5      	cmp	r5, r4
 8000e5c:	f240 8104 	bls.w	8001068 <__udivmoddi4+0x294>
 8000e60:	4464      	add	r4, ip
 8000e62:	3802      	subs	r0, #2
 8000e64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11e      	cbz	r6, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40dc      	lsrs	r4, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	e9c6 4300 	strd	r4, r3, [r6]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0xbc>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	f000 80ed 	beq.w	800105e <__udivmoddi4+0x28a>
 8000e84:	2100      	movs	r1, #0
 8000e86:	e9c6 0500 	strd	r0, r5, [r6]
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	fab3 f183 	clz	r1, r3
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d149      	bne.n	8000f2c <__udivmoddi4+0x158>
 8000e98:	42ab      	cmp	r3, r5
 8000e9a:	d302      	bcc.n	8000ea2 <__udivmoddi4+0xce>
 8000e9c:	4282      	cmp	r2, r0
 8000e9e:	f200 80f8 	bhi.w	8001092 <__udivmoddi4+0x2be>
 8000ea2:	1a84      	subs	r4, r0, r2
 8000ea4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	4617      	mov	r7, r2
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d0e2      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000eb4:	e7df      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb6:	b902      	cbnz	r2, 8000eba <__udivmoddi4+0xe6>
 8000eb8:	deff      	udf	#255	; 0xff
 8000eba:	fab2 f382 	clz	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 8090 	bne.w	8000fe4 <__udivmoddi4+0x210>
 8000ec4:	1a8a      	subs	r2, r1, r2
 8000ec6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eca:	fa1f fe8c 	uxth.w	lr, ip
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ed4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ed8:	0c22      	lsrs	r2, r4, #16
 8000eda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ede:	fb0e f005 	mul.w	r0, lr, r5
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x124>
 8000ee6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eea:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000eee:	d202      	bcs.n	8000ef6 <__udivmoddi4+0x122>
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	f200 80cb 	bhi.w	800108c <__udivmoddi4+0x2b8>
 8000ef6:	4645      	mov	r5, r8
 8000ef8:	1a12      	subs	r2, r2, r0
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f00:	fb07 2210 	mls	r2, r7, r0, r2
 8000f04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f08:	fb0e fe00 	mul.w	lr, lr, r0
 8000f0c:	45a6      	cmp	lr, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x14e>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000f18:	d202      	bcs.n	8000f20 <__udivmoddi4+0x14c>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f200 80bb 	bhi.w	8001096 <__udivmoddi4+0x2c2>
 8000f20:	4610      	mov	r0, r2
 8000f22:	eba4 040e 	sub.w	r4, r4, lr
 8000f26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f2a:	e79f      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f2c:	f1c1 0720 	rsb	r7, r1, #32
 8000f30:	408b      	lsls	r3, r1
 8000f32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f42:	40fd      	lsrs	r5, r7
 8000f44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f48:	4323      	orrs	r3, r4
 8000f4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f4e:	fa1f fe8c 	uxth.w	lr, ip
 8000f52:	fb09 5518 	mls	r5, r9, r8, r5
 8000f56:	0c1c      	lsrs	r4, r3, #16
 8000f58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	fa02 f201 	lsl.w	r2, r2, r1
 8000f66:	fa00 f001 	lsl.w	r0, r0, r1
 8000f6a:	d90b      	bls.n	8000f84 <__udivmoddi4+0x1b0>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f74:	f080 8088 	bcs.w	8001088 <__udivmoddi4+0x2b4>
 8000f78:	42a5      	cmp	r5, r4
 8000f7a:	f240 8085 	bls.w	8001088 <__udivmoddi4+0x2b4>
 8000f7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f82:	4464      	add	r4, ip
 8000f84:	1b64      	subs	r4, r4, r5
 8000f86:	b29d      	uxth	r5, r3
 8000f88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f98:	45a6      	cmp	lr, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x1da>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000fa4:	d26c      	bcs.n	8001080 <__udivmoddi4+0x2ac>
 8000fa6:	45a6      	cmp	lr, r4
 8000fa8:	d96a      	bls.n	8001080 <__udivmoddi4+0x2ac>
 8000faa:	3b02      	subs	r3, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fb6:	eba4 040e 	sub.w	r4, r4, lr
 8000fba:	42ac      	cmp	r4, r5
 8000fbc:	46c8      	mov	r8, r9
 8000fbe:	46ae      	mov	lr, r5
 8000fc0:	d356      	bcc.n	8001070 <__udivmoddi4+0x29c>
 8000fc2:	d053      	beq.n	800106c <__udivmoddi4+0x298>
 8000fc4:	b156      	cbz	r6, 8000fdc <__udivmoddi4+0x208>
 8000fc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fca:	eb64 040e 	sbc.w	r4, r4, lr
 8000fce:	fa04 f707 	lsl.w	r7, r4, r7
 8000fd2:	40ca      	lsrs	r2, r1
 8000fd4:	40cc      	lsrs	r4, r1
 8000fd6:	4317      	orrs	r7, r2
 8000fd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe4:	f1c3 0120 	rsb	r1, r3, #32
 8000fe8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ff0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ff4:	409d      	lsls	r5, r3
 8000ff6:	432a      	orrs	r2, r5
 8000ff8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ffc:	fa1f fe8c 	uxth.w	lr, ip
 8001000:	fbb1 f0f7 	udiv	r0, r1, r7
 8001004:	fb07 1510 	mls	r5, r7, r0, r1
 8001008:	0c11      	lsrs	r1, r2, #16
 800100a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800100e:	fb00 f50e 	mul.w	r5, r0, lr
 8001012:	428d      	cmp	r5, r1
 8001014:	fa04 f403 	lsl.w	r4, r4, r3
 8001018:	d908      	bls.n	800102c <__udivmoddi4+0x258>
 800101a:	eb1c 0101 	adds.w	r1, ip, r1
 800101e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001022:	d22f      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001024:	428d      	cmp	r5, r1
 8001026:	d92d      	bls.n	8001084 <__udivmoddi4+0x2b0>
 8001028:	3802      	subs	r0, #2
 800102a:	4461      	add	r1, ip
 800102c:	1b49      	subs	r1, r1, r5
 800102e:	b292      	uxth	r2, r2
 8001030:	fbb1 f5f7 	udiv	r5, r1, r7
 8001034:	fb07 1115 	mls	r1, r7, r5, r1
 8001038:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800103c:	fb05 f10e 	mul.w	r1, r5, lr
 8001040:	4291      	cmp	r1, r2
 8001042:	d908      	bls.n	8001056 <__udivmoddi4+0x282>
 8001044:	eb1c 0202 	adds.w	r2, ip, r2
 8001048:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800104c:	d216      	bcs.n	800107c <__udivmoddi4+0x2a8>
 800104e:	4291      	cmp	r1, r2
 8001050:	d914      	bls.n	800107c <__udivmoddi4+0x2a8>
 8001052:	3d02      	subs	r5, #2
 8001054:	4462      	add	r2, ip
 8001056:	1a52      	subs	r2, r2, r1
 8001058:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800105c:	e738      	b.n	8000ed0 <__udivmoddi4+0xfc>
 800105e:	4631      	mov	r1, r6
 8001060:	4630      	mov	r0, r6
 8001062:	e708      	b.n	8000e76 <__udivmoddi4+0xa2>
 8001064:	4639      	mov	r1, r7
 8001066:	e6e6      	b.n	8000e36 <__udivmoddi4+0x62>
 8001068:	4610      	mov	r0, r2
 800106a:	e6fb      	b.n	8000e64 <__udivmoddi4+0x90>
 800106c:	4548      	cmp	r0, r9
 800106e:	d2a9      	bcs.n	8000fc4 <__udivmoddi4+0x1f0>
 8001070:	ebb9 0802 	subs.w	r8, r9, r2
 8001074:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001078:	3b01      	subs	r3, #1
 800107a:	e7a3      	b.n	8000fc4 <__udivmoddi4+0x1f0>
 800107c:	4645      	mov	r5, r8
 800107e:	e7ea      	b.n	8001056 <__udivmoddi4+0x282>
 8001080:	462b      	mov	r3, r5
 8001082:	e794      	b.n	8000fae <__udivmoddi4+0x1da>
 8001084:	4640      	mov	r0, r8
 8001086:	e7d1      	b.n	800102c <__udivmoddi4+0x258>
 8001088:	46d0      	mov	r8, sl
 800108a:	e77b      	b.n	8000f84 <__udivmoddi4+0x1b0>
 800108c:	3d02      	subs	r5, #2
 800108e:	4462      	add	r2, ip
 8001090:	e732      	b.n	8000ef8 <__udivmoddi4+0x124>
 8001092:	4608      	mov	r0, r1
 8001094:	e70a      	b.n	8000eac <__udivmoddi4+0xd8>
 8001096:	4464      	add	r4, ip
 8001098:	3802      	subs	r0, #2
 800109a:	e742      	b.n	8000f22 <__udivmoddi4+0x14e>

0800109c <__aeabi_idiv0>:
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <MPU6050_Read_Accel>:
}

//Function with multiple return using pointer

void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af04      	add	r7, sp, #16
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c3, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80010ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	2306      	movs	r3, #6
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	223b      	movs	r2, #59	; 0x3b
 80010c0:	21d0      	movs	r1, #208	; 0xd0
 80010c2:	4835      	ldr	r0, [pc, #212]	; (8001198 <MPU6050_Read_Accel+0xf8>)
 80010c4:	f006 f9ba 	bl	800743c <HAL_I2C_Mem_Read>
	//Adding 2 BYTES into 16 bit integer 
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80010c8:	7c3b      	ldrb	r3, [r7, #16]
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	7c7b      	ldrb	r3, [r7, #17]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	4b31      	ldr	r3, [pc, #196]	; (800119c <MPU6050_Read_Accel+0xfc>)
 80010d8:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80010da:	7cbb      	ldrb	r3, [r7, #18]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	7cfb      	ldrb	r3, [r7, #19]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <MPU6050_Read_Accel+0x100>)
 80010ea:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80010ec:	7d3b      	ldrb	r3, [r7, #20]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	7d7b      	ldrb	r3, [r7, #21]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <MPU6050_Read_Accel+0x104>)
 80010fc:	801a      	strh	r2, [r3, #0]
	
	*Ax = Accel_X_RAW*100/16384.0;
 80010fe:	4b27      	ldr	r3, [pc, #156]	; (800119c <MPU6050_Read_Accel+0xfc>)
 8001100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001104:	461a      	mov	r2, r3
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa11 	bl	8000534 <__aeabi_i2d>
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <MPU6050_Read_Accel+0x108>)
 8001118:	f7ff fba0 	bl	800085c <__aeabi_ddiv>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd68 	bl	8000bf8 <__aeabi_d2f>
 8001128:	4602      	mov	r2, r0
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW*100/16384.0;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <MPU6050_Read_Accel+0x100>)
 8001130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001134:	461a      	mov	r2, r3
 8001136:	2364      	movs	r3, #100	; 0x64
 8001138:	fb02 f303 	mul.w	r3, r2, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f9f9 	bl	8000534 <__aeabi_i2d>
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MPU6050_Read_Accel+0x108>)
 8001148:	f7ff fb88 	bl	800085c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fd50 	bl	8000bf8 <__aeabi_d2f>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW*100/16384.0;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MPU6050_Read_Accel+0x104>)
 8001160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001164:	461a      	mov	r2, r3
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	fb02 f303 	mul.w	r3, r2, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9e1 	bl	8000534 <__aeabi_i2d>
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MPU6050_Read_Accel+0x108>)
 8001178:	f7ff fb70 	bl	800085c <__aeabi_ddiv>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fd38 	bl	8000bf8 <__aeabi_d2f>
 8001188:	4602      	mov	r2, r0
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200002a0 	.word	0x200002a0
 800119c:	2000020c 	.word	0x2000020c
 80011a0:	2000020e 	.word	0x2000020e
 80011a4:	20000210 	.word	0x20000210
 80011a8:	40d00000 	.word	0x40d00000
 80011ac:	00000000 	.word	0x00000000

080011b0 <MPU6050_Read_Gyro>:
void MPU6050_Read_Gyro (float* Gx, float* Gy, float* Gz)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read (&hi2c3, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80011bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2306      	movs	r3, #6
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	2243      	movs	r2, #67	; 0x43
 80011d0:	21d0      	movs	r1, #208	; 0xd0
 80011d2:	4831      	ldr	r0, [pc, #196]	; (8001298 <MPU6050_Read_Gyro+0xe8>)
 80011d4:	f006 f932 	bl	800743c <HAL_I2C_Mem_Read>
	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80011d8:	7c3b      	ldrb	r3, [r7, #16]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b21a      	sxth	r2, r3
 80011de:	7c7b      	ldrb	r3, [r7, #17]
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <MPU6050_Read_Gyro+0xec>)
 80011e8:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80011ea:	7cbb      	ldrb	r3, [r7, #18]
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	7cfb      	ldrb	r3, [r7, #19]
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <MPU6050_Read_Gyro+0xf0>)
 80011fa:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80011fc:	7d3b      	ldrb	r3, [r7, #20]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b21a      	sxth	r2, r3
 8001202:	7d7b      	ldrb	r3, [r7, #21]
 8001204:	b21b      	sxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b21a      	sxth	r2, r3
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <MPU6050_Read_Gyro+0xf4>)
 800120c:	801a      	strh	r2, [r3, #0]
	
	*Gx = Gyro_X_RAW/131.0;
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <MPU6050_Read_Gyro+0xec>)
 8001210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f98d 	bl	8000534 <__aeabi_i2d>
 800121a:	a31d      	add	r3, pc, #116	; (adr r3, 8001290 <MPU6050_Read_Gyro+0xe0>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff fb1c 	bl	800085c <__aeabi_ddiv>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fce4 	bl	8000bf8 <__aeabi_d2f>
 8001230:	4602      	mov	r2, r0
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	601a      	str	r2, [r3, #0]
	*Gy = Gyro_Y_RAW/131.0;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MPU6050_Read_Gyro+0xf0>)
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f979 	bl	8000534 <__aeabi_i2d>
 8001242:	a313      	add	r3, pc, #76	; (adr r3, 8001290 <MPU6050_Read_Gyro+0xe0>)
 8001244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001248:	f7ff fb08 	bl	800085c <__aeabi_ddiv>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fcd0 	bl	8000bf8 <__aeabi_d2f>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	601a      	str	r2, [r3, #0]
	*Gz = Gyro_Z_RAW/131.0;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MPU6050_Read_Gyro+0xf4>)
 8001260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f965 	bl	8000534 <__aeabi_i2d>
 800126a:	a309      	add	r3, pc, #36	; (adr r3, 8001290 <MPU6050_Read_Gyro+0xe0>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff faf4 	bl	800085c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f7ff fcbc 	bl	8000bf8 <__aeabi_d2f>
 8001280:	4602      	mov	r2, r0
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	00000000 	.word	0x00000000
 8001294:	40606000 	.word	0x40606000
 8001298:	200002a0 	.word	0x200002a0
 800129c:	20000212 	.word	0x20000212
 80012a0:	20000214 	.word	0x20000214
 80012a4:	20000216 	.word	0x20000216

080012a8 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ae:	463b      	mov	r3, r7
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <MX_ADC3_Init+0x98>)
 80012bc:	4a21      	ldr	r2, [pc, #132]	; (8001344 <MX_ADC3_Init+0x9c>)
 80012be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <MX_ADC3_Init+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_ADC3_Init+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_ADC3_Init+0x98>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <MX_ADC3_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_ADC3_Init+0x98>)
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_ADC3_Init+0x98>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <MX_ADC3_Init+0x98>)
 80012e8:	4a17      	ldr	r2, [pc, #92]	; (8001348 <MX_ADC3_Init+0xa0>)
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_ADC3_Init+0x98>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_ADC3_Init+0x98>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_ADC3_Init+0x98>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_ADC3_Init+0x98>)
 8001302:	2201      	movs	r2, #1
 8001304:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <MX_ADC3_Init+0x98>)
 8001308:	f004 fe26 	bl	8005f58 <HAL_ADC_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001312:	f001 fdfb 	bl	8002f0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001316:	2304      	movs	r3, #4
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800131a:	2301      	movs	r3, #1
 800131c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001322:	463b      	mov	r3, r7
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <MX_ADC3_Init+0x98>)
 8001328:	f004 fe5a 	bl	8005fe0 <HAL_ADC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001332:	f001 fdeb 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000218 	.word	0x20000218
 8001344:	40012200 	.word	0x40012200
 8001348:	0f000001 	.word	0x0f000001

0800134c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a24      	ldr	r2, [pc, #144]	; (80013fc <HAL_ADC_MspInit+0xb0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d141      	bne.n	80013f2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 8001378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 8001394:	f043 0320 	orr.w	r3, r3, #32
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0320 	and.w	r3, r3, #32
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF6     ------> ADC3_IN4
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c2:	2340      	movs	r3, #64	; 0x40
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	2303      	movs	r3, #3
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	480b      	ldr	r0, [pc, #44]	; (8001404 <HAL_ADC_MspInit+0xb8>)
 80013d6:	f005 fd0f 	bl	8006df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013da:	2308      	movs	r3, #8
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013de:	2303      	movs	r3, #3
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4806      	ldr	r0, [pc, #24]	; (8001408 <HAL_ADC_MspInit+0xbc>)
 80013ee:	f005 fd03 	bl	8006df8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40012200 	.word	0x40012200
 8001400:	40023800 	.word	0x40023800
 8001404:	40021400 	.word	0x40021400
 8001408:	40020800 	.word	0x40020800

0800140c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_CRC_Init+0x20>)
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <MX_CRC_Init+0x24>)
 8001414:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_CRC_Init+0x20>)
 8001418:	f005 f8f2 	bl	8006600 <HAL_CRC_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001422:	f001 fd73 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000260 	.word	0x20000260
 8001430:	40023000 	.word	0x40023000

08001434 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <HAL_CRC_MspInit+0x3c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d10d      	bne.n	8001462 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_CRC_MspInit+0x40>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <HAL_CRC_MspInit+0x40>)
 8001450:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <HAL_CRC_MspInit+0x40>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023000 	.word	0x40023000
 8001474:	40023800 	.word	0x40023800

08001478 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_DMA_Init+0x3c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <MX_DMA_Init+0x3c>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_DMA_Init+0x3c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	200b      	movs	r0, #11
 80014a0:	f005 f884 	bl	80065ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014a4:	200b      	movs	r0, #11
 80014a6:	f005 f89d 	bl	80065e4 <HAL_NVIC_EnableIRQ>

}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <MX_FMC_Init+0x94>)
 80014d2:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <MX_FMC_Init+0x98>)
 80014d4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <MX_FMC_Init+0x94>)
 80014d8:	2201      	movs	r2, #1
 80014da:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <MX_FMC_Init+0x94>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_FMC_Init+0x94>)
 80014e4:	2204      	movs	r2, #4
 80014e6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <MX_FMC_Init+0x94>)
 80014ea:	2210      	movs	r2, #16
 80014ec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <MX_FMC_Init+0x94>)
 80014f0:	2240      	movs	r2, #64	; 0x40
 80014f2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <MX_FMC_Init+0x94>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_FMC_Init+0x94>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_FMC_Init+0x94>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_FMC_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_FMC_Init+0x94>)
 800150e:	2200      	movs	r2, #0
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001512:	2310      	movs	r3, #16
 8001514:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001516:	2310      	movs	r3, #16
 8001518:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800151a:	2310      	movs	r3, #16
 800151c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800151e:	2310      	movs	r3, #16
 8001520:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001522:	2310      	movs	r3, #16
 8001524:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001526:	2310      	movs	r3, #16
 8001528:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800152a:	2310      	movs	r3, #16
 800152c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4619      	mov	r1, r3
 8001532:	4806      	ldr	r0, [pc, #24]	; (800154c <MX_FMC_Init+0x94>)
 8001534:	f007 f9d0 	bl	80088d8 <HAL_SDRAM_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800153e:	f001 fce5 	bl	8002f0c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001542:	bf00      	nop
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000268 	.word	0x20000268
 8001550:	a0000140 	.word	0xa0000140

08001554 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001568:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <HAL_FMC_MspInit+0x104>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d16f      	bne.n	8001650 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001570:	4b39      	ldr	r3, [pc, #228]	; (8001658 <HAL_FMC_MspInit+0x104>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4b38      	ldr	r3, [pc, #224]	; (800165c <HAL_FMC_MspInit+0x108>)
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	4a37      	ldr	r2, [pc, #220]	; (800165c <HAL_FMC_MspInit+0x108>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6393      	str	r3, [r2, #56]	; 0x38
 8001586:	4b35      	ldr	r3, [pc, #212]	; (800165c <HAL_FMC_MspInit+0x108>)
 8001588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001592:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001596:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015a4:	230c      	movs	r3, #12
 80015a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	4619      	mov	r1, r3
 80015ac:	482c      	ldr	r0, [pc, #176]	; (8001660 <HAL_FMC_MspInit+0x10c>)
 80015ae:	f005 fc23 	bl	8006df8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80015b2:	2301      	movs	r3, #1
 80015b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015c2:	230c      	movs	r3, #12
 80015c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	4619      	mov	r1, r3
 80015ca:	4826      	ldr	r0, [pc, #152]	; (8001664 <HAL_FMC_MspInit+0x110>)
 80015cc:	f005 fc14 	bl	8006df8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80015d0:	f248 1333 	movw	r3, #33075	; 0x8133
 80015d4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015e2:	230c      	movs	r3, #12
 80015e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	481f      	ldr	r0, [pc, #124]	; (8001668 <HAL_FMC_MspInit+0x114>)
 80015ec:	f005 fc04 	bl	8006df8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80015f0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80015f4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001602:	230c      	movs	r3, #12
 8001604:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4818      	ldr	r0, [pc, #96]	; (800166c <HAL_FMC_MspInit+0x118>)
 800160c:	f005 fbf4 	bl	8006df8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001610:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001614:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001622:	230c      	movs	r3, #12
 8001624:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	4619      	mov	r1, r3
 800162a:	4811      	ldr	r0, [pc, #68]	; (8001670 <HAL_FMC_MspInit+0x11c>)
 800162c:	f005 fbe4 	bl	8006df8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001630:	2360      	movs	r3, #96	; 0x60
 8001632:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001640:	230c      	movs	r3, #12
 8001642:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	4619      	mov	r1, r3
 8001648:	480a      	ldr	r0, [pc, #40]	; (8001674 <HAL_FMC_MspInit+0x120>)
 800164a:	f005 fbd5 	bl	8006df8 <HAL_GPIO_Init>
 800164e:	e000      	b.n	8001652 <HAL_FMC_MspInit+0xfe>
    return;
 8001650:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2000029c 	.word	0x2000029c
 800165c:	40023800 	.word	0x40023800
 8001660:	40021400 	.word	0x40021400
 8001664:	40020800 	.word	0x40020800
 8001668:	40021800 	.word	0x40021800
 800166c:	40021000 	.word	0x40021000
 8001670:	40020c00 	.word	0x40020c00
 8001674:	40020400 	.word	0x40020400

08001678 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001680:	f7ff ff68 	bl	8001554 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <MX_GPIO_Init>:
     PG12   ------> LTDC_B4
     PB8   ------> LTDC_B6
     PB9   ------> LTDC_B7
*/
void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08e      	sub	sp, #56	; 0x38
 8001690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
 80016a6:	4bb3      	ldr	r3, [pc, #716]	; (8001974 <MX_GPIO_Init+0x2e8>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4ab2      	ldr	r2, [pc, #712]	; (8001974 <MX_GPIO_Init+0x2e8>)
 80016ac:	f043 0310 	orr.w	r3, r3, #16
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4bb0      	ldr	r3, [pc, #704]	; (8001974 <MX_GPIO_Init+0x2e8>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	623b      	str	r3, [r7, #32]
 80016bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	4bac      	ldr	r3, [pc, #688]	; (8001974 <MX_GPIO_Init+0x2e8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4aab      	ldr	r2, [pc, #684]	; (8001974 <MX_GPIO_Init+0x2e8>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4ba9      	ldr	r3, [pc, #676]	; (8001974 <MX_GPIO_Init+0x2e8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	4ba5      	ldr	r3, [pc, #660]	; (8001974 <MX_GPIO_Init+0x2e8>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4aa4      	ldr	r2, [pc, #656]	; (8001974 <MX_GPIO_Init+0x2e8>)
 80016e4:	f043 0320 	orr.w	r3, r3, #32
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4ba2      	ldr	r3, [pc, #648]	; (8001974 <MX_GPIO_Init+0x2e8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0320 	and.w	r3, r3, #32
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	4b9e      	ldr	r3, [pc, #632]	; (8001974 <MX_GPIO_Init+0x2e8>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a9d      	ldr	r2, [pc, #628]	; (8001974 <MX_GPIO_Init+0x2e8>)
 8001700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b9b      	ldr	r3, [pc, #620]	; (8001974 <MX_GPIO_Init+0x2e8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b97      	ldr	r3, [pc, #604]	; (8001974 <MX_GPIO_Init+0x2e8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a96      	ldr	r2, [pc, #600]	; (8001974 <MX_GPIO_Init+0x2e8>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b94      	ldr	r3, [pc, #592]	; (8001974 <MX_GPIO_Init+0x2e8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b90      	ldr	r3, [pc, #576]	; (8001974 <MX_GPIO_Init+0x2e8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a8f      	ldr	r2, [pc, #572]	; (8001974 <MX_GPIO_Init+0x2e8>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b8d      	ldr	r3, [pc, #564]	; (8001974 <MX_GPIO_Init+0x2e8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	4b89      	ldr	r3, [pc, #548]	; (8001974 <MX_GPIO_Init+0x2e8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a88      	ldr	r2, [pc, #544]	; (8001974 <MX_GPIO_Init+0x2e8>)
 8001754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b86      	ldr	r3, [pc, #536]	; (8001974 <MX_GPIO_Init+0x2e8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b82      	ldr	r3, [pc, #520]	; (8001974 <MX_GPIO_Init+0x2e8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a81      	ldr	r2, [pc, #516]	; (8001974 <MX_GPIO_Init+0x2e8>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b7f      	ldr	r3, [pc, #508]	; (8001974 <MX_GPIO_Init+0x2e8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2116      	movs	r1, #22
 8001786:	487c      	ldr	r0, [pc, #496]	; (8001978 <MX_GPIO_Init+0x2ec>)
 8001788:	f005 fce2 	bl	8007150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	487a      	ldr	r0, [pc, #488]	; (800197c <MX_GPIO_Init+0x2f0>)
 8001792:	f005 fcdd 	bl	8007150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800179c:	4878      	ldr	r0, [pc, #480]	; (8001980 <MX_GPIO_Init+0x2f4>)
 800179e:	f005 fcd7 	bl	8007150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80017a8:	4876      	ldr	r0, [pc, #472]	; (8001984 <MX_GPIO_Init+0x2f8>)
 80017aa:	f005 fcd1 	bl	8007150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 80017ae:	2310      	movs	r3, #16
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4871      	ldr	r0, [pc, #452]	; (8001988 <MX_GPIO_Init+0x2fc>)
 80017c4:	f005 fb18 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80017c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017da:	230e      	movs	r3, #14
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4869      	ldr	r0, [pc, #420]	; (800198c <MX_GPIO_Init+0x300>)
 80017e6:	f005 fb07 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80017ea:	2316      	movs	r3, #22
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	485d      	ldr	r0, [pc, #372]	; (8001978 <MX_GPIO_Init+0x2ec>)
 8001802:	f005 faf9 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001806:	f248 0307 	movw	r3, #32775	; 0x8007
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800180c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181a:	4619      	mov	r1, r3
 800181c:	4857      	ldr	r0, [pc, #348]	; (800197c <MX_GPIO_Init+0x2f0>)
 800181e:	f005 faeb 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001822:	f641 0358 	movw	r3, #6232	; 0x1858
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001834:	230e      	movs	r3, #14
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183c:	4619      	mov	r1, r3
 800183e:	484f      	ldr	r0, [pc, #316]	; (800197c <MX_GPIO_Init+0x2f0>)
 8001840:	f005 fada 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	4848      	ldr	r0, [pc, #288]	; (800197c <MX_GPIO_Init+0x2f0>)
 800185c:	f005 facc 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001860:	2320      	movs	r3, #32
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001864:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800186e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001872:	4619      	mov	r1, r3
 8001874:	4840      	ldr	r0, [pc, #256]	; (8001978 <MX_GPIO_Init+0x2ec>)
 8001876:	f005 fabf 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800187a:	2303      	movs	r3, #3
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800188a:	2309      	movs	r3, #9
 800188c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	4619      	mov	r1, r3
 8001894:	483e      	ldr	r0, [pc, #248]	; (8001990 <MX_GPIO_Init+0x304>)
 8001896:	f005 faaf 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800189a:	2304      	movs	r3, #4
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	2300      	movs	r3, #0
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018aa:	4619      	mov	r1, r3
 80018ac:	4838      	ldr	r0, [pc, #224]	; (8001990 <MX_GPIO_Init+0x304>)
 80018ae:	f005 faa3 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80018b2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018c4:	230e      	movs	r3, #14
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	4830      	ldr	r0, [pc, #192]	; (8001990 <MX_GPIO_Init+0x304>)
 80018d0:	f005 fa92 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80018d4:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80018e6:	230c      	movs	r3, #12
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ee:	4619      	mov	r1, r3
 80018f0:	4827      	ldr	r0, [pc, #156]	; (8001990 <MX_GPIO_Init+0x304>)
 80018f2:	f005 fa81 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80018f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	4821      	ldr	r0, [pc, #132]	; (8001990 <MX_GPIO_Init+0x304>)
 800190c:	f005 fa74 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001910:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001922:	4619      	mov	r1, r3
 8001924:	4816      	ldr	r0, [pc, #88]	; (8001980 <MX_GPIO_Init+0x2f4>)
 8001926:	f005 fa67 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800192a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	480f      	ldr	r0, [pc, #60]	; (8001980 <MX_GPIO_Init+0x2f4>)
 8001944:	f005 fa58 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001948:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800195a:	230e      	movs	r3, #14
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800195e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001962:	4619      	mov	r1, r3
 8001964:	4807      	ldr	r0, [pc, #28]	; (8001984 <MX_GPIO_Init+0x2f8>)
 8001966:	f005 fa47 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800196a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
 8001970:	e010      	b.n	8001994 <MX_GPIO_Init+0x308>
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	40020800 	.word	0x40020800
 800197c:	40020000 	.word	0x40020000
 8001980:	40020c00 	.word	0x40020c00
 8001984:	40021800 	.word	0x40021800
 8001988:	40021000 	.word	0x40021000
 800198c:	40021400 	.word	0x40021400
 8001990:	40020400 	.word	0x40020400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019a0:	230e      	movs	r3, #14
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	481f      	ldr	r0, [pc, #124]	; (8001a28 <MX_GPIO_Init+0x39c>)
 80019ac:	f005 fa24 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80019b0:	2348      	movs	r3, #72	; 0x48
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019c0:	230e      	movs	r3, #14
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c8:	4619      	mov	r1, r3
 80019ca:	4818      	ldr	r0, [pc, #96]	; (8001a2c <MX_GPIO_Init+0x3a0>)
 80019cc:	f005 fa14 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80019d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80019e2:	2309      	movs	r3, #9
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ea:	4619      	mov	r1, r3
 80019ec:	4810      	ldr	r0, [pc, #64]	; (8001a30 <MX_GPIO_Init+0x3a4>)
 80019ee:	f005 fa03 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80019f2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4809      	ldr	r0, [pc, #36]	; (8001a30 <MX_GPIO_Init+0x3a4>)
 8001a0c:	f005 f9f4 	bl	8006df8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	210f      	movs	r1, #15
 8001a14:	200a      	movs	r0, #10
 8001a16:	f004 fdc9 	bl	80065ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a1a:	200a      	movs	r0, #10
 8001a1c:	f004 fde2 	bl	80065e4 <HAL_NVIC_EnableIRQ>

}
 8001a20:	bf00      	nop
 8001a22:	3738      	adds	r7, #56	; 0x38
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40020800 	.word	0x40020800
 8001a2c:	40020c00 	.word	0x40020c00
 8001a30:	40021800 	.word	0x40021800

08001a34 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <MX_I2C3_Init+0x74>)
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	; (8001aac <MX_I2C3_Init+0x78>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <MX_I2C3_Init+0x74>)
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <MX_I2C3_Init+0x7c>)
 8001a42:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <MX_I2C3_Init+0x74>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <MX_I2C3_Init+0x74>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <MX_I2C3_Init+0x74>)
 8001a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a56:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <MX_I2C3_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <MX_I2C3_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MX_I2C3_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <MX_I2C3_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a70:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <MX_I2C3_Init+0x74>)
 8001a72:	f005 fb9f 	bl	80071b4 <HAL_I2C_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a7c:	f001 fa46 	bl	8002f0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a80:	2100      	movs	r1, #0
 8001a82:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <MX_I2C3_Init+0x74>)
 8001a84:	f006 f9e2 	bl	8007e4c <HAL_I2CEx_ConfigAnalogFilter>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001a8e:	f001 fa3d 	bl	8002f0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a92:	2100      	movs	r1, #0
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <MX_I2C3_Init+0x74>)
 8001a96:	f006 fa15 	bl	8007ec4 <HAL_I2CEx_ConfigDigitalFilter>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001aa0:	f001 fa34 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200002a0 	.word	0x200002a0
 8001aac:	40005c00 	.word	0x40005c00
 8001ab0:	000186a0 	.word	0x000186a0

08001ab4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a29      	ldr	r2, [pc, #164]	; (8001b78 <HAL_I2C_MspInit+0xc4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d14b      	bne.n	8001b6e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <HAL_I2C_MspInit+0xc8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a27      	ldr	r2, [pc, #156]	; (8001b7c <HAL_I2C_MspInit+0xc8>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_I2C_MspInit+0xc8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <HAL_I2C_MspInit+0xc8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a20      	ldr	r2, [pc, #128]	; (8001b7c <HAL_I2C_MspInit+0xc8>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_I2C_MspInit+0xc8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b14:	2312      	movs	r3, #18
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b20:	2304      	movs	r3, #4
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4815      	ldr	r0, [pc, #84]	; (8001b80 <HAL_I2C_MspInit+0xcc>)
 8001b2c:	f005 f964 	bl	8006df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b36:	2312      	movs	r3, #18
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b42:	2304      	movs	r3, #4
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480d      	ldr	r0, [pc, #52]	; (8001b84 <HAL_I2C_MspInit+0xd0>)
 8001b4e:	f005 f953 	bl	8006df8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_I2C_MspInit+0xc8>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <HAL_I2C_MspInit+0xc8>)
 8001b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_I2C_MspInit+0xc8>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3728      	adds	r7, #40	; 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40005c00 	.word	0x40005c00
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40020000 	.word	0x40020000

08001b88 <norm>:
#include <math.h>
#include "inverse_kinematics.h"



double norm(double vec[], int size) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
    double sum = 0;
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < size; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	e01a      	b.n	8001bda <norm+0x52>
        sum += vec[i] * vec[i];
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fd24 	bl	8000608 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bc8:	f7fe fb68 	bl	800029c <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < size; i++) {
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	dbe0      	blt.n	8001ba4 <norm+0x1c>
    }
    return sqrt(sum);
 8001be2:	ed97 0b04 	vldr	d0, [r7, #16]
 8001be6:	f00c f891 	bl	800dd0c <sqrt>
 8001bea:	eeb0 7a40 	vmov.f32	s14, s0
 8001bee:	eef0 7a60 	vmov.f32	s15, s1
}
 8001bf2:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf6:	eef0 0a67 	vmov.f32	s1, s15
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <calculate_angles>:

void calculate_angles(double vec[], double *alpha, double *beta, double *zeta, double *gamma) {
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b0b0      	sub	sp, #192	; 0xc0
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
    double link0_vec[3] = {0, 0, LINK_0_LEN};
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001c26:	a35a      	add	r3, pc, #360	; (adr r3, 8001d90 <calculate_angles+0x190>)
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    double link3_vec[3] = {0, 0, -LINK_3_LEN};
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b52      	ldr	r3, [pc, #328]	; (8001d98 <calculate_angles+0x198>)
 8001c4e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

    double r_dd_vec[3] = {vec[0] - link0_vec[0] - link3_vec[0], vec[1] - link0_vec[1] - link3_vec[1], vec[2] - link0_vec[2] - link3_vec[2]};
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c5c:	f7fe fb1c 	bl	8000298 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c6c:	f7fe fb14 	bl	8000298 <__aeabi_dsub>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3308      	adds	r3, #8
 8001c7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c80:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c84:	f7fe fb08 	bl	8000298 <__aeabi_dsub>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c94:	f7fe fb00 	bl	8000298 <__aeabi_dsub>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3310      	adds	r3, #16
 8001ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001cac:	f7fe faf4 	bl	8000298 <__aeabi_dsub>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cbc:	f7fe faec 	bl	8000298 <__aeabi_dsub>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double z_vec[3] = {vec[0] - link0_vec[0], vec[1] - link0_vec[1], vec[2] - link0_vec[2]};
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cd2:	f7fe fae1 	bl	8000298 <__aeabi_dsub>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3308      	adds	r3, #8
 8001ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ce6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001cea:	f7fe fad5 	bl	8000298 <__aeabi_dsub>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3310      	adds	r3, #16
 8001cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cfe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d02:	f7fe fac9 	bl	8000298 <__aeabi_dsub>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double z = norm(z_vec, 3);
 8001d0e:	f107 0310 	add.w	r3, r7, #16
 8001d12:	2103      	movs	r1, #3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff37 	bl	8001b88 <norm>
 8001d1a:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
	double zz = z*z;
 8001d1e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001d22:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001d26:	f7fe fc6f 	bl	8000608 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0

    //Check if the final position is reachable
    if (z > LINK_1_LEN + LINK_2_LEN + LINK_3_LEN) {
 8001d32:	a315      	add	r3, pc, #84	; (adr r3, 8001d88 <calculate_angles+0x188>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001d3c:	f7fe fef4 	bl	8000b28 <__aeabi_dcmpgt>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d02c      	beq.n	8001da0 <calculate_angles+0x1a0>
        printf_("Error: Vector length is greater than the sum of the links\n");
 8001d46:	4815      	ldr	r0, [pc, #84]	; (8001d9c <calculate_angles+0x19c>)
 8001d48:	f003 fa26 	bl	8005198 <printf_>
        *alpha = 0;
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9c1 2300 	strd	r2, r3, [r1]
        *beta = 0;
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	e9c1 2300 	strd	r2, r3, [r1]
        *zeta = 0;
 8001d68:	6839      	ldr	r1, [r7, #0]
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9c1 2300 	strd	r2, r3, [r1]
        *gamma = 0;
 8001d76:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9c1 2300 	strd	r2, r3, [r1]
 8001d86:	e21c      	b.n	80021c2 <calculate_angles+0x5c2>
 8001d88:	1eb851ec 	.word	0x1eb851ec
 8001d8c:	4045cb85 	.word	0x4045cb85
 8001d90:	33333333 	.word	0x33333333
 8001d94:	40223333 	.word	0x40223333
 8001d98:	c0328000 	.word	0xc0328000
 8001d9c:	0800e288 	.word	0x0800e288
        return;
    }

    if (norm(r_dd_vec, 3) > LINK_1_LEN + LINK_2_LEN) {
 8001da0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da4:	2103      	movs	r1, #3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff feee 	bl	8001b88 <norm>
 8001dac:	ec51 0b10 	vmov	r0, r1, d0
 8001db0:	f20f 4314 	addw	r3, pc, #1044	; 0x414
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	f7fe feb6 	bl	8000b28 <__aeabi_dcmpgt>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80d4 	beq.w	8001f6c <calculate_angles+0x36c>
        double alpha_dd = 0;
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
        double alpha_d = acos(((LINK_1_LEN + LINK_2_LEN)*(LINK_1_LEN + LINK_2_LEN) + zz - LINK_3_LEN*LINK_3_LEN) / (2*(LINK_1_LEN + LINK_2_LEN)*z)) + alpha_dd;
 8001dd0:	a3ff      	add	r3, pc, #1020	; (adr r3, 80021d0 <calculate_angles+0x5d0>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001dda:	f7fe fa5f 	bl	800029c <__adddf3>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	a3fc      	add	r3, pc, #1008	; (adr r3, 80021d8 <calculate_angles+0x5d8>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fa54 	bl	8000298 <__aeabi_dsub>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4614      	mov	r4, r2
 8001df6:	461d      	mov	r5, r3
 8001df8:	a3f9      	add	r3, pc, #996	; (adr r3, 80021e0 <calculate_angles+0x5e0>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001e02:	f7fe fc01 	bl	8000608 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	f7fe fd25 	bl	800085c <__aeabi_ddiv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	ec43 2b17 	vmov	d7, r2, r3
 8001e1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e1e:	eef0 0a67 	vmov.f32	s1, s15
 8001e22:	f00b fc15 	bl	800d650 <acos>
 8001e26:	ec53 2b10 	vmov	r2, r3, d0
 8001e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001e2e:	f7fe fa35 	bl	800029c <__adddf3>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
        double r = norm(vec, 3);
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff fea3 	bl	8001b88 <norm>
 8001e42:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
        *alpha = acos((zz + LINK_0_LEN*LINK_0_LEN - r*r) / (2*z*LINK_0_LEN)) + alpha_d;
 8001e46:	a3e8      	add	r3, pc, #928	; (adr r3, 80021e8 <calculate_angles+0x5e8>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e50:	f7fe fa24 	bl	800029c <__adddf3>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4614      	mov	r4, r2
 8001e5a:	461d      	mov	r5, r3
 8001e5c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001e60:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001e64:	f7fe fbd0 	bl	8000608 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	4629      	mov	r1, r5
 8001e70:	f7fe fa12 	bl	8000298 <__aeabi_dsub>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4614      	mov	r4, r2
 8001e7a:	461d      	mov	r5, r3
 8001e7c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	f7fe fa0a 	bl	800029c <__adddf3>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	a3d7      	add	r3, pc, #860	; (adr r3, 80021f0 <calculate_angles+0x5f0>)
 8001e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e96:	f7fe fbb7 	bl	8000608 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe fcdb 	bl	800085c <__aeabi_ddiv>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	ec43 2b17 	vmov	d7, r2, r3
 8001eae:	eeb0 0a47 	vmov.f32	s0, s14
 8001eb2:	eef0 0a67 	vmov.f32	s1, s15
 8001eb6:	f00b fbcb 	bl	800d650 <acos>
 8001eba:	ec51 0b10 	vmov	r0, r1, d0
 8001ebe:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001ec2:	f7fe f9eb 	bl	800029c <__adddf3>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	e9c1 2300 	strd	r2, r3, [r1]

        *beta = M_PI;
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	a3c9      	add	r3, pc, #804	; (adr r3, 80021f8 <calculate_angles+0x5f8>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	e9c1 2300 	strd	r2, r3, [r1]
        *zeta = acos(((LINK_1_LEN+LINK_2_LEN)*(LINK_1_LEN+LINK_2_LEN) + LINK_3_LEN*LINK_3_LEN - zz) / (2*(LINK_1_LEN+LINK_2_LEN)*LINK_3_LEN));
 8001edc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001ee0:	a1c7      	add	r1, pc, #796	; (adr r1, 8002200 <calculate_angles+0x600>)
 8001ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ee6:	f7fe f9d7 	bl	8000298 <__aeabi_dsub>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	a3c5      	add	r3, pc, #788	; (adr r3, 8002208 <calculate_angles+0x608>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fcb0 	bl	800085c <__aeabi_ddiv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	ec43 2b17 	vmov	d7, r2, r3
 8001f04:	eeb0 0a47 	vmov.f32	s0, s14
 8001f08:	eef0 0a67 	vmov.f32	s1, s15
 8001f0c:	f00b fba0 	bl	800d650 <acos>
 8001f10:	eeb0 7a40 	vmov.f32	s14, s0
 8001f14:	eef0 7a60 	vmov.f32	s15, s1
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	ed83 7b00 	vstr	d7, [r3]
        *gamma = atan2(vec[1], vec[0]);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3308      	adds	r3, #8
 8001f22:	ed93 7b00 	vldr	d7, [r3]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	ed93 6b00 	vldr	d6, [r3]
 8001f2c:	eeb0 1a46 	vmov.f32	s2, s12
 8001f30:	eef0 1a66 	vmov.f32	s3, s13
 8001f34:	eeb0 0a47 	vmov.f32	s0, s14
 8001f38:	eef0 0a67 	vmov.f32	s1, s15
 8001f3c:	f00b fbbc 	bl	800d6b8 <atan2>
 8001f40:	eeb0 7a40 	vmov.f32	s14, s0
 8001f44:	eef0 7a60 	vmov.f32	s15, s1
 8001f48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f4c:	ed83 7b00 	vstr	d7, [r3]
        *alpha = *alpha - M_PI_2;
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f56:	a3ae      	add	r3, pc, #696	; (adr r3, 8002210 <calculate_angles+0x610>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe f99c 	bl	8000298 <__aeabi_dsub>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	e9c1 2300 	strd	r2, r3, [r1]
 8001f6a:	e12a      	b.n	80021c2 <calculate_angles+0x5c2>
    } else {
        double r_dd = norm(r_dd_vec, 3);
 8001f6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f70:	2103      	movs	r1, #3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fe08 	bl	8001b88 <norm>
 8001f78:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
        double r_dd_2 = r_dd*r_dd;
 8001f7c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001f80:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001f84:	f7fe fb40 	bl	8000608 <__aeabi_dmul>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
        double alpha_dd = acos((LINK_1_LEN*LINK_1_LEN + r_dd_2 - LINK_2_LEN*LINK_2_LEN) / (2*LINK_1_LEN*r_dd));
 8001f90:	a3a1      	add	r3, pc, #644	; (adr r3, 8002218 <calculate_angles+0x618>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001f9a:	f7fe f97f 	bl	800029c <__adddf3>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	a39e      	add	r3, pc, #632	; (adr r3, 8002220 <calculate_angles+0x620>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe f974 	bl	8000298 <__aeabi_dsub>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	a39b      	add	r3, pc, #620	; (adr r3, 8002228 <calculate_angles+0x628>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001fc2:	f7fe fb21 	bl	8000608 <__aeabi_dmul>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4620      	mov	r0, r4
 8001fcc:	4629      	mov	r1, r5
 8001fce:	f7fe fc45 	bl	800085c <__aeabi_ddiv>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	ec43 2b17 	vmov	d7, r2, r3
 8001fda:	eeb0 0a47 	vmov.f32	s0, s14
 8001fde:	eef0 0a67 	vmov.f32	s1, s15
 8001fe2:	f00b fb35 	bl	800d650 <acos>
 8001fe6:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
        double alpha_d = acos((r_dd_2 + zz - LINK_3_LEN*LINK_3_LEN) / (2*z*r_dd)) + alpha_dd;
 8001fea:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001fee:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001ff2:	f7fe f953 	bl	800029c <__adddf3>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	a376      	add	r3, pc, #472	; (adr r3, 80021d8 <calculate_angles+0x5d8>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe f948 	bl	8000298 <__aeabi_dsub>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4614      	mov	r4, r2
 800200e:	461d      	mov	r5, r3
 8002010:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	f7fe f940 	bl	800029c <__adddf3>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002028:	f7fe faee 	bl	8000608 <__aeabi_dmul>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4620      	mov	r0, r4
 8002032:	4629      	mov	r1, r5
 8002034:	f7fe fc12 	bl	800085c <__aeabi_ddiv>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	ec43 2b17 	vmov	d7, r2, r3
 8002040:	eeb0 0a47 	vmov.f32	s0, s14
 8002044:	eef0 0a67 	vmov.f32	s1, s15
 8002048:	f00b fb02 	bl	800d650 <acos>
 800204c:	ec53 2b10 	vmov	r2, r3, d0
 8002050:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002054:	f7fe f922 	bl	800029c <__adddf3>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
        double r = norm(vec, 3);
 8002060:	2103      	movs	r1, #3
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff fd90 	bl	8001b88 <norm>
 8002068:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
        *alpha = acos((zz + LINK_0_LEN*LINK_0_LEN - r*r) / (2*z*LINK_0_LEN)) + alpha_d;
 800206c:	a35e      	add	r3, pc, #376	; (adr r3, 80021e8 <calculate_angles+0x5e8>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002076:	f7fe f911 	bl	800029c <__adddf3>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4614      	mov	r4, r2
 8002080:	461d      	mov	r5, r3
 8002082:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002086:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800208a:	f7fe fabd 	bl	8000608 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4620      	mov	r0, r4
 8002094:	4629      	mov	r1, r5
 8002096:	f7fe f8ff 	bl	8000298 <__aeabi_dsub>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4614      	mov	r4, r2
 80020a0:	461d      	mov	r5, r3
 80020a2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	f7fe f8f7 	bl	800029c <__adddf3>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	a34e      	add	r3, pc, #312	; (adr r3, 80021f0 <calculate_angles+0x5f0>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe faa4 	bl	8000608 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4620      	mov	r0, r4
 80020c6:	4629      	mov	r1, r5
 80020c8:	f7fe fbc8 	bl	800085c <__aeabi_ddiv>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	ec43 2b17 	vmov	d7, r2, r3
 80020d4:	eeb0 0a47 	vmov.f32	s0, s14
 80020d8:	eef0 0a67 	vmov.f32	s1, s15
 80020dc:	f00b fab8 	bl	800d650 <acos>
 80020e0:	ec51 0b10 	vmov	r0, r1, d0
 80020e4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80020e8:	f7fe f8d8 	bl	800029c <__adddf3>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	e9c1 2300 	strd	r2, r3, [r1]
        *beta = acos((LINK_1_LEN*LINK_1_LEN + LINK_2_LEN*LINK_2_LEN - r_dd_2) / (2*LINK_1_LEN*LINK_2_LEN));
 80020f6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80020fa:	a14d      	add	r1, pc, #308	; (adr r1, 8002230 <calculate_angles+0x630>)
 80020fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002100:	f7fe f8ca 	bl	8000298 <__aeabi_dsub>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	a34a      	add	r3, pc, #296	; (adr r3, 8002238 <calculate_angles+0x638>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	f7fe fba3 	bl	800085c <__aeabi_ddiv>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	ec43 2b17 	vmov	d7, r2, r3
 800211e:	eeb0 0a47 	vmov.f32	s0, s14
 8002122:	eef0 0a67 	vmov.f32	s1, s15
 8002126:	f00b fa93 	bl	800d650 <acos>
 800212a:	eeb0 7a40 	vmov.f32	s14, s0
 800212e:	eef0 7a60 	vmov.f32	s15, s1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	ed83 7b00 	vstr	d7, [r3]
        *zeta = 3*M_PI - *alpha - *beta - M_PI;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	a140      	add	r1, pc, #256	; (adr r1, 8002240 <calculate_angles+0x640>)
 8002140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002144:	f7fe f8a8 	bl	8000298 <__aeabi_dsub>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe f89f 	bl	8000298 <__aeabi_dsub>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	a325      	add	r3, pc, #148	; (adr r3, 80021f8 <calculate_angles+0x5f8>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f7fe f896 	bl	8000298 <__aeabi_dsub>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	6839      	ldr	r1, [r7, #0]
 8002172:	e9c1 2300 	strd	r2, r3, [r1]
        *gamma = atan2(vec[1], vec[0]);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3308      	adds	r3, #8
 800217a:	ed93 7b00 	vldr	d7, [r3]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	ed93 6b00 	vldr	d6, [r3]
 8002184:	eeb0 1a46 	vmov.f32	s2, s12
 8002188:	eef0 1a66 	vmov.f32	s3, s13
 800218c:	eeb0 0a47 	vmov.f32	s0, s14
 8002190:	eef0 0a67 	vmov.f32	s1, s15
 8002194:	f00b fa90 	bl	800d6b8 <atan2>
 8002198:	eeb0 7a40 	vmov.f32	s14, s0
 800219c:	eef0 7a60 	vmov.f32	s15, s1
 80021a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021a4:	ed83 7b00 	vstr	d7, [r3]
        *alpha = *alpha - M_PI_2;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ae:	a318      	add	r3, pc, #96	; (adr r3, 8002210 <calculate_angles+0x610>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	f7fe f870 	bl	8000298 <__aeabi_dsub>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	e9c1 2300 	strd	r2, r3, [r1]
    }
}
 80021c2:	37c0      	adds	r7, #192	; 0xc0
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bdb0      	pop	{r4, r5, r7, pc}
 80021c8:	3d70a3d7 	.word	0x3d70a3d7
 80021cc:	4039170a 	.word	0x4039170a
 80021d0:	96bb98c8 	.word	0x96bb98c8
 80021d4:	4083ac10 	.word	0x4083ac10
 80021d8:	00000000 	.word	0x00000000
 80021dc:	40756400 	.word	0x40756400
 80021e0:	3d70a3d7 	.word	0x3d70a3d7
 80021e4:	4049170a 	.word	0x4049170a
 80021e8:	0a3d70a3 	.word	0x0a3d70a3
 80021ec:	4054b3d7 	.word	0x4054b3d7
 80021f0:	33333333 	.word	0x33333333
 80021f4:	40223333 	.word	0x40223333
 80021f8:	54442d18 	.word	0x54442d18
 80021fc:	400921fb 	.word	0x400921fb
 8002200:	96bb98c8 	.word	0x96bb98c8
 8002204:	408e5e10 	.word	0x408e5e10
 8002208:	d70a3d71 	.word	0xd70a3d71
 800220c:	408d02a3 	.word	0x408d02a3
 8002210:	54442d18 	.word	0x54442d18
 8002214:	3ff921fb 	.word	0x3ff921fb
 8002218:	c28f5c28 	.word	0xc28f5c28
 800221c:	405b4cf5 	.word	0x405b4cf5
 8002220:	154c9860 	.word	0x154c9860
 8002224:	406aca8c 	.word	0x406aca8c
 8002228:	66666666 	.word	0x66666666
 800222c:	4034e666 	.word	0x4034e666
 8002230:	7b4a233a 	.word	0x7b4a233a
 8002234:	40743883 	.word	0x40743883
 8002238:	b22d0e56 	.word	0xb22d0e56
 800223c:	40731f9d 	.word	0x40731f9d
 8002240:	7f3321d2 	.word	0x7f3321d2
 8002244:	4022d97c 	.word	0x4022d97c

08002248 <check_angle_validty>:


int check_angle_validty(double alpha, double beta, double zeta, double gamma){
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	ed87 0b06 	vstr	d0, [r7, #24]
 8002252:	ed87 1b04 	vstr	d1, [r7, #16]
 8002256:	ed87 2b02 	vstr	d2, [r7, #8]
 800225a:	ed87 3b00 	vstr	d3, [r7]


    if (!((alpha >= (SHOULDER_MOTOR_OFFSET_RAD + SHOULDER_MOTOR_MIN_RAD)) && (alpha <= (M_PI + SHOULDER_MOTOR_OFFSET_RAD)))) {
 800225e:	2301      	movs	r3, #1
 8002260:	461c      	mov	r4, r3
 8002262:	a355      	add	r3, pc, #340	; (adr r3, 80023b8 <check_angle_validty+0x170>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800226c:	f7fe fc52 	bl	8000b14 <__aeabi_dcmpge>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <check_angle_validty+0x32>
 8002276:	2300      	movs	r3, #0
 8002278:	461c      	mov	r4, r3
 800227a:	b2e3      	uxtb	r3, r4
 800227c:	f083 0301 	eor.w	r3, r3, #1
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d113      	bne.n	80022ae <check_angle_validty+0x66>
 8002286:	2301      	movs	r3, #1
 8002288:	461c      	mov	r4, r3
 800228a:	a34d      	add	r3, pc, #308	; (adr r3, 80023c0 <check_angle_validty+0x178>)
 800228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002290:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002294:	f7fe fc34 	bl	8000b00 <__aeabi_dcmple>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <check_angle_validty+0x5a>
 800229e:	2300      	movs	r3, #0
 80022a0:	461c      	mov	r4, r3
 80022a2:	b2e3      	uxtb	r3, r4
 80022a4:	f083 0301 	eor.w	r3, r3, #1
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <check_angle_validty+0x6a>
        return 1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e07e      	b.n	80023b0 <check_angle_validty+0x168>
    }
    if (!((beta >= (ELBOW_MOTOR_OFFSET_RAD + ELBOW_MOTOR_MIN_RAD)) && (beta <= (M_PI + ELBOW_MOTOR_OFFSET_RAD)))) {
 80022b2:	2301      	movs	r3, #1
 80022b4:	461c      	mov	r4, r3
 80022b6:	a344      	add	r3, pc, #272	; (adr r3, 80023c8 <check_angle_validty+0x180>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022c0:	f7fe fc28 	bl	8000b14 <__aeabi_dcmpge>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <check_angle_validty+0x86>
 80022ca:	2300      	movs	r3, #0
 80022cc:	461c      	mov	r4, r3
 80022ce:	b2e3      	uxtb	r3, r4
 80022d0:	f083 0301 	eor.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d113      	bne.n	8002302 <check_angle_validty+0xba>
 80022da:	2301      	movs	r3, #1
 80022dc:	461c      	mov	r4, r3
 80022de:	a33c      	add	r3, pc, #240	; (adr r3, 80023d0 <check_angle_validty+0x188>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022e8:	f7fe fc0a 	bl	8000b00 <__aeabi_dcmple>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <check_angle_validty+0xae>
 80022f2:	2300      	movs	r3, #0
 80022f4:	461c      	mov	r4, r3
 80022f6:	b2e3      	uxtb	r3, r4
 80022f8:	f083 0301 	eor.w	r3, r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <check_angle_validty+0xbe>
        return 1;
 8002302:	2301      	movs	r3, #1
 8002304:	e054      	b.n	80023b0 <check_angle_validty+0x168>
    }
    if (!((zeta >= (WRIST_MOTOR_OFFSET_RAD + WRIST_MOTOR_MIN_RAD)) && (zeta <= (M_PI + WRIST_MOTOR_OFFSET_RAD)))) {
 8002306:	2301      	movs	r3, #1
 8002308:	461c      	mov	r4, r3
 800230a:	a333      	add	r3, pc, #204	; (adr r3, 80023d8 <check_angle_validty+0x190>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002314:	f7fe fbfe 	bl	8000b14 <__aeabi_dcmpge>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <check_angle_validty+0xda>
 800231e:	2300      	movs	r3, #0
 8002320:	461c      	mov	r4, r3
 8002322:	b2e3      	uxtb	r3, r4
 8002324:	f083 0301 	eor.w	r3, r3, #1
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d113      	bne.n	8002356 <check_angle_validty+0x10e>
 800232e:	2301      	movs	r3, #1
 8002330:	461c      	mov	r4, r3
 8002332:	a32b      	add	r3, pc, #172	; (adr r3, 80023e0 <check_angle_validty+0x198>)
 8002334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002338:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800233c:	f7fe fbe0 	bl	8000b00 <__aeabi_dcmple>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <check_angle_validty+0x102>
 8002346:	2300      	movs	r3, #0
 8002348:	461c      	mov	r4, r3
 800234a:	b2e3      	uxtb	r3, r4
 800234c:	f083 0301 	eor.w	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <check_angle_validty+0x112>
        return 1;
 8002356:	2301      	movs	r3, #1
 8002358:	e02a      	b.n	80023b0 <check_angle_validty+0x168>
    }
    if (!((gamma >= (BASE_MOTOR_OFFSET_RAD + BASE_MOTOR_MIN_RAD)) && (gamma <= (M_PI + BASE_MOTOR_OFFSET_RAD)))) {
 800235a:	2301      	movs	r3, #1
 800235c:	461c      	mov	r4, r3
 800235e:	a322      	add	r3, pc, #136	; (adr r3, 80023e8 <check_angle_validty+0x1a0>)
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002368:	f7fe fbd4 	bl	8000b14 <__aeabi_dcmpge>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <check_angle_validty+0x12e>
 8002372:	2300      	movs	r3, #0
 8002374:	461c      	mov	r4, r3
 8002376:	b2e3      	uxtb	r3, r4
 8002378:	f083 0301 	eor.w	r3, r3, #1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d113      	bne.n	80023aa <check_angle_validty+0x162>
 8002382:	2301      	movs	r3, #1
 8002384:	461c      	mov	r4, r3
 8002386:	a31a      	add	r3, pc, #104	; (adr r3, 80023f0 <check_angle_validty+0x1a8>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002390:	f7fe fbb6 	bl	8000b00 <__aeabi_dcmple>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <check_angle_validty+0x156>
 800239a:	2300      	movs	r3, #0
 800239c:	461c      	mov	r4, r3
 800239e:	b2e3      	uxtb	r3, r4
 80023a0:	f083 0301 	eor.w	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <check_angle_validty+0x166>
        return 1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <check_angle_validty+0x168>
    }
    return 0;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3724      	adds	r7, #36	; 0x24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}
 80023b8:	382d7365 	.word	0x382d7365
 80023bc:	3fd0c152 	.word	0x3fd0c152
 80023c0:	9b49db85 	.word	0x9b49db85
 80023c4:	400b3a25 	.word	0x400b3a25
 80023c8:	54442d18 	.word	0x54442d18
 80023cc:	3fe921fb 	.word	0x3fe921fb
 80023d0:	54442d18 	.word	0x54442d18
 80023d4:	400921fb 	.word	0x400921fb
 80023d8:	418a5bf6 	.word	0x418a5bf6
 80023dc:	3fe38c35 	.word	0x3fe38c35
 80023e0:	169b673c 	.word	0x169b673c
 80023e4:	4009d4b4 	.word	0x4009d4b4
 80023e8:	769cf0e0 	.word	0x769cf0e0
 80023ec:	bfc41b2f 	.word	0xbfc41b2f
 80023f0:	5cda5e0a 	.word	0x5cda5e0a
 80023f4:	4007e048 	.word	0x4007e048

080023f8 <move_arm>:
//			printf_("Position [%0.2f][%0.2f][%0.2f] not reachable \n", eef_final_pos[0],eef_final_pos[1],eef_final_pos[2]);
//		}
//	}
//}

void move_arm(MotorTypedef *motors, SystemStateDefType *system_state){
 80023f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fa:	b097      	sub	sp, #92	; 0x5c
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]


	if (system_state->orientation!= ORIENTATAION_NEUTRAL){
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8121 	beq.w	800264e <move_arm+0x256>

		double eef_final_pos[3] = {system_state->eef_curr_pos[0], system_state->eef_curr_pos[1], system_state->eef_curr_pos[2]};
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002412:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800241c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002426:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		uint8_t axis = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		int8_t direction = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

//		double eef_final_pos[3];
		switch (system_state->orientation){
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	3b01      	subs	r3, #1
 800243c:	2b05      	cmp	r3, #5
 800243e:	d839      	bhi.n	80024b4 <move_arm+0xbc>
 8002440:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <move_arm+0x50>)
 8002442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002446:	bf00      	nop
 8002448:	0800247d 	.word	0x0800247d
 800244c:	0800248b 	.word	0x0800248b
 8002450:	08002461 	.word	0x08002461
 8002454:	0800246f 	.word	0x0800246f
 8002458:	08002499 	.word	0x08002499
 800245c:	080024a7 	.word	0x080024a7
			case ORIENTATAION_Y_PLUS:
//				eef_final_pos[1] = system_state->eef_curr_pos[1] + 5;
				axis = 1;
 8002460:	2301      	movs	r3, #1
 8002462:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				direction = +1;
 8002466:	2301      	movs	r3, #1
 8002468:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				break;
 800246c:	e023      	b.n	80024b6 <move_arm+0xbe>
			case ORIENTATAION_Y_NEG:
//				eef_final_pos[1] = system_state->eef_curr_pos[1] - 5;
				axis = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				direction = -1;
 8002474:	23ff      	movs	r3, #255	; 0xff
 8002476:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				break;
 800247a:	e01c      	b.n	80024b6 <move_arm+0xbe>
			case ORIENTATAION_X_PLUS:
//				eef_final_pos[0] = system_state->eef_curr_pos[0] + 5;
				axis = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				direction = +1;
 8002482:	2301      	movs	r3, #1
 8002484:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				break;
 8002488:	e015      	b.n	80024b6 <move_arm+0xbe>
			case ORIENTATAION_X_NEG:
//				eef_final_pos[0] = system_state->eef_curr_pos[0] - 5;
				axis = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				direction = -1;
 8002490:	23ff      	movs	r3, #255	; 0xff
 8002492:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				break;
 8002496:	e00e      	b.n	80024b6 <move_arm+0xbe>
			case ORIENTATAION_Z_PLUS:
//				eef_final_pos[2] = system_state->eef_curr_pos[2] + 5;
				axis = 2;
 8002498:	2302      	movs	r3, #2
 800249a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				direction = +1;
 800249e:	2301      	movs	r3, #1
 80024a0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				break;
 80024a4:	e007      	b.n	80024b6 <move_arm+0xbe>
			case ORIENTATAION_Z_NEG:
//				eef_final_pos[2] = system_state->eef_curr_pos[2] - 5;
				axis = 2;
 80024a6:	2302      	movs	r3, #2
 80024a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				direction = -1;
 80024ac:	23ff      	movs	r3, #255	; 0xff
 80024ae:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				break;
 80024b2:	e000      	b.n	80024b6 <move_arm+0xbe>
			default:
				break;
 80024b4:	bf00      	nop

		}

		printf_("Orientation:%d\n",system_state->orientation );
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	486e      	ldr	r0, [pc, #440]	; (8002678 <move_arm+0x280>)
 80024be:	f002 fe6b 	bl	8005198 <printf_>

		double alpha_f, beta_f, zeta_f, gamma_f;
		double increment = 0.01;
 80024c2:	a365      	add	r3, pc, #404	; (adr r3, 8002658 <move_arm+0x260>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		for (uint8_t i = 1;i<=50; i++){
 80024cc:	2301      	movs	r3, #1
 80024ce:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80024d2:	e0b5      	b.n	8002640 <move_arm+0x248>
			eef_final_pos[axis] += ((double)direction)*increment;
 80024d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	3350      	adds	r3, #80	; 0x50
 80024dc:	443b      	add	r3, r7
 80024de:	3b28      	subs	r3, #40	; 0x28
 80024e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80024e4:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe f823 	bl	8000534 <__aeabi_i2d>
 80024ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024f2:	f7fe f889 	bl	8000608 <__aeabi_dmul>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	f897 604f 	ldrb.w	r6, [r7, #79]	; 0x4f
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fd fecb 	bl	800029c <__adddf3>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	00f1      	lsls	r1, r6, #3
 800250c:	3150      	adds	r1, #80	; 0x50
 800250e:	4439      	add	r1, r7
 8002510:	3928      	subs	r1, #40	; 0x28
 8002512:	e9c1 2300 	strd	r2, r3, [r1]
//			printf_("dir - %d, dir*inc - %f\n",direction, ((double)direction)*increment );
			calculate_angles(eef_final_pos, &alpha_f, &beta_f, &zeta_f, &gamma_f);
 8002516:	f107 0410 	add.w	r4, r7, #16
 800251a:	f107 0218 	add.w	r2, r7, #24
 800251e:	f107 0120 	add.w	r1, r7, #32
 8002522:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002526:	f107 0308 	add.w	r3, r7, #8
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4623      	mov	r3, r4
 800252e:	f7ff fb67 	bl	8001c00 <calculate_angles>
			if(check_angle_validty(alpha_f, beta_f, zeta_f, gamma_f) == 0){
 8002532:	ed97 7b08 	vldr	d7, [r7, #32]
 8002536:	ed97 6b06 	vldr	d6, [r7, #24]
 800253a:	ed97 5b04 	vldr	d5, [r7, #16]
 800253e:	ed97 4b02 	vldr	d4, [r7, #8]
 8002542:	eeb0 3a44 	vmov.f32	s6, s8
 8002546:	eef0 3a64 	vmov.f32	s7, s9
 800254a:	eeb0 2a45 	vmov.f32	s4, s10
 800254e:	eef0 2a65 	vmov.f32	s5, s11
 8002552:	eeb0 1a46 	vmov.f32	s2, s12
 8002556:	eef0 1a66 	vmov.f32	s3, s13
 800255a:	eeb0 0a47 	vmov.f32	s0, s14
 800255e:	eef0 0a67 	vmov.f32	s1, s15
 8002562:	f7ff fe71 	bl	8002248 <check_angle_validty>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d16f      	bne.n	800264c <move_arm+0x254>
				system_state->eef_curr_pos[axis] = eef_final_pos[axis];
 800256c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002570:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	3350      	adds	r3, #80	; 0x50
 8002578:	443b      	add	r3, r7
 800257a:	3b28      	subs	r3, #40	; 0x28
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	3101      	adds	r1, #1
 8002584:	00c9      	lsls	r1, r1, #3
 8002586:	4401      	add	r1, r0
 8002588:	e9c1 2300 	strd	r2, r3, [r1]
//				printf_("Position [%0.2f][%0.2f][%0.2f]\n", system_state->eef_curr_pos[0],system_state->eef_curr_pos[1],system_state->eef_curr_pos[2]);
				set_duty_cycle(&motors[BASE_MOTOR_NUM],gamma_f + BASE_MOTOR_OFFSET_RAD);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8002592:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002596:	a332      	add	r3, pc, #200	; (adr r3, 8002660 <move_arm+0x268>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f7fd fe7c 	bl	8000298 <__aeabi_dsub>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	ec43 2b17 	vmov	d7, r2, r3
 80025a8:	eeb0 0a47 	vmov.f32	s0, s14
 80025ac:	eef0 0a67 	vmov.f32	s1, s15
 80025b0:	4620      	mov	r0, r4
 80025b2:	f000 f865 	bl	8002680 <set_duty_cycle>
				set_duty_cycle(&motors[SHOULDER_MOTOR_NUM],alpha_f + SHOULDER_MOTOR_OFFSET_RAD);
 80025b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025ba:	a32b      	add	r3, pc, #172	; (adr r3, 8002668 <move_arm+0x270>)
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fd fe6c 	bl	800029c <__adddf3>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	ec43 2b17 	vmov	d7, r2, r3
 80025cc:	eeb0 0a47 	vmov.f32	s0, s14
 80025d0:	eef0 0a67 	vmov.f32	s1, s15
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f853 	bl	8002680 <set_duty_cycle>
				set_duty_cycle(&motors[ELBOW_MOTOR_NUM],beta_f + ELBOW_MOTOR_OFFSET_RAD);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80025e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	f7fd fe56 	bl	800029c <__adddf3>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	ec43 2b17 	vmov	d7, r2, r3
 80025f8:	eeb0 0a47 	vmov.f32	s0, s14
 80025fc:	eef0 0a67 	vmov.f32	s1, s15
 8002600:	4620      	mov	r0, r4
 8002602:	f000 f83d 	bl	8002680 <set_duty_cycle>
				set_duty_cycle(&motors[WRIST_MOTOR_NUM],zeta_f + WRIST_MOTOR_OFFSET_RAD);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800260c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002610:	a317      	add	r3, pc, #92	; (adr r3, 8002670 <move_arm+0x278>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd fe41 	bl	800029c <__adddf3>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	ec43 2b17 	vmov	d7, r2, r3
 8002622:	eeb0 0a47 	vmov.f32	s0, s14
 8002626:	eef0 0a67 	vmov.f32	s1, s15
 800262a:	4620      	mov	r0, r4
 800262c:	f000 f828 	bl	8002680 <set_duty_cycle>
				HAL_Delay(5);
 8002630:	2005      	movs	r0, #5
 8002632:	f003 fc6d 	bl	8005f10 <HAL_Delay>
		for (uint8_t i = 1;i<=50; i++){
 8002636:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800263a:	3301      	adds	r3, #1
 800263c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8002640:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002644:	2b32      	cmp	r3, #50	; 0x32
 8002646:	f67f af45 	bls.w	80024d4 <move_arm+0xdc>
				break;
			}
		}
//		printf_("Position [%0.2f][%0.2f][%0.2f]\n", system_state->eef_curr_pos[0],system_state->eef_curr_pos[1],system_state->eef_curr_pos[2]);
	}
}
 800264a:	e000      	b.n	800264e <move_arm+0x256>
				break;
 800264c:	bf00      	nop
}
 800264e:	bf00      	nop
 8002650:	3754      	adds	r7, #84	; 0x54
 8002652:	46bd      	mov	sp, r7
 8002654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002656:	bf00      	nop
 8002658:	47ae147b 	.word	0x47ae147b
 800265c:	3f847ae1 	.word	0x3f847ae1
 8002660:	769cf0e0 	.word	0x769cf0e0
 8002664:	3fc41b2f 	.word	0x3fc41b2f
 8002668:	382d7365 	.word	0x382d7365
 800266c:	3fd0c152 	.word	0x3fd0c152
 8002670:	4ae74487 	.word	0x4ae74487
 8002674:	3fb65718 	.word	0x3fb65718
 8002678:	0800e2c4 	.word	0x0800e2c4
 800267c:	00000000 	.word	0x00000000

08002680 <set_duty_cycle>:



void set_duty_cycle(MotorTypedef *motor, double angle){
 8002680:	b5b0      	push	{r4, r5, r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	ed87 0b00 	vstr	d0, [r7]
	// Angle(Radians)
	double duty_cycle = (double)(motor->min_duty_cycle + ((angle)*(motor->max_duty_cycle - motor->min_duty_cycle)/M_PI));
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800269e:	f7fd fdfb 	bl	8000298 <__aeabi_dsub>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026ae:	f7fd ffab 	bl	8000608 <__aeabi_dmul>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	a31a      	add	r3, pc, #104	; (adr r3, 8002724 <set_duty_cycle+0xa4>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f7fe f8cc 	bl	800085c <__aeabi_ddiv>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4620      	mov	r0, r4
 80026ca:	4629      	mov	r1, r5
 80026cc:	f7fd fde6 	bl	800029c <__adddf3>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*(motor->ccr) = (uint32_t)((duty_cycle * (double)(0xFFFF))/100);
 80026d8:	a314      	add	r3, pc, #80	; (adr r3, 800272c <set_duty_cycle+0xac>)
 80026da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026e2:	f7fd ff91 	bl	8000608 <__aeabi_dmul>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <set_duty_cycle+0xa0>)
 80026f4:	f7fe f8b2 	bl	800085c <__aeabi_ddiv>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681c      	ldr	r4, [r3, #0]
 8002704:	f7fe fa58 	bl	8000bb8 <__aeabi_d2uiz>
 8002708:	4603      	mov	r3, r0
 800270a:	6023      	str	r3, [r4, #0]
	motor->cur_DC = duty_cycle;
 800270c:	68f9      	ldr	r1, [r7, #12]
 800270e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002712:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bdb0      	pop	{r4, r5, r7, pc}
 800271e:	bf00      	nop
 8002720:	40590000 	.word	0x40590000
 8002724:	54442d18 	.word	0x54442d18
 8002728:	400921fb 	.word	0x400921fb
 800272c:	00000000 	.word	0x00000000
 8002730:	40efffe0 	.word	0x40efffe0
 8002734:	00000000 	.word	0x00000000

08002738 <process_motor_command>:
	}
	return 1;
}


void process_motor_command(uint8_t *command, MotorTypedef *motors){
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
	uint8_t motor = command[1] - '0'; // convert the second letter to an integer
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3301      	adds	r3, #1
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	3b30      	subs	r3, #48	; 0x30
 800274a:	75fb      	strb	r3, [r7, #23]
	char *ptr;

	if (motor >= 0 && motor < NUM_OF_MOTORS){
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	2b05      	cmp	r3, #5
 8002750:	d84c      	bhi.n	80027ec <process_motor_command+0xb4>
	  float angle = strtof((char*)command + 3, &ptr); // convert the rest of the string to a double
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3303      	adds	r3, #3
 8002756:	f107 020c 	add.w	r2, r7, #12
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f008 ffa3 	bl	800b6a8 <strtof>
 8002762:	ed87 0a04 	vstr	s0, [r7, #16]

	  if (angle >= 0 && angle <= 190){
 8002766:	edd7 7a04 	vldr	s15, [r7, #16]
 800276a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	db37      	blt.n	80027e4 <process_motor_command+0xac>
 8002774:	edd7 7a04 	vldr	s15, [r7, #16]
 8002778:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002808 <process_motor_command+0xd0>
 800277c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002784:	d82e      	bhi.n	80027e4 <process_motor_command+0xac>

		set_duty_cycle(&motors[motor], (angle*M_PI)/180);
 8002786:	7dfa      	ldrb	r2, [r7, #23]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	461a      	mov	r2, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	189c      	adds	r4, r3, r2
 8002796:	6938      	ldr	r0, [r7, #16]
 8002798:	f7fd fede 	bl	8000558 <__aeabi_f2d>
 800279c:	a318      	add	r3, pc, #96	; (adr r3, 8002800 <process_motor_command+0xc8>)
 800279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a2:	f7fd ff31 	bl	8000608 <__aeabi_dmul>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <process_motor_command+0xd4>)
 80027b4:	f7fe f852 	bl	800085c <__aeabi_ddiv>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	ec43 2b17 	vmov	d7, r2, r3
 80027c0:	eeb0 0a47 	vmov.f32	s0, s14
 80027c4:	eef0 0a67 	vmov.f32	s1, s15
 80027c8:	4620      	mov	r0, r4
 80027ca:	f7ff ff59 	bl	8002680 <set_duty_cycle>
		printf_("Motor %d set to %.2f degrees.\n", motor, angle); // print the result
 80027ce:	7dfc      	ldrb	r4, [r7, #23]
 80027d0:	6938      	ldr	r0, [r7, #16]
 80027d2:	f7fd fec1 	bl	8000558 <__aeabi_f2d>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4621      	mov	r1, r4
 80027dc:	480c      	ldr	r0, [pc, #48]	; (8002810 <process_motor_command+0xd8>)
 80027de:	f002 fcdb 	bl	8005198 <printf_>

	else{
	  printf_("Invalid motor number.\n"); // print an error message
	}

}
 80027e2:	e006      	b.n	80027f2 <process_motor_command+0xba>
		printf_("Invalid angle.\n"); // print an error message
 80027e4:	480b      	ldr	r0, [pc, #44]	; (8002814 <process_motor_command+0xdc>)
 80027e6:	f002 fcd7 	bl	8005198 <printf_>
}
 80027ea:	e002      	b.n	80027f2 <process_motor_command+0xba>
	  printf_("Invalid motor number.\n"); // print an error message
 80027ec:	480a      	ldr	r0, [pc, #40]	; (8002818 <process_motor_command+0xe0>)
 80027ee:	f002 fcd3 	bl	8005198 <printf_>
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	bf00      	nop
 80027fc:	f3af 8000 	nop.w
 8002800:	54442d18 	.word	0x54442d18
 8002804:	400921fb 	.word	0x400921fb
 8002808:	433e0000 	.word	0x433e0000
 800280c:	40668000 	.word	0x40668000
 8002810:	0800e2d4 	.word	0x0800e2d4
 8002814:	0800e2f4 	.word	0x0800e2f4
 8002818:	0800e304 	.word	0x0800e304

0800281c <process_accelerometer_command>:

	}
}


void process_accelerometer_command(uint8_t *command){
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

	uint8_t type = command[2]-'0';
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3302      	adds	r3, #2
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	3b30      	subs	r3, #48	; 0x30
 800282c:	75fb      	strb	r3, [r7, #23]

	float data[3];

	if(type == ACCELERATION){
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10c      	bne.n	800284e <process_accelerometer_command+0x32>
		MPU6050_Read_Accel(&data[0], &data[1], &data[2]);
 8002834:	f107 0308 	add.w	r3, r7, #8
 8002838:	f103 0208 	add.w	r2, r3, #8
 800283c:	f107 0308 	add.w	r3, r7, #8
 8002840:	1d19      	adds	r1, r3, #4
 8002842:	f107 0308 	add.w	r3, r7, #8
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fc2a 	bl	80010a0 <MPU6050_Read_Accel>

	else{
		printf_("Accelerometer Command Error");
	}

}
 800284c:	e012      	b.n	8002874 <process_accelerometer_command+0x58>
	else if (type == ANGULAR_SPEED){
 800284e:	7dfb      	ldrb	r3, [r7, #23]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10c      	bne.n	800286e <process_accelerometer_command+0x52>
		MPU6050_Read_Gyro(&data[0], &data[1], &data[2]);
 8002854:	f107 0308 	add.w	r3, r7, #8
 8002858:	f103 0208 	add.w	r2, r3, #8
 800285c:	f107 0308 	add.w	r3, r7, #8
 8002860:	1d19      	adds	r1, r3, #4
 8002862:	f107 0308 	add.w	r3, r7, #8
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fca2 	bl	80011b0 <MPU6050_Read_Gyro>
}
 800286c:	e002      	b.n	8002874 <process_accelerometer_command+0x58>
		printf_("Accelerometer Command Error");
 800286e:	4803      	ldr	r0, [pc, #12]	; (800287c <process_accelerometer_command+0x60>)
 8002870:	f002 fc92 	bl	8005198 <printf_>
}
 8002874:	bf00      	nop
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	0800e37c 	.word	0x0800e37c

08002880 <save_cmd>:


void save_cmd(UART_HandleTypeDef *huart){
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

	uint8_t buff_init_copy = cmd_buff.buff_init;
 8002888:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <save_cmd+0x13c>)
 800288a:	7a5b      	ldrb	r3, [r3, #9]
 800288c:	737b      	strb	r3, [r7, #13]

	for(uint8_t i = 0; i<RX_BUFF_LEN; i++){
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	e08c      	b.n	80029ae <save_cmd+0x12e>

		if(cmd_buff.buffer_full==1){
 8002894:	4b49      	ldr	r3, [pc, #292]	; (80029bc <save_cmd+0x13c>)
 8002896:	7a1b      	ldrb	r3, [r3, #8]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d103      	bne.n	80028a6 <save_cmd+0x26>
				printf_("Buffer Full\n");
 800289e:	4848      	ldr	r0, [pc, #288]	; (80029c0 <save_cmd+0x140>)
 80028a0:	f002 fc7a 	bl	8005198 <printf_>
				return;
 80028a4:	e087      	b.n	80029b6 <save_cmd+0x136>
			}

		else{
			if(cmd_buff.curr_pos == cmd_buff.read_pos){
 80028a6:	4b45      	ldr	r3, [pc, #276]	; (80029bc <save_cmd+0x13c>)
 80028a8:	889b      	ldrh	r3, [r3, #4]
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	4b43      	ldr	r3, [pc, #268]	; (80029bc <save_cmd+0x13c>)
 80028ae:	88db      	ldrh	r3, [r3, #6]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d110      	bne.n	80028d6 <save_cmd+0x56>

				if(!(cmd_buff.buff_init || cmd_buff.catch_up)){
 80028b4:	4b41      	ldr	r3, [pc, #260]	; (80029bc <save_cmd+0x13c>)
 80028b6:	7a5b      	ldrb	r3, [r3, #9]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10b      	bne.n	80028d6 <save_cmd+0x56>
 80028be:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <save_cmd+0x13c>)
 80028c0:	7a9b      	ldrb	r3, [r3, #10]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <save_cmd+0x56>
					cmd_buff.buffer_full = 1;
 80028c8:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <save_cmd+0x13c>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	721a      	strb	r2, [r3, #8]
					printf_("Buffer Full\n");
 80028ce:	483c      	ldr	r0, [pc, #240]	; (80029c0 <save_cmd+0x140>)
 80028d0:	f002 fc62 	bl	8005198 <printf_>
					return;
 80028d4:	e06f      	b.n	80029b6 <save_cmd+0x136>
				}
			}
		}


		cmd_buff.buff_init = 0;
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <save_cmd+0x13c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	725a      	strb	r2, [r3, #9]
		cmd_buff.buff[cmd_buff.curr_pos] = rx_buff[i];
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <save_cmd+0x13c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4936      	ldr	r1, [pc, #216]	; (80029bc <save_cmd+0x13c>)
 80028e4:	8889      	ldrh	r1, [r1, #4]
 80028e6:	b289      	uxth	r1, r1
 80028e8:	440b      	add	r3, r1
 80028ea:	4936      	ldr	r1, [pc, #216]	; (80029c4 <save_cmd+0x144>)
 80028ec:	5c8a      	ldrb	r2, [r1, r2]
 80028ee:	701a      	strb	r2, [r3, #0]

		uint8_t end_of_message = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	73bb      	strb	r3, [r7, #14]

		if(cmd_buff.buff[cmd_buff.curr_pos] == '$'){
 80028f4:	4b31      	ldr	r3, [pc, #196]	; (80029bc <save_cmd+0x13c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a30      	ldr	r2, [pc, #192]	; (80029bc <save_cmd+0x13c>)
 80028fa:	8892      	ldrh	r2, [r2, #4]
 80028fc:	b292      	uxth	r2, r2
 80028fe:	4413      	add	r3, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b24      	cmp	r3, #36	; 0x24
 8002906:	d11a      	bne.n	800293e <save_cmd+0xbe>
			if(i != RX_BUFF_LEN -1)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b09      	cmp	r3, #9
 800290c:	d015      	beq.n	800293a <save_cmd+0xba>
			{
				HAL_UART_DMAStop(&huart5);
 800290e:	482e      	ldr	r0, [pc, #184]	; (80029c8 <save_cmd+0x148>)
 8002910:	f007 f9c4 	bl	8009c9c <HAL_UART_DMAStop>
				cmd_buff.curr_pos = cmd_buff.curr_pos -(i);
 8002914:	4b29      	ldr	r3, [pc, #164]	; (80029bc <save_cmd+0x13c>)
 8002916:	889b      	ldrh	r3, [r3, #4]
 8002918:	b29a      	uxth	r2, r3
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	b29b      	uxth	r3, r3
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	b29a      	uxth	r2, r3
 8002922:	4b26      	ldr	r3, [pc, #152]	; (80029bc <save_cmd+0x13c>)
 8002924:	809a      	strh	r2, [r3, #4]
				if (buff_init_copy == 1){
 8002926:	7b7b      	ldrb	r3, [r7, #13]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d102      	bne.n	8002932 <save_cmd+0xb2>
					cmd_buff.buff_init = 1;
 800292c:	4b23      	ldr	r3, [pc, #140]	; (80029bc <save_cmd+0x13c>)
 800292e:	2201      	movs	r2, #1
 8002930:	725a      	strb	r2, [r3, #9]
				}

				printf_("Invalid Command\n");
 8002932:	4826      	ldr	r0, [pc, #152]	; (80029cc <save_cmd+0x14c>)
 8002934:	f002 fc30 	bl	8005198 <printf_>
				break;
 8002938:	e03d      	b.n	80029b6 <save_cmd+0x136>
			}

			end_of_message = 1;
 800293a:	2301      	movs	r3, #1
 800293c:	73bb      	strb	r3, [r7, #14]
		}


		if(cmd_buff.curr_pos==CMD_BUFF_LEN-1){
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <save_cmd+0x13c>)
 8002940:	889b      	ldrh	r3, [r3, #4]
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b13      	cmp	r3, #19
 8002946:	d103      	bne.n	8002950 <save_cmd+0xd0>
			cmd_buff.curr_pos=0;
 8002948:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <save_cmd+0x13c>)
 800294a:	2200      	movs	r2, #0
 800294c:	809a      	strh	r2, [r3, #4]
 800294e:	e006      	b.n	800295e <save_cmd+0xde>
		}
		else{
			cmd_buff.curr_pos+=1;
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <save_cmd+0x13c>)
 8002952:	889b      	ldrh	r3, [r3, #4]
 8002954:	b29b      	uxth	r3, r3
 8002956:	3301      	adds	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	4b18      	ldr	r3, [pc, #96]	; (80029bc <save_cmd+0x13c>)
 800295c:	809a      	strh	r2, [r3, #4]
		}

		if((i == RX_BUFF_LEN -1) && (end_of_message == 0) ){
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	2b09      	cmp	r3, #9
 8002962:	d11a      	bne.n	800299a <save_cmd+0x11a>
 8002964:	7bbb      	ldrb	r3, [r7, #14]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d117      	bne.n	800299a <save_cmd+0x11a>
			HAL_UART_DMAStop(&huart5);
 800296a:	4817      	ldr	r0, [pc, #92]	; (80029c8 <save_cmd+0x148>)
 800296c:	f007 f996 	bl	8009c9c <HAL_UART_DMAStop>
			cmd_buff.curr_pos = cmd_buff.curr_pos -(i+1);
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <save_cmd+0x13c>)
 8002972:	889b      	ldrh	r3, [r3, #4]
 8002974:	b29a      	uxth	r2, r3
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	b29b      	uxth	r3, r3
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <save_cmd+0x13c>)
 8002984:	809a      	strh	r2, [r3, #4]
			if (buff_init_copy == 1){
 8002986:	7b7b      	ldrb	r3, [r7, #13]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d102      	bne.n	8002992 <save_cmd+0x112>
				cmd_buff.buff_init = 1;
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <save_cmd+0x13c>)
 800298e:	2201      	movs	r2, #1
 8002990:	725a      	strb	r2, [r3, #9]
			}

			printf_("Invalid Command\n");
 8002992:	480e      	ldr	r0, [pc, #56]	; (80029cc <save_cmd+0x14c>)
 8002994:	f002 fc00 	bl	8005198 <printf_>
			break;
 8002998:	e00d      	b.n	80029b6 <save_cmd+0x136>
		}

		if(end_of_message == 1){
 800299a:	7bbb      	ldrb	r3, [r7, #14]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d103      	bne.n	80029a8 <save_cmd+0x128>
//			HAL_UART_Transmit(huart, rx_buff, i+1, HAL_MAX_DELAY);
			cmd_buff.catch_up = 0;
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <save_cmd+0x13c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	729a      	strb	r2, [r3, #10]
			break;
 80029a6:	e006      	b.n	80029b6 <save_cmd+0x136>
	for(uint8_t i = 0; i<RX_BUFF_LEN; i++){
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	3301      	adds	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	2b09      	cmp	r3, #9
 80029b2:	f67f af6f 	bls.w	8002894 <save_cmd+0x14>
		}
	}
}
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000000 	.word	0x20000000
 80029c0:	0800e398 	.word	0x0800e398
 80029c4:	200002f4 	.word	0x200002f4
 80029c8:	20000524 	.word	0x20000524
 80029cc:	0800e3a8 	.word	0x0800e3a8

080029d0 <process_cmds>:

HAL_StatusTypeDef process_cmds(CommandBuffTypedef *Command_Buff, MotorTypedef *motors, SystemStateDefType *system_state){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
	if(Command_Buff->read_pos == Command_Buff->curr_pos){
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	88da      	ldrh	r2, [r3, #6]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	889b      	ldrh	r3, [r3, #4]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	429a      	cmp	r2, r3
 80029e8:	f040 80a5 	bne.w	8002b36 <process_cmds+0x166>
		if ((cmd_buff.buff_init || cmd_buff.catch_up)){
 80029ec:	4b57      	ldr	r3, [pc, #348]	; (8002b4c <process_cmds+0x17c>)
 80029ee:	7a5b      	ldrb	r3, [r3, #9]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <process_cmds+0x32>
 80029f6:	4b55      	ldr	r3, [pc, #340]	; (8002b4c <process_cmds+0x17c>)
 80029f8:	7a9b      	ldrb	r3, [r3, #10]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 809a 	beq.w	8002b36 <process_cmds+0x166>
			return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e09e      	b.n	8002b44 <process_cmds+0x174>
		}
	}

	while(Command_Buff->catch_up != 1){
		uint8_t cmd[CMD_MAX_LEN];
		uint8_t cmd_len = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(uint8_t i = 0; i<CMD_MAX_LEN; i++){
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002a12:	e044      	b.n	8002a9e <process_cmds+0xce>
			cmd_len = i+1;
 8002a14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (Command_Buff->buff[Command_Buff->read_pos]!='$'){
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	88d2      	ldrh	r2, [r2, #6]
 8002a26:	4413      	add	r3, r2
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b24      	cmp	r3, #36	; 0x24
 8002a2e:	d01b      	beq.n	8002a68 <process_cmds+0x98>
				cmd[i] = Command_Buff->buff[Command_Buff->read_pos];
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	88d2      	ldrh	r2, [r2, #6]
 8002a38:	441a      	add	r2, r3
 8002a3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a3e:	7812      	ldrb	r2, [r2, #0]
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	3328      	adds	r3, #40	; 0x28
 8002a44:	443b      	add	r3, r7
 8002a46:	f803 2c10 	strb.w	r2, [r3, #-16]
				if(Command_Buff->read_pos == CMD_BUFF_LEN-1){
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	88db      	ldrh	r3, [r3, #6]
 8002a4e:	2b13      	cmp	r3, #19
 8002a50:	d103      	bne.n	8002a5a <process_cmds+0x8a>
					Command_Buff->read_pos = 0;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	80da      	strh	r2, [r3, #6]
 8002a58:	e01c      	b.n	8002a94 <process_cmds+0xc4>
				}
				else{
					Command_Buff->read_pos+=1;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	88db      	ldrh	r3, [r3, #6]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	80da      	strh	r2, [r3, #6]
 8002a66:	e015      	b.n	8002a94 <process_cmds+0xc4>
				}
			}
			else{
				cmd[i] = '$';
 8002a68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a6c:	3328      	adds	r3, #40	; 0x28
 8002a6e:	443b      	add	r3, r7
 8002a70:	2224      	movs	r2, #36	; 0x24
 8002a72:	f803 2c10 	strb.w	r2, [r3, #-16]
				if(Command_Buff->read_pos == CMD_BUFF_LEN-1){
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	88db      	ldrh	r3, [r3, #6]
 8002a7a:	2b13      	cmp	r3, #19
 8002a7c:	d103      	bne.n	8002a86 <process_cmds+0xb6>
					Command_Buff->read_pos = 0;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	80da      	strh	r2, [r3, #6]
				}
				else{
					Command_Buff->read_pos+=1;
				}
				break;
 8002a84:	e00f      	b.n	8002aa6 <process_cmds+0xd6>
					Command_Buff->read_pos+=1;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	88db      	ldrh	r3, [r3, #6]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	80da      	strh	r2, [r3, #6]
				break;
 8002a92:	e008      	b.n	8002aa6 <process_cmds+0xd6>
		for(uint8_t i = 0; i<CMD_MAX_LEN; i++){
 8002a94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002a9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002aa2:	2b09      	cmp	r3, #9
 8002aa4:	d9b6      	bls.n	8002a14 <process_cmds+0x44>
			}
		}

		if(Command_Buff->read_pos == Command_Buff->curr_pos){
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	88da      	ldrh	r2, [r3, #6]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	889b      	ldrh	r3, [r3, #4]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d102      	bne.n	8002aba <process_cmds+0xea>
			cmd_buff.catch_up = 1;
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <process_cmds+0x17c>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	729a      	strb	r2, [r3, #10]
		}

		if(Command_Buff->buffer_full == 1){
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	7a1b      	ldrb	r3, [r3, #8]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d102      	bne.n	8002aca <process_cmds+0xfa>
			Command_Buff->buffer_full = 0;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	721a      	strb	r2, [r3, #8]
		}

		uint8_t new_line = '\n';
 8002aca:	230a      	movs	r3, #10
 8002acc:	75fb      	strb	r3, [r7, #23]
		HAL_UART_Transmit(&huart5, cmd, cmd_len, HAL_MAX_DELAY);
 8002ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	f107 0118 	add.w	r1, r7, #24
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002adc:	481c      	ldr	r0, [pc, #112]	; (8002b50 <process_cmds+0x180>)
 8002ade:	f007 f82d 	bl	8009b3c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, &new_line, 1, HAL_MAX_DELAY);
 8002ae2:	f107 0117 	add.w	r1, r7, #23
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aea:	2201      	movs	r2, #1
 8002aec:	4818      	ldr	r0, [pc, #96]	; (8002b50 <process_cmds+0x180>)
 8002aee:	f007 f825 	bl	8009b3c <HAL_UART_Transmit>


		uint8_t a = cmd[0];
 8002af2:	7e3b      	ldrb	r3, [r7, #24]
 8002af4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		switch (a){
 8002af8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002afc:	2b4f      	cmp	r3, #79	; 0x4f
 8002afe:	d012      	beq.n	8002b26 <process_cmds+0x156>
 8002b00:	2b4f      	cmp	r3, #79	; 0x4f
 8002b02:	dc16      	bgt.n	8002b32 <process_cmds+0x162>
 8002b04:	2b41      	cmp	r3, #65	; 0x41
 8002b06:	d008      	beq.n	8002b1a <process_cmds+0x14a>
 8002b08:	2b4d      	cmp	r3, #77	; 0x4d
 8002b0a:	d112      	bne.n	8002b32 <process_cmds+0x162>
		case 'M':
			process_motor_command(cmd, motors);
 8002b0c:	f107 0318 	add.w	r3, r7, #24
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fe10 	bl	8002738 <process_motor_command>
			break;
 8002b18:	e00d      	b.n	8002b36 <process_cmds+0x166>

		case 'A':
			process_accelerometer_command(cmd);
 8002b1a:	f107 0318 	add.w	r3, r7, #24
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fe7c 	bl	800281c <process_accelerometer_command>
			break;
 8002b24:	e007      	b.n	8002b36 <process_cmds+0x166>

		case 'O':
			system_state->orientation = cmd[2]-'0';
 8002b26:	7ebb      	ldrb	r3, [r7, #26]
 8002b28:	3b30      	subs	r3, #48	; 0x30
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	701a      	strb	r2, [r3, #0]
			break;
 8002b30:	e001      	b.n	8002b36 <process_cmds+0x166>

		default:
			return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e006      	b.n	8002b44 <process_cmds+0x174>
	while(Command_Buff->catch_up != 1){
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	7a9b      	ldrb	r3, [r3, #10]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	f47f af62 	bne.w	8002a06 <process_cmds+0x36>
		}
	}

	return HAL_OK;
 8002b42:	2300      	movs	r3, #0

}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3728      	adds	r7, #40	; 0x28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000524 	.word	0x20000524

08002b54 <putchar_>:



void putchar_(char c) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
    // Transmit the string
    if (HAL_UART_Transmit(&huart5, (uint8_t*)&c, 1, HAL_MAX_DELAY)!= HAL_OK)
 8002b5e:	1df9      	adds	r1, r7, #7
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b64:	2201      	movs	r2, #1
 8002b66:	4806      	ldr	r0, [pc, #24]	; (8002b80 <putchar_+0x2c>)
 8002b68:	f006 ffe8 	bl	8009b3c <HAL_UART_Transmit>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <putchar_+0x22>
    {
    	Error_Handler();
 8002b72:	f000 f9cb 	bl	8002f0c <Error_Handler>
    }
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000524 	.word	0x20000524

08002b84 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

	save_cmd(huart);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff fe77 	bl	8002880 <save_cmd>
    HAL_UART_Receive_DMA(huart, rx_buff, 10);
 8002b92:	220a      	movs	r2, #10
 8002b94:	4903      	ldr	r1, [pc, #12]	; (8002ba4 <HAL_UART_RxCpltCallback+0x20>)
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f007 f85b 	bl	8009c52 <HAL_UART_Receive_DMA>

}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	200002f4 	.word	0x200002f4

08002ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b0c4      	sub	sp, #272	; 0x110
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bae:	f003 f96d 	bl	8005e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bb2:	f000 f91f 	bl	8002df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bb6:	f7fe fd69 	bl	800168c <MX_GPIO_Init>
  MX_DMA_Init();
 8002bba:	f7fe fc5d 	bl	8001478 <MX_DMA_Init>
  MX_CRC_Init();
 8002bbe:	f7fe fc25 	bl	800140c <MX_CRC_Init>
  MX_FMC_Init();
 8002bc2:	f7fe fc79 	bl	80014b8 <MX_FMC_Init>
  MX_I2C3_Init();
 8002bc6:	f7fe ff35 	bl	8001a34 <MX_I2C3_Init>
  MX_SPI5_Init();
 8002bca:	f002 faf9 	bl	80051c0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8002bce:	f002 fd37 	bl	8005640 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002bd2:	f003 f835 	bl	8005c40 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8002bd6:	f7fe fb67 	bl	80012a8 <MX_ADC3_Init>
  MX_TIM2_Init();
 8002bda:	f002 fd81 	bl	80056e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002bde:	f002 fde3 	bl	80057a8 <MX_TIM3_Init>
  MX_TIM9_Init();
 8002be2:	f002 fe45 	bl	8005870 <MX_TIM9_Init>
  MX_TIM10_Init();
 8002be6:	f002 fe93 	bl	8005910 <MX_TIM10_Init>
  MX_UART5_Init();
 8002bea:	f002 ffff 	bl	8005bec <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Init(&htim9);

  HAL_UART_Receive_DMA(&huart5, rx_buff, 10);
 8002bee:	220a      	movs	r2, #10
 8002bf0:	4977      	ldr	r1, [pc, #476]	; (8002dd0 <main+0x228>)
 8002bf2:	4878      	ldr	r0, [pc, #480]	; (8002dd4 <main+0x22c>)
 8002bf4:	f007 f82d 	bl	8009c52 <HAL_UART_Receive_DMA>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4877      	ldr	r0, [pc, #476]	; (8002dd8 <main+0x230>)
 8002bfc:	f006 f838 	bl	8008c70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002c00:	2104      	movs	r1, #4
 8002c02:	4875      	ldr	r0, [pc, #468]	; (8002dd8 <main+0x230>)
 8002c04:	f006 f834 	bl	8008c70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4874      	ldr	r0, [pc, #464]	; (8002ddc <main+0x234>)
 8002c0c:	f006 f830 	bl	8008c70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002c10:	2108      	movs	r1, #8
 8002c12:	4872      	ldr	r0, [pc, #456]	; (8002ddc <main+0x234>)
 8002c14:	f006 f82c 	bl	8008c70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4871      	ldr	r0, [pc, #452]	; (8002de0 <main+0x238>)
 8002c1c:	f006 f828 	bl	8008c70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8002c20:	2104      	movs	r1, #4
 8002c22:	486f      	ldr	r0, [pc, #444]	; (8002de0 <main+0x238>)
 8002c24:	f006 f824 	bl	8008c70 <HAL_TIM_PWM_Start>
//  char buf[4];

//  MPU6050_init();
//  MPU6050_Initialization();

  MotorTypedef motors[NUM_OF_MOTORS] = {
 8002c28:	f107 0320 	add.w	r3, r7, #32
 8002c2c:	22f0      	movs	r2, #240	; 0xf0
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f008 fdcf 	bl	800b7d4 <memset>
  		  {&(htim2.Instance->CCR1), 0.0, MOTOR_MIN_DC, MOTOR_MAX_DC},
 8002c36:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <main+0x230>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3334      	adds	r3, #52	; 0x34
  MotorTypedef motors[NUM_OF_MOTORS] = {
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	a356      	add	r3, pc, #344	; (adr r3, 8002d98 <main+0x1f0>)
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8002c48:	a355      	add	r3, pc, #340	; (adr r3, 8002da0 <main+0x1f8>)
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  		  {&(htim2.Instance->CCR2), 0.0, MOTOR_MIN_DC, MOTOR_MAX_DC},
 8002c52:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <main+0x230>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3338      	adds	r3, #56	; 0x38
  MotorTypedef motors[NUM_OF_MOTORS] = {
 8002c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c5a:	a34f      	add	r3, pc, #316	; (adr r3, 8002d98 <main+0x1f0>)
 8002c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c60:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002c64:	a34e      	add	r3, pc, #312	; (adr r3, 8002da0 <main+0x1f8>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  		  {&(htim3.Instance->CCR1), 0.0, MOTOR_MIN_DC, MOTOR_MAX_DC},
 8002c6e:	4b5b      	ldr	r3, [pc, #364]	; (8002ddc <main+0x234>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3334      	adds	r3, #52	; 0x34
  MotorTypedef motors[NUM_OF_MOTORS] = {
 8002c74:	673b      	str	r3, [r7, #112]	; 0x70
 8002c76:	a348      	add	r3, pc, #288	; (adr r3, 8002d98 <main+0x1f0>)
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8002c80:	a347      	add	r3, pc, #284	; (adr r3, 8002da0 <main+0x1f8>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  		  {&(htim3.Instance->CCR3), 0.0, MOTOR_MIN_DC, MOTOR_MAX_DC},
 8002c8a:	4b54      	ldr	r3, [pc, #336]	; (8002ddc <main+0x234>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	333c      	adds	r3, #60	; 0x3c
  MotorTypedef motors[NUM_OF_MOTORS] = {
 8002c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c94:	a340      	add	r3, pc, #256	; (adr r3, 8002d98 <main+0x1f0>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8002c9e:	a340      	add	r3, pc, #256	; (adr r3, 8002da0 <main+0x1f8>)
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  		  {&(htim9.Instance->CCR1), 0.0, MOTOR_MIN_DC, MOTOR_MAX_DC},
 8002ca8:	4b4d      	ldr	r3, [pc, #308]	; (8002de0 <main+0x238>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3334      	adds	r3, #52	; 0x34
  MotorTypedef motors[NUM_OF_MOTORS] = {
 8002cae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cb2:	a339      	add	r3, pc, #228	; (adr r3, 8002d98 <main+0x1f0>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
 8002cbc:	a338      	add	r3, pc, #224	; (adr r3, 8002da0 <main+0x1f8>)
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  		  {&(htim9.Instance->CCR2), 0.0, MOTOR_MIN_DC, MOTOR_MAX_DC}
 8002cc6:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <main+0x238>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3338      	adds	r3, #56	; 0x38
  MotorTypedef motors[NUM_OF_MOTORS] = {
 8002ccc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cd0:	a331      	add	r3, pc, #196	; (adr r3, 8002d98 <main+0x1f0>)
 8002cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd6:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
 8002cda:	a331      	add	r3, pc, #196	; (adr r3, 8002da0 <main+0x1f8>)
 8002cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce0:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
  };



  // Setting the arm to default position
  set_duty_cycle(&motors[BASE_MOTOR_NUM], ((90 + BASE_MOTOR_OFFSET)*M_PI)/180);
 8002ce4:	f107 0320 	add.w	r3, r7, #32
 8002ce8:	3378      	adds	r3, #120	; 0x78
 8002cea:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8002da8 <main+0x200>
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fcc6 	bl	8002680 <set_duty_cycle>
  set_duty_cycle(&motors[SHOULDER_MOTOR_NUM], ((91 +SHOULDER_MOTOR_OFFSET)*M_PI)/180);
 8002cf4:	f107 0320 	add.w	r3, r7, #32
 8002cf8:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 8002db0 <main+0x208>
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fcbf 	bl	8002680 <set_duty_cycle>
  set_duty_cycle(&motors[ELBOW_MOTOR_NUM], ((99 + ELBOW_MOTOR_OFFSET)*M_PI)/180);
 8002d02:	f107 0320 	add.w	r3, r7, #32
 8002d06:	3328      	adds	r3, #40	; 0x28
 8002d08:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8002db8 <main+0x210>
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fcb7 	bl	8002680 <set_duty_cycle>
  set_duty_cycle(&motors[WRIST_MOTOR_NUM], ((78 + WRIST_MOTOR_OFFSET)*M_PI)/180);
 8002d12:	f107 0320 	add.w	r3, r7, #32
 8002d16:	3350      	adds	r3, #80	; 0x50
 8002d18:	ed9f 0b29 	vldr	d0, [pc, #164]	; 8002dc0 <main+0x218>
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fcaf 	bl	8002680 <set_duty_cycle>

//  SensorsStateDefType sensors;
  SystemStateDefType system_state;
  system_state.orientation = ORIENTATAION_NEUTRAL;
 8002d22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d26:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
  system_state.eef_curr_pos[0] = 0.1;
 8002d2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d32:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8002d36:	a324      	add	r3, pc, #144	; (adr r3, 8002dc8 <main+0x220>)
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  system_state.eef_curr_pos[1] = 14;
 8002d40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d44:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <main+0x23c>)
 8002d4e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  system_state.eef_curr_pos[2] = 4;
 8002d52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d56:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <main+0x240>)
 8002d60:	e9c1 2306 	strd	r2, r3, [r1, #24]
  /* USER CODE BEGIN WHILE */

  while (1)
  {

    process_cmds(&cmd_buff, motors, &system_state);
 8002d64:	463a      	mov	r2, r7
 8002d66:	f107 0320 	add.w	r3, r7, #32
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	481f      	ldr	r0, [pc, #124]	; (8002dec <main+0x244>)
 8002d6e:	f7ff fe2f 	bl	80029d0 <process_cmds>
    move_arm(motors, &system_state);
 8002d72:	463a      	mov	r2, r7
 8002d74:	f107 0320 	add.w	r3, r7, #32
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fb3c 	bl	80023f8 <move_arm>
    printf_("Orientation - %d\n",system_state.orientation);
 8002d80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4818      	ldr	r0, [pc, #96]	; (8002df0 <main+0x248>)
 8002d8e:	f002 fa03 	bl	8005198 <printf_>
    process_cmds(&cmd_buff, motors, &system_state);
 8002d92:	e7e7      	b.n	8002d64 <main+0x1bc>
 8002d94:	f3af 8000 	nop.w
 8002d98:	8f5c28f6 	.word	0x8f5c28f6
 8002d9c:	4014f5c2 	.word	0x4014f5c2
 8002da0:	5c28f5c3 	.word	0x5c28f5c3
 8002da4:	4038c28f 	.word	0x4038c28f
 8002da8:	65708efc 	.word	0x65708efc
 8002dac:	3ff69e95 	.word	0x3ff69e95
 8002db0:	fcd8d466 	.word	0xfcd8d466
 8002db4:	3ffd99cc 	.word	0x3ffd99cc
 8002db8:	4317cb35 	.word	0x4317cb35
 8002dbc:	3ffba561 	.word	0x3ffba561
 8002dc0:	9a8323e6 	.word	0x9a8323e6
 8002dc4:	3ff72d8f 	.word	0x3ff72d8f
 8002dc8:	9999999a 	.word	0x9999999a
 8002dcc:	3fb99999 	.word	0x3fb99999
 8002dd0:	200002f4 	.word	0x200002f4
 8002dd4:	20000524 	.word	0x20000524
 8002dd8:	20000404 	.word	0x20000404
 8002ddc:	2000044c 	.word	0x2000044c
 8002de0:	20000494 	.word	0x20000494
 8002de4:	402c0000 	.word	0x402c0000
 8002de8:	40100000 	.word	0x40100000
 8002dec:	20000000 	.word	0x20000000
 8002df0:	0800e3bc 	.word	0x0800e3bc

08002df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b094      	sub	sp, #80	; 0x50
 8002df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dfa:	f107 0320 	add.w	r3, r7, #32
 8002dfe:	2230      	movs	r2, #48	; 0x30
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f008 fce6 	bl	800b7d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e08:	f107 030c 	add.w	r3, r7, #12
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <SystemClock_Config+0xcc>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	4a27      	ldr	r2, [pc, #156]	; (8002ec0 <SystemClock_Config+0xcc>)
 8002e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e26:	6413      	str	r3, [r2, #64]	; 0x40
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <SystemClock_Config+0xcc>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002e34:	2300      	movs	r3, #0
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	4b22      	ldr	r3, [pc, #136]	; (8002ec4 <SystemClock_Config+0xd0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e40:	4a20      	ldr	r2, [pc, #128]	; (8002ec4 <SystemClock_Config+0xd0>)
 8002e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <SystemClock_Config+0xd0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e54:	2301      	movs	r3, #1
 8002e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002e68:	2304      	movs	r3, #4
 8002e6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002e6c:	2348      	movs	r3, #72	; 0x48
 8002e6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e70:	2302      	movs	r3, #2
 8002e72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002e74:	2303      	movs	r3, #3
 8002e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e78:	f107 0320 	add.w	r3, r7, #32
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f005 f861 	bl	8007f44 <HAL_RCC_OscConfig>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002e88:	f000 f840 	bl	8002f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e8c:	230f      	movs	r3, #15
 8002e8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e90:	2302      	movs	r3, #2
 8002e92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ea2:	f107 030c 	add.w	r3, r7, #12
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f005 fac3 	bl	8008434 <HAL_RCC_ClockConfig>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002eb4:	f000 f82a 	bl	8002f0c <Error_Handler>
  }
}
 8002eb8:	bf00      	nop
 8002eba:	3750      	adds	r7, #80	; 0x50
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40007000 	.word	0x40007000

08002ec8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	80fb      	strh	r3, [r7, #6]
	EXTI4_FLAG = 1;
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	20000314 	.word	0x20000314

08002ee8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002efa:	f002 ffe9 	bl	8005ed0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40001000 	.word	0x40001000

08002f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f10:	b672      	cpsid	i
}
 8002f12:	bf00      	nop

//  switch(err_type):
//				  case 0:
//					  printf_("")
//
  while (1)
 8002f14:	e7fe      	b.n	8002f14 <Error_Handler+0x8>

08002f16 <get_bit_access>:
// but:
// 1. Some compilers are finicky about this;
// 2. Some people may want to convert this to C89;
// 3. If you try to use it as C++, only C++20 supports compound literals
static inline double_with_bit_access get_bit_access(double x)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b087      	sub	sp, #28
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	e9c7 2300 	strd	r2, r3, [r7]
  double_with_bit_access dwba;
  dwba.F = x;
 8002f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f26:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return dwba;
 8002f2a:	68f9      	ldr	r1, [r7, #12]
 8002f2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f30:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <get_sign_bit>:

static inline int get_sign_bit(double x)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	e9c7 0100 	strd	r0, r1, [r7]
  // The sign is stored in the highest bit
  return (int) (get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1));
 8002f4a:	f107 0108 	add.w	r1, r7, #8
 8002f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f52:	4608      	mov	r0, r1
 8002f54:	f7ff ffdf 	bl	8002f16 <get_bit_access>
 8002f58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	0fca      	lsrs	r2, r1, #31
 8002f66:	2300      	movs	r3, #0
 8002f68:	4613      	mov	r3, r2
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <get_exp2>:

static inline int get_exp2(double_with_bit_access x)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	e9c7 0100 	strd	r0, r1, [r7]
  // The exponent in an IEEE-754 floating-point number occupies a contiguous
  // sequence of bits (e.g. 52..62 for 64-bit doubles), but with a non-trivial representation: An
  // unsigned offset from some negative value (with the extremal offset values reserved for
  // special use).
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 8002f7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	0d0a      	lsrs	r2, r1, #20
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f92:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <putchar_via_gadget>:
// Note: This function currently assumes it is not passed a '\0' c,
// or alternatively, that '\0' can be passed to the function in the output
// gadget. The former assumption holds within the printf library. It also
// assumes that the output gadget has been properly initialized.
static inline void putchar_via_gadget(output_gadget_t* gadget, char c)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	70fb      	strb	r3, [r7, #3]
  printf_size_t write_pos = gadget->pos++;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	1c59      	adds	r1, r3, #1
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	60d1      	str	r1, [r2, #12]
 8002fb8:	60fb      	str	r3, [r7, #12]
    // We're _always_ increasing pos, so as to count how may characters
    // _would_ have been written if not for the max_chars limitation
  if (write_pos >= gadget->max_chars) {
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d212      	bcs.n	8002fea <putchar_via_gadget+0x48>
    return;
  }
  if (gadget->function != NULL) {
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <putchar_via_gadget+0x3a>
    // No check for c == '\0' .
    gadget->function(c, gadget->extra_function_arg);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6851      	ldr	r1, [r2, #4]
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4798      	blx	r3
 8002fda:	e007      	b.n	8002fec <putchar_via_gadget+0x4a>
  }
  else {
    // it must be the case that gadget->buffer != NULL , due to the constraint
    // on output_gadget_t ; and note we're relying on write_pos being non-negative.
    gadget->buffer[write_pos] = c;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	e000      	b.n	8002fec <putchar_via_gadget+0x4a>
    return;
 8002fea:	bf00      	nop
  }
}
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <append_termination_with_gadget>:


// Possibly-write the string-terminating '\0' character
static inline void append_termination_with_gadget(output_gadget_t* gadget)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  if (gadget->function != NULL || gadget->max_chars == 0) {
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d11b      	bne.n	800303a <append_termination_with_gadget+0x48>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d017      	beq.n	800303a <append_termination_with_gadget+0x48>
    return;
  }
  if (gadget->buffer == NULL) {
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d015      	beq.n	800303e <append_termination_with_gadget+0x4c>
    return;
  }
  printf_size_t null_char_pos = gadget->pos < gadget->max_chars ? gadget->pos : gadget->max_chars - 1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	429a      	cmp	r2, r3
 800301c:	d202      	bcs.n	8003024 <append_termination_with_gadget+0x32>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	e002      	b.n	800302a <append_termination_with_gadget+0x38>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	3b01      	subs	r3, #1
 800302a:	60fb      	str	r3, [r7, #12]
  gadget->buffer[null_char_pos] = '\0';
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e002      	b.n	8003040 <append_termination_with_gadget+0x4e>
    return;
 800303a:	bf00      	nop
 800303c:	e000      	b.n	8003040 <append_termination_with_gadget+0x4e>
    return;
 800303e:	bf00      	nop
}
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <putchar_wrapper>:

// We can't use putchar_ as is, since our output gadget
// only takes pointers to functions with an extra argument
static inline void putchar_wrapper(char c, void* unused)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	6039      	str	r1, [r7, #0]
 8003054:	71fb      	strb	r3, [r7, #7]
  (void) unused;
  putchar_(c);
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fd7b 	bl	8002b54 <putchar_>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <discarding_gadget>:

static inline output_gadget_t discarding_gadget(void)
{
 8003066:	b4b0      	push	{r4, r5, r7}
 8003068:	b089      	sub	sp, #36	; 0x24
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  output_gadget_t gadget;
  gadget.function = NULL;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
  gadget.extra_function_arg = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
  gadget.buffer = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
  gadget.pos = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
  gadget.max_chars = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
  return gadget;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	461d      	mov	r5, r3
 8003086:	f107 040c 	add.w	r4, r7, #12
 800308a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	602b      	str	r3, [r5, #0]
}
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	3724      	adds	r7, #36	; 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	bcb0      	pop	{r4, r5, r7}
 800309a:	4770      	bx	lr

0800309c <function_gadget>:
  }
  return result;
}

static inline output_gadget_t function_gadget(void (*function)(char, void*), void* extra_arg)
{
 800309c:	b5b0      	push	{r4, r5, r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  output_gadget_t result = discarding_gadget();
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ffda 	bl	8003066 <discarding_gadget>
  result.function = function;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	617b      	str	r3, [r7, #20]
  result.extra_function_arg = extra_arg;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	61bb      	str	r3, [r7, #24]
  result.max_chars = PRINTF_MAX_POSSIBLE_BUFFER_SIZE;
 80030ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	461d      	mov	r5, r3
 80030c4:	f107 0414 	add.w	r4, r7, #20
 80030c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	602b      	str	r3, [r5, #0]
}
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	3728      	adds	r7, #40	; 0x28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bdb0      	pop	{r4, r5, r7, pc}

080030d8 <extern_putchar_gadget>:

static inline output_gadget_t extern_putchar_gadget(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  return function_gadget(putchar_wrapper, NULL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	4903      	ldr	r1, [pc, #12]	; (80030f4 <extern_putchar_gadget+0x1c>)
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff ffd8 	bl	800309c <function_gadget>
}
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	0800304b 	.word	0x0800304b

080030f8 <strnlen_s_>:
// internal secure strlen
// @return The length of the string (excluding the terminating 0) limited by 'maxsize'
// @note strlen uses size_t, but wes only use this function with printf_size_t
// variables - hence the signature.
static inline printf_size_t strnlen_s_(const char* str, printf_size_t maxsize)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	e002      	b.n	800310e <strnlen_s_+0x16>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3301      	adds	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d004      	beq.n	8003120 <strnlen_s_+0x28>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	1e5a      	subs	r2, r3, #1
 800311a:	603a      	str	r2, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f3      	bne.n	8003108 <strnlen_s_+0x10>
  return (printf_size_t)(s - str);
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	1ad3      	subs	r3, r2, r3
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <is_digit_>:


// internal test if char is a digit (0-9)
// @return true if char is a digit
static inline bool is_digit_(char ch)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	2b2f      	cmp	r3, #47	; 0x2f
 8003140:	d904      	bls.n	800314c <is_digit_+0x1a>
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	2b39      	cmp	r3, #57	; 0x39
 8003146:	d801      	bhi.n	800314c <is_digit_+0x1a>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <is_digit_+0x1c>
 800314c:	2300      	movs	r3, #0
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	b2db      	uxtb	r3, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <atou_>:


// internal ASCII string to printf_size_t conversion
static printf_size_t atou_(const char** str)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  printf_size_t i = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 800316c:	e00e      	b.n	800318c <atou_+0x2c>
    i = i * 10U + (printf_size_t)(*((*str)++) - '0');
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4618      	mov	r0, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	1c59      	adds	r1, r3, #1
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6011      	str	r1, [r2, #0]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	4403      	add	r3, r0
 8003188:	3b30      	subs	r3, #48	; 0x30
 800318a:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ffcd 	bl	8003132 <is_digit_>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e7      	bne.n	800316e <atou_+0xe>
  }
  return i;
 800319e:	68fb      	ldr	r3, [r7, #12]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <out_rev_>:


// output the specified string in reverse, taking care of any zero-padding
static void out_rev_(output_gadget_t* output, const char* buf, printf_size_t len, printf_size_t width, printf_flags_t flags)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  const printf_size_t start_pos = output->pos;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d11e      	bne.n	8003204 <out_rev_+0x5c>
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d119      	bne.n	8003204 <out_rev_+0x5c>
    for (printf_size_t i = len; i < width; i++) {
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	e006      	b.n	80031e4 <out_rev_+0x3c>
      putchar_via_gadget(output, ' ');
 80031d6:	2120      	movs	r1, #32
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7ff fee2 	bl	8002fa2 <putchar_via_gadget>
    for (printf_size_t i = len; i < width; i++) {
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3301      	adds	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d3f4      	bcc.n	80031d6 <out_rev_+0x2e>
    }
  }

  // reverse string
  while (len) {
 80031ec:	e00a      	b.n	8003204 <out_rev_+0x5c>
    putchar_via_gadget(output, buf[--len]);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	607b      	str	r3, [r7, #4]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff fecf 	bl	8002fa2 <putchar_via_gadget>
  while (len) {
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f1      	bne.n	80031ee <out_rev_+0x46>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00b      	beq.n	800322c <out_rev_+0x84>
    while (output->pos - start_pos < width) {
 8003214:	e003      	b.n	800321e <out_rev_+0x76>
      putchar_via_gadget(output, ' ');
 8003216:	2120      	movs	r1, #32
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7ff fec2 	bl	8002fa2 <putchar_via_gadget>
    while (output->pos - start_pos < width) {
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d8f4      	bhi.n	8003216 <out_rev_+0x6e>
    }
  }
}
 800322c:	bf00      	nop
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <print_integer_finalization>:


// Invoked by print_integer after the actual number has been printed, performing necessary
// work on the number's prefix (as the number is initially printed in reverse order)
static void print_integer_finalization(output_gadget_t* output, char* buf, printf_size_t len, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af02      	add	r7, sp, #8
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	70fb      	strb	r3, [r7, #3]
  printf_size_t unpadded_len = len;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	617b      	str	r3, [r7, #20]

  // pad with leading zeros
  {
    if (!(flags & FLAGS_LEFT)) {
 8003246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d12e      	bne.n	80032ae <print_integer_finalization+0x7a>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	2b00      	cmp	r3, #0
 8003254:	d017      	beq.n	8003286 <print_integer_finalization+0x52>
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d012      	beq.n	8003286 <print_integer_finalization+0x52>
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d104      	bne.n	8003270 <print_integer_finalization+0x3c>
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <print_integer_finalization+0x52>
        width--;
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	3b01      	subs	r3, #1
 8003274:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003276:	e006      	b.n	8003286 <print_integer_finalization+0x52>
        buf[len++] = '0';
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4413      	add	r3, r2
 8003282:	2230      	movs	r2, #48	; 0x30
 8003284:	701a      	strb	r2, [r3, #0]
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00e      	beq.n	80032ae <print_integer_finalization+0x7a>
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	429a      	cmp	r2, r3
 8003296:	d20a      	bcs.n	80032ae <print_integer_finalization+0x7a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b1f      	cmp	r3, #31
 800329c:	d9ec      	bls.n	8003278 <print_integer_finalization+0x44>
      }
    }

    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800329e:	e006      	b.n	80032ae <print_integer_finalization+0x7a>
      buf[len++] = '0';
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	4413      	add	r3, r2
 80032aa:	2230      	movs	r2, #48	; 0x30
 80032ac:	701a      	strb	r2, [r3, #0]
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d202      	bcs.n	80032bc <print_integer_finalization+0x88>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b1f      	cmp	r3, #31
 80032ba:	d9f1      	bls.n	80032a0 <print_integer_finalization+0x6c>
    }

    if (base == BASE_OCTAL && (len > unpadded_len)) {
 80032bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d107      	bne.n	80032d4 <print_integer_finalization+0xa0>
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d903      	bls.n	80032d4 <print_integer_finalization+0xa0>
      // Since we've written some zeros, we've satisfied the alternative format leading space requirement
      flags &= ~FLAGS_HASH;
 80032cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ce:	f023 0310 	bic.w	r3, r3, #16
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }

  // handle hash
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 80032d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d6:	f242 0310 	movw	r3, #8208	; 0x2010
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d068      	beq.n	80033b2 <print_integer_finalization+0x17e>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d123      	bne.n	8003332 <print_integer_finalization+0xfe>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d020      	beq.n	8003332 <print_integer_finalization+0xfe>
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d003      	beq.n	8003300 <print_integer_finalization+0xcc>
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d118      	bne.n	8003332 <print_integer_finalization+0xfe>
      // Let's take back some padding digits to fit in what will eventually
      // be the format-specific prefix
      if (unpadded_len < len) {
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	429a      	cmp	r2, r3
 8003306:	d202      	bcs.n	800330e <print_integer_finalization+0xda>
        len--; // This should suffice for BASE_OCTAL
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3b01      	subs	r3, #1
 800330c:	607b      	str	r3, [r7, #4]
      }
      if (len && (base == BASE_HEX || base == BASE_BINARY) && (unpadded_len < len)) {
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00e      	beq.n	8003332 <print_integer_finalization+0xfe>
 8003314:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003318:	2b10      	cmp	r3, #16
 800331a:	d003      	beq.n	8003324 <print_integer_finalization+0xf0>
 800331c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d106      	bne.n	8003332 <print_integer_finalization+0xfe>
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d202      	bcs.n	8003332 <print_integer_finalization+0xfe>
        len--; // ... and an extra one for 0x or 0b
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	607b      	str	r3, [r7, #4]
      }
    }
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003332:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003336:	2b10      	cmp	r3, #16
 8003338:	d10f      	bne.n	800335a <print_integer_finalization+0x126>
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <print_integer_finalization+0x126>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b1f      	cmp	r3, #31
 8003348:	d807      	bhi.n	800335a <print_integer_finalization+0x126>
      buf[len++] = 'x';
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	4413      	add	r3, r2
 8003354:	2278      	movs	r2, #120	; 0x78
 8003356:	701a      	strb	r2, [r3, #0]
 8003358:	e021      	b.n	800339e <print_integer_finalization+0x16a>
    }
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800335a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800335e:	2b10      	cmp	r3, #16
 8003360:	d10f      	bne.n	8003382 <print_integer_finalization+0x14e>
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <print_integer_finalization+0x14e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b1f      	cmp	r3, #31
 8003370:	d807      	bhi.n	8003382 <print_integer_finalization+0x14e>
      buf[len++] = 'X';
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	4413      	add	r3, r2
 800337c:	2258      	movs	r2, #88	; 0x58
 800337e:	701a      	strb	r2, [r3, #0]
 8003380:	e00d      	b.n	800339e <print_integer_finalization+0x16a>
    }
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003382:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d109      	bne.n	800339e <print_integer_finalization+0x16a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b1f      	cmp	r3, #31
 800338e:	d806      	bhi.n	800339e <print_integer_finalization+0x16a>
      buf[len++] = 'b';
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	4413      	add	r3, r2
 800339a:	2262      	movs	r2, #98	; 0x62
 800339c:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b1f      	cmp	r3, #31
 80033a2:	d806      	bhi.n	80033b2 <print_integer_finalization+0x17e>
      buf[len++] = '0';
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	4413      	add	r3, r2
 80033ae:	2230      	movs	r2, #48	; 0x30
 80033b0:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b1f      	cmp	r3, #31
 80033b6:	d823      	bhi.n	8003400 <print_integer_finalization+0x1cc>
    if (negative) {
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <print_integer_finalization+0x19a>
      buf[len++] = '-';
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	4413      	add	r3, r2
 80033c8:	222d      	movs	r2, #45	; 0x2d
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	e018      	b.n	8003400 <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_PLUS) {
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <print_integer_finalization+0x1b4>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	4413      	add	r3, r2
 80033e2:	222b      	movs	r2, #43	; 0x2b
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	e00b      	b.n	8003400 <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_SPACE) {
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <print_integer_finalization+0x1cc>
      buf[len++] = ' ';
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	4413      	add	r3, r2
 80033fc:	2220      	movs	r2, #32
 80033fe:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f7ff fecc 	bl	80031a8 <out_rev_>
}
 8003410:	bf00      	nop
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <print_integer>:

// An internal itoa-like function
static void print_integer(output_gadget_t* output, printf_unsigned_value_t value, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 8003418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800341c:	b092      	sub	sp, #72	; 0x48
 800341e:	af04      	add	r7, sp, #16
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	e9c7 2300 	strd	r2, r3, [r7]
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  printf_size_t len = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	637b      	str	r3, [r7, #52]	; 0x34

  if (!value) {
 800342a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800342e:	4313      	orrs	r3, r2
 8003430:	d11a      	bne.n	8003468 <print_integer+0x50>
    if ( !(flags & FLAGS_PRECISION) ) {
 8003432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10c      	bne.n	8003456 <print_integer+0x3e>
      buf[len++] = '0';
 800343c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	637a      	str	r2, [r7, #52]	; 0x34
 8003442:	3338      	adds	r3, #56	; 0x38
 8003444:	443b      	add	r3, r7
 8003446:	2230      	movs	r2, #48	; 0x30
 8003448:	f803 2c28 	strb.w	r2, [r3, #-40]
      flags &= ~FLAGS_HASH;
 800344c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800344e:	f023 0310 	bic.w	r3, r3, #16
 8003452:	663b      	str	r3, [r7, #96]	; 0x60
 8003454:	e04a      	b.n	80034ec <print_integer+0xd4>
      // We drop this flag this since either the alternative and regular modes of the specifier
      // don't differ on 0 values, or (in the case of octal) we've already provided the special
      // handling for this mode.
    }
    else if (base == BASE_HEX) {
 8003456:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800345a:	2b10      	cmp	r3, #16
 800345c:	d146      	bne.n	80034ec <print_integer+0xd4>
      flags &= ~FLAGS_HASH;
 800345e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003460:	f023 0310 	bic.w	r3, r3, #16
 8003464:	663b      	str	r3, [r7, #96]	; 0x60
 8003466:	e041      	b.n	80034ec <print_integer+0xd4>
      // don't differ on 0 values
    }
  }
  else {
    do {
      const char digit = (char)(value % base);
 8003468:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800346c:	2200      	movs	r2, #0
 800346e:	461c      	mov	r4, r3
 8003470:	4615      	mov	r5, r2
 8003472:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003476:	4622      	mov	r2, r4
 8003478:	462b      	mov	r3, r5
 800347a:	f7fd fc5d 	bl	8000d38 <__aeabi_uldivmod>
 800347e:	4613      	mov	r3, r2
 8003480:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8003484:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003488:	2b09      	cmp	r3, #9
 800348a:	d804      	bhi.n	8003496 <print_integer+0x7e>
 800348c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003490:	3330      	adds	r3, #48	; 0x30
 8003492:	b2da      	uxtb	r2, r3
 8003494:	e00d      	b.n	80034b2 <print_integer+0x9a>
 8003496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <print_integer+0x8c>
 80034a0:	2241      	movs	r2, #65	; 0x41
 80034a2:	e000      	b.n	80034a6 <print_integer+0x8e>
 80034a4:	2261      	movs	r2, #97	; 0x61
 80034a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034aa:	4413      	add	r3, r2
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	3b0a      	subs	r3, #10
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b4:	1c59      	adds	r1, r3, #1
 80034b6:	6379      	str	r1, [r7, #52]	; 0x34
 80034b8:	3338      	adds	r3, #56	; 0x38
 80034ba:	443b      	add	r3, r7
 80034bc:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80034c0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80034c4:	2200      	movs	r2, #0
 80034c6:	4698      	mov	r8, r3
 80034c8:	4691      	mov	r9, r2
 80034ca:	4642      	mov	r2, r8
 80034cc:	464b      	mov	r3, r9
 80034ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034d2:	f7fd fc31 	bl	8000d38 <__aeabi_uldivmod>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 80034de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	d002      	beq.n	80034ec <print_integer+0xd4>
 80034e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e8:	2b1f      	cmp	r3, #31
 80034ea:	d9bd      	bls.n	8003468 <print_integer+0x50>
  }

  print_integer_finalization(output, buf, len, negative, base, precision, width, flags);
 80034ec:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80034f0:	f107 0110 	add.w	r1, r7, #16
 80034f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034f6:	9303      	str	r3, [sp, #12]
 80034f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fa:	9302      	str	r3, [sp, #8]
 80034fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff fe92 	bl	8003234 <print_integer_finalization>
}
 8003510:	bf00      	nop
 8003512:	3738      	adds	r7, #56	; 0x38
 8003514:	46bd      	mov	sp, r7
 8003516:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800351c <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, printf_size_t precision)
{
 800351c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003520:	b096      	sub	sp, #88	; 0x58
 8003522:	af00      	add	r7, sp, #0
 8003524:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003526:	ed87 0b08 	vstr	d0, [r7, #32]
 800352a:	62b9      	str	r1, [r7, #40]	; 0x28
  struct double_components number_;
  number_.is_negative = get_sign_bit(number);
 800352c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003530:	f7ff fd06 	bl	8002f40 <get_sign_bit>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  double abs_number = (number_.is_negative) ? -number : number;
 8003544:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d004      	beq.n	8003556 <get_components+0x3a>
 800354c:	6a3c      	ldr	r4, [r7, #32]
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003554:	e001      	b.n	800355a <get_components+0x3e>
 8003556:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800355a:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
  number_.integral = (int_fast64_t)abs_number;
 800355e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003562:	f7fd fc01 	bl	8000d68 <__aeabi_d2lz>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  double remainder = (abs_number - (double) number_.integral) * powers_of_10[precision];
 800356e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	f7fd f819 	bl	80005ac <__aeabi_l2d>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003582:	f7fc fe89 	bl	8000298 <__aeabi_dsub>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	4a69      	ldr	r2, [pc, #420]	; (8003734 <get_components+0x218>)
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	f7fd f835 	bl	8000608 <__aeabi_dmul>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  number_.fractional = (int_fast64_t)remainder;
 80035a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80035aa:	f7fd fbdd 	bl	8000d68 <__aeabi_d2lz>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  remainder -= (double) number_.fractional;
 80035b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	f7fc fff5 	bl	80005ac <__aeabi_l2d>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80035ca:	f7fc fe65 	bl	8000298 <__aeabi_dsub>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

  if (remainder > 0.5) {
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	4b57      	ldr	r3, [pc, #348]	; (8003738 <get_components+0x21c>)
 80035dc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80035e0:	f7fd faa2 	bl	8000b28 <__aeabi_dcmpgt>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d02d      	beq.n	8003646 <get_components+0x12a>
    ++number_.fractional;
 80035ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035ee:	1c51      	adds	r1, r2, #1
 80035f0:	61b9      	str	r1, [r7, #24]
 80035f2:	f143 0300 	adc.w	r3, r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80035fc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 8003600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003604:	4610      	mov	r0, r2
 8003606:	4619      	mov	r1, r3
 8003608:	f7fc ffd0 	bl	80005ac <__aeabi_l2d>
 800360c:	4a49      	ldr	r2, [pc, #292]	; (8003734 <get_components+0x218>)
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f7fd fa7c 	bl	8000b14 <__aeabi_dcmpge>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d033      	beq.n	800368a <get_components+0x16e>
      number_.fractional = 0;
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      ++number_.integral;
 800362e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003632:	1c51      	adds	r1, r2, #1
 8003634:	6139      	str	r1, [r7, #16]
 8003636:	f143 0300 	adc.w	r3, r3, #0
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003640:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8003644:	e021      	b.n	800368a <get_components+0x16e>
    }
  }
  else if ((remainder == 0.5) && ((number_.fractional == 0U) || (number_.fractional & 1U))) {
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <get_components+0x21c>)
 800364c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003650:	f7fd fa42 	bl	8000ad8 <__aeabi_dcmpeq>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d017      	beq.n	800368a <get_components+0x16e>
 800365a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800365e:	4313      	orrs	r3, r2
 8003660:	d008      	beq.n	8003674 <get_components+0x158>
 8003662:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003666:	f002 0a01 	and.w	sl, r2, #1
 800366a:	f04f 0b00 	mov.w	fp, #0
 800366e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003672:	d00a      	beq.n	800368a <get_components+0x16e>
    // if halfway, round up if odd OR if last digit is 0
    ++number_.fractional;
 8003674:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003678:	1c51      	adds	r1, r2, #1
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	f143 0300 	adc.w	r3, r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003686:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  }

  if (precision == 0U) {
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	2b00      	cmp	r3, #0
 800368e:	d141      	bne.n	8003714 <get_components+0x1f8>
    remainder = abs_number - (double) number_.integral;
 8003690:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	f7fc ff88 	bl	80005ac <__aeabi_l2d>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80036a4:	f7fc fdf8 	bl	8000298 <__aeabi_dsub>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 80036b0:	2301      	movs	r3, #1
 80036b2:	461c      	mov	r4, r3
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <get_components+0x21c>)
 80036ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80036be:	f7fd fa15 	bl	8000aec <__aeabi_dcmplt>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <get_components+0x1b0>
 80036c8:	2300      	movs	r3, #0
 80036ca:	461c      	mov	r4, r3
 80036cc:	b2e3      	uxtb	r3, r4
 80036ce:	f083 0301 	eor.w	r3, r3, #1
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <get_components+0x1d0>
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	4b16      	ldr	r3, [pc, #88]	; (8003738 <get_components+0x21c>)
 80036de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80036e2:	f7fd fa21 	bl	8000b28 <__aeabi_dcmpgt>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <get_components+0x1f8>
 80036ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036f0:	f002 0801 	and.w	r8, r2, #1
 80036f4:	f04f 0900 	mov.w	r9, #0
 80036f8:	ea58 0309 	orrs.w	r3, r8, r9
 80036fc:	d00a      	beq.n	8003714 <get_components+0x1f8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 80036fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003702:	1c51      	adds	r1, r2, #1
 8003704:	6039      	str	r1, [r7, #0]
 8003706:	f143 0300 	adc.w	r3, r3, #0
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003710:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    }
  }
  return number_;
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	461d      	mov	r5, r3
 8003718:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800371c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800371e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003720:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003724:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8003728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800372a:	3758      	adds	r7, #88	; 0x58
 800372c:	46bd      	mov	sp, r7
 800372e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003732:	bf00      	nop
 8003734:	0800e3f8 	.word	0x0800e3f8
 8003738:	3fe00000 	.word	0x3fe00000

0800373c <apply_scaling>:
  double raw_factor;
  bool multiply; // if true, need to multiply by raw_factor; otherwise need to divide by it
};

static double apply_scaling(double num, struct scaling_factor normalization)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	ed87 0b04 	vstr	d0, [r7, #16]
 8003746:	463c      	mov	r4, r7
 8003748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 800374c:	7a3b      	ldrb	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <apply_scaling+0x28>
 8003752:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003756:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800375a:	f7fc ff55 	bl	8000608 <__aeabi_dmul>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	e007      	b.n	8003774 <apply_scaling+0x38>
 8003764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003768:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800376c:	f7fd f876 	bl	800085c <__aeabi_ddiv>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	ec43 2b17 	vmov	d7, r2, r3
}
 8003778:	eeb0 0a47 	vmov.f32	s0, s14
 800377c:	eef0 0a67 	vmov.f32	s1, s15
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	bd90      	pop	{r4, r7, pc}

08003786 <unapply_scaling>:

static double unapply_scaling(double normalized, struct scaling_factor normalization)
{
 8003786:	b590      	push	{r4, r7, lr}
 8003788:	b087      	sub	sp, #28
 800378a:	af00      	add	r7, sp, #0
 800378c:	ed87 0b04 	vstr	d0, [r7, #16]
 8003790:	463c      	mov	r4, r7
 8003792:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#ifdef __GNUC__
// accounting for a static analysis bug in GCC 6.x and earlier
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
#endif
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
 8003796:	7a3b      	ldrb	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <unapply_scaling+0x28>
 800379c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037a4:	f7fd f85a 	bl	800085c <__aeabi_ddiv>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	e007      	b.n	80037be <unapply_scaling+0x38>
 80037ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037b6:	f7fc ff27 	bl	8000608 <__aeabi_dmul>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	ec43 2b17 	vmov	d7, r2, r3
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif
}
 80037c2:	eeb0 0a47 	vmov.f32	s0, s14
 80037c6:	eef0 0a67 	vmov.f32	s1, s15
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd90      	pop	{r4, r7, pc}

080037d0 <update_normalization>:

static struct scaling_factor update_normalization(struct scaling_factor sf, double extra_multiplicative_factor)
{
 80037d0:	b082      	sub	sp, #8
 80037d2:	b590      	push	{r4, r7, lr}
 80037d4:	b08f      	sub	sp, #60	; 0x3c
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80037de:	e881 000c 	stmia.w	r1, {r2, r3}
 80037e2:	ed87 0b00 	vstr	d0, [r7]
  struct scaling_factor result;
  if (sf.multiply) {
 80037e6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <update_normalization+0x38>
    result.multiply = true;
 80037ee:	2301      	movs	r3, #1
 80037f0:	763b      	strb	r3, [r7, #24]
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 80037f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80037f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037fa:	f7fc ff05 	bl	8000608 <__aeabi_dmul>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003806:	e03b      	b.n	8003880 <update_normalization+0xb0>
  }
  else {
    int factor_exp2 = get_exp2(get_bit_access(sf.raw_factor));
 8003808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800380c:	f107 0120 	add.w	r1, r7, #32
 8003810:	4608      	mov	r0, r1
 8003812:	f7ff fb80 	bl	8002f16 <get_bit_access>
 8003816:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800381a:	f7ff fbaa 	bl	8002f72 <get_exp2>
 800381e:	6378      	str	r0, [r7, #52]	; 0x34
    int extra_factor_exp2 = get_exp2(get_bit_access(extra_multiplicative_factor));
 8003820:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003828:	4608      	mov	r0, r1
 800382a:	f7ff fb74 	bl	8002f16 <get_bit_access>
 800382e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003832:	f7ff fb9e 	bl	8002f72 <get_exp2>
 8003836:	6338      	str	r0, [r7, #48]	; 0x30

    // Divide the larger-exponent raw raw_factor by the smaller
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 8003838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800383e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	2b00      	cmp	r3, #0
 8003846:	bfb8      	it	lt
 8003848:	425b      	neglt	r3, r3
 800384a:	429a      	cmp	r2, r3
 800384c:	dd0c      	ble.n	8003868 <update_normalization+0x98>
      result.multiply = false;
 800384e:	2300      	movs	r3, #0
 8003850:	763b      	strb	r3, [r7, #24]
      result.raw_factor = sf.raw_factor / extra_multiplicative_factor;
 8003852:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800385a:	f7fc ffff 	bl	800085c <__aeabi_ddiv>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003866:	e00b      	b.n	8003880 <update_normalization+0xb0>
    }
    else {
      result.multiply = true;
 8003868:	2301      	movs	r3, #1
 800386a:	763b      	strb	r3, [r7, #24]
      result.raw_factor = extra_multiplicative_factor / sf.raw_factor;
 800386c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003874:	f7fc fff2 	bl	800085c <__aeabi_ddiv>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }
  }
  return result;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	461c      	mov	r4, r3
 8003884:	f107 0310 	add.w	r3, r7, #16
 8003888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800388a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	373c      	adds	r7, #60	; 0x3c
 8003892:	46bd      	mov	sp, r7
 8003894:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003898:	b002      	add	sp, #8
 800389a:	4770      	bx	lr

0800389c <get_normalized_components>:

static struct double_components get_normalized_components(bool negative, printf_size_t precision, double non_normalized, struct scaling_factor normalization, int floored_exp10)
{
 800389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a0:	b0a3      	sub	sp, #140	; 0x8c
 80038a2:	af02      	add	r7, sp, #8
 80038a4:	6278      	str	r0, [r7, #36]	; 0x24
 80038a6:	460b      	mov	r3, r1
 80038a8:	61fa      	str	r2, [r7, #28]
 80038aa:	ed87 0b04 	vstr	d0, [r7, #16]
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  struct double_components components;
  components.is_negative = negative;
 80038b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038b6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  double scaled = apply_scaling(non_normalized, normalization);
 80038ba:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80038be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038c0:	ed97 0b04 	vldr	d0, [r7, #16]
 80038c4:	f7ff ff3a 	bl	800373c <apply_scaling>
 80038c8:	ed87 0b1e 	vstr	d0, [r7, #120]	; 0x78

  bool close_to_representation_extremum = ( (-floored_exp10 + (int) precision) >= DBL_MAX_10_EXP - 1 );
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80038d8:	bfcc      	ite	gt
 80038da:	2301      	movgt	r3, #1
 80038dc:	2300      	movle	r3, #0
 80038de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if (close_to_representation_extremum) {
 80038e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d012      	beq.n	8003910 <get_normalized_components+0x74>
    // We can't have a normalization factor which also accounts for the precision, i.e. moves
    // some decimal digits into the mantissa, since it's unrepresentable, or nearly unrepresentable.
    // So, we'll give up early on getting extra precision...
    return get_components(negative ? -scaled : scaled, precision);
 80038ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <get_normalized_components+0x60>
 80038f2:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80038f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038f6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80038fa:	e001      	b.n	8003900 <get_normalized_components+0x64>
 80038fc:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	69f9      	ldr	r1, [r7, #28]
 8003904:	ec45 4b10 	vmov	d0, r4, r5
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fe07 	bl	800351c <get_components>
 800390e:	e0b7      	b.n	8003a80 <get_normalized_components+0x1e4>
  }
  components.integral = (int_fast64_t) scaled;
 8003910:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003914:	f7fd fa28 	bl	8000d68 <__aeabi_d2lz>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8003920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	f7fc fe40 	bl	80005ac <__aeabi_l2d>
 800392c:	4604      	mov	r4, r0
 800392e:	460d      	mov	r5, r1
 8003930:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003936:	ec45 4b10 	vmov	d0, r4, r5
 800393a:	f7ff ff24 	bl	8003786 <unapply_scaling>
 800393e:	ec53 2b10 	vmov	r2, r3, d0
 8003942:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003946:	f7fc fca7 	bl	8000298 <__aeabi_dsub>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  double prec_power_of_10 = powers_of_10[precision];
 8003952:	4a4e      	ldr	r2, [pc, #312]	; (8003a8c <get_normalized_components+0x1f0>)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  struct scaling_factor account_for_precision = update_normalization(normalization, prec_power_of_10);
 8003962:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003966:	466a      	mov	r2, sp
 8003968:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800396c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003970:	e882 0003 	stmia.w	r2, {r0, r1}
 8003974:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003978:	cb0c      	ldmia	r3, {r2, r3}
 800397a:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800397e:	4620      	mov	r0, r4
 8003980:	f7ff ff26 	bl	80037d0 <update_normalization>
  double scaled_remainder = apply_scaling(remainder, account_for_precision);
 8003984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003988:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800398a:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800398e:	f7ff fed5 	bl	800373c <apply_scaling>
 8003992:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
  double rounding_threshold = 0.5;
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <get_normalized_components+0x1f4>)
 800399c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

  components.fractional = (int_fast64_t) scaled_remainder; // when precision == 0, the assigned value should be 0
 80039a0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039a4:	f7fd f9e0 	bl	8000d68 <__aeabi_d2lz>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  scaled_remainder -= (double) components.fractional; //when precision == 0, this will not change scaled_remainder
 80039b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	f7fc fdf8 	bl	80005ac <__aeabi_l2d>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039c4:	f7fc fc68 	bl	8000298 <__aeabi_dsub>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

  components.fractional += (scaled_remainder >= rounding_threshold);
 80039d0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80039d4:	2301      	movs	r3, #1
 80039d6:	461e      	mov	r6, r3
 80039d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039dc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039e0:	f7fd f898 	bl	8000b14 <__aeabi_dcmpge>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <get_normalized_components+0x152>
 80039ea:	2300      	movs	r3, #0
 80039ec:	461e      	mov	r6, r3
 80039ee:	b2f3      	uxtb	r3, r6
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2200      	movs	r2, #0
 80039f4:	4698      	mov	r8, r3
 80039f6:	4691      	mov	r9, r2
 80039f8:	eb14 0308 	adds.w	r3, r4, r8
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	eb45 0309 	adc.w	r3, r5, r9
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003a08:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  if (scaled_remainder == rounding_threshold) {
 8003a0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a10:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a14:	f7fd f860 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <get_normalized_components+0x196>
    // banker's rounding: Round towards the even number (making the mean error 0)
    components.fractional &= ~((int_fast64_t) 0x1);
 8003a1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a22:	f022 0101 	bic.w	r1, r2, #1
 8003a26:	6039      	str	r1, [r7, #0]
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003a2e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  // handle rollover, e.g. the case of 0.99 with precision 1 becoming (0,100),
  // and must then be corrected into (1, 0).
  // Note: for precision = 0, this will "translate" the rounding effect from
  // the fractional part to the integral part where it should actually be
  // felt (as prec_power_of_10 is 1)
  if ((double) components.fractional >= prec_power_of_10) {
 8003a32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a36:	4610      	mov	r0, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f7fc fdb7 	bl	80005ac <__aeabi_l2d>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a46:	f7fd f85b 	bl	8000b00 <__aeabi_dcmple>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00d      	beq.n	8003a6c <get_normalized_components+0x1d0>
    components.fractional = 0;
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    ++components.integral;
 8003a5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a60:	f112 0a01 	adds.w	sl, r2, #1
 8003a64:	f143 0b00 	adc.w	fp, r3, #0
 8003a68:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
  }
  return components;
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	461d      	mov	r5, r3
 8003a70:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a7c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8003a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a82:	3784      	adds	r7, #132	; 0x84
 8003a84:	46bd      	mov	sp, r7
 8003a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8a:	bf00      	nop
 8003a8c:	0800e3f8 	.word	0x0800e3f8
 8003a90:	3fe00000 	.word	0x3fe00000

08003a94 <print_broken_up_decimal>:
#endif // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_broken_up_decimal(
  struct double_components number_, output_gadget_t* output, printf_size_t precision,
  printf_size_t width, printf_flags_t flags, char *buf, printf_size_t len)
{
 8003a94:	b084      	sub	sp, #16
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af02      	add	r7, sp, #8
 8003a9c:	f107 0c18 	add.w	ip, r7, #24
 8003aa0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if (precision != 0U) {
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8087 	beq.w	8003bba <print_broken_up_decimal+0x126>
    // do fractional part, as an unsigned number

    printf_size_t count = precision;
 8003aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aae:	60fb      	str	r3, [r7, #12]

    // %g/%G mandates we skip the trailing 0 digits...
    if ((flags & FLAGS_ADAPT_EXP) && !(flags & FLAGS_HASH) && (number_.fractional > 0)) {
 8003ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d029      	beq.n	8003b0e <print_broken_up_decimal+0x7a>
 8003aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d124      	bne.n	8003b0e <print_broken_up_decimal+0x7a>
 8003ac4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ac8:	2a01      	cmp	r2, #1
 8003aca:	f173 0300 	sbcs.w	r3, r3, #0
 8003ace:	db1e      	blt.n	8003b0e <print_broken_up_decimal+0x7a>
      while(true) {
        int_fast64_t digit = number_.fractional % 10U;
 8003ad0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003ad4:	f04f 020a 	mov.w	r2, #10
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	f7fd f8dc 	bl	8000c98 <__aeabi_ldivmod>
 8003ae0:	e9c7 2300 	strd	r2, r3, [r7]
        if (digit != 0) {
 8003ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	d10f      	bne.n	8003b0c <print_broken_up_decimal+0x78>
          break;
        }
        --count;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]
        number_.fractional /= 10U;
 8003af2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003af6:	f04f 020a 	mov.w	r2, #10
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	f7fd f8cb 	bl	8000c98 <__aeabi_ldivmod>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	e9c7 2308 	strd	r2, r3, [r7, #32]
      while(true) {
 8003b0a:	e7e1      	b.n	8003ad0 <print_broken_up_decimal+0x3c>
          break;
 8003b0c:	bf00      	nop
      }
      // ... and even the decimal point if there are no
      // non-zero fractional part digits (see below)
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 8003b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b12:	2a01      	cmp	r2, #1
 8003b14:	f173 0300 	sbcs.w	r3, r3, #0
 8003b18:	da2e      	bge.n	8003b78 <print_broken_up_decimal+0xe4>
 8003b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d029      	beq.n	8003b78 <print_broken_up_decimal+0xe4>
 8003b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d076      	beq.n	8003c1c <print_broken_up_decimal+0x188>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003b2e:	e023      	b.n	8003b78 <print_broken_up_decimal+0xe4>
        --count;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8003b36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003b3a:	f04f 020a 	mov.w	r2, #10
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	f7fd f8a9 	bl	8000c98 <__aeabi_ldivmod>
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b4a:	1c59      	adds	r1, r3, #1
 8003b4c:	6479      	str	r1, [r7, #68]	; 0x44
 8003b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b50:	440b      	add	r3, r1
 8003b52:	3230      	adds	r2, #48	; 0x30
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]
        if (!(number_.fractional /= 10U)) {
 8003b58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003b5c:	f04f 020a 	mov.w	r2, #10
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	f7fd f898 	bl	8000c98 <__aeabi_ldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003b70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d003      	beq.n	8003b80 <print_broken_up_decimal+0xec>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7a:	2b1f      	cmp	r3, #31
 8003b7c:	d9d8      	bls.n	8003b30 <print_broken_up_decimal+0x9c>
 8003b7e:	e00b      	b.n	8003b98 <print_broken_up_decimal+0x104>
          break;
 8003b80:	bf00      	nop
        }
      }
      // add extra 0s
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 8003b82:	e009      	b.n	8003b98 <print_broken_up_decimal+0x104>
        buf[len++] = '0';
 8003b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	647a      	str	r2, [r7, #68]	; 0x44
 8003b8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b8c:	4413      	add	r3, r2
 8003b8e:	2230      	movs	r2, #48	; 0x30
 8003b90:	701a      	strb	r2, [r3, #0]
        --count;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 8003b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b9a:	2b1f      	cmp	r3, #31
 8003b9c:	d802      	bhi.n	8003ba4 <print_broken_up_decimal+0x110>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ef      	bne.n	8003b84 <print_broken_up_decimal+0xf0>
      }
      if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba6:	2b1f      	cmp	r3, #31
 8003ba8:	d838      	bhi.n	8003c1c <print_broken_up_decimal+0x188>
        buf[len++] = '.';
 8003baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	647a      	str	r2, [r7, #68]	; 0x44
 8003bb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bb2:	4413      	add	r3, r2
 8003bb4:	222e      	movs	r2, #46	; 0x2e
 8003bb6:	701a      	strb	r2, [r3, #0]
 8003bb8:	e030      	b.n	8003c1c <print_broken_up_decimal+0x188>
      }
    }
  }
  else {
    if ((flags & FLAGS_HASH) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8003bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d02b      	beq.n	8003c1c <print_broken_up_decimal+0x188>
 8003bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc6:	2b1f      	cmp	r3, #31
 8003bc8:	d828      	bhi.n	8003c1c <print_broken_up_decimal+0x188>
      buf[len++] = '.';
 8003bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	647a      	str	r2, [r7, #68]	; 0x44
 8003bd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bd2:	4413      	add	r3, r2
 8003bd4:	222e      	movs	r2, #46	; 0x2e
 8003bd6:	701a      	strb	r2, [r3, #0]
    }
  }

  // Write the integer part of the number (it comes after the fractional
  // since the character order is reversed)
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003bd8:	e020      	b.n	8003c1c <print_broken_up_decimal+0x188>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8003bda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bde:	f04f 020a 	mov.w	r2, #10
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	f7fd f857 	bl	8000c98 <__aeabi_ldivmod>
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bee:	1c59      	adds	r1, r3, #1
 8003bf0:	6479      	str	r1, [r7, #68]	; 0x44
 8003bf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3230      	adds	r2, #48	; 0x30
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
    if (!(number_.integral /= 10)) {
 8003bfc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c00:	f04f 020a 	mov.w	r2, #10
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	f7fd f846 	bl	8000c98 <__aeabi_ldivmod>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <print_broken_up_decimal+0x190>
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c1e:	2b1f      	cmp	r3, #31
 8003c20:	d9db      	bls.n	8003bda <print_broken_up_decimal+0x146>
 8003c22:	e000      	b.n	8003c26 <print_broken_up_decimal+0x192>
      break;
 8003c24:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d122      	bne.n	8003c76 <print_broken_up_decimal+0x1e2>
 8003c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01d      	beq.n	8003c76 <print_broken_up_decimal+0x1e2>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <print_broken_up_decimal+0x1d4>
 8003c40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <print_broken_up_decimal+0x1be>
 8003c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <print_broken_up_decimal+0x1d4>
      width--;
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	3b01      	subs	r3, #1
 8003c56:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8003c58:	e006      	b.n	8003c68 <print_broken_up_decimal+0x1d4>
      buf[len++] = '0';
 8003c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	647a      	str	r2, [r7, #68]	; 0x44
 8003c60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c62:	4413      	add	r3, r2
 8003c64:	2230      	movs	r2, #48	; 0x30
 8003c66:	701a      	strb	r2, [r3, #0]
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8003c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d202      	bcs.n	8003c76 <print_broken_up_decimal+0x1e2>
 8003c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c72:	2b1f      	cmp	r3, #31
 8003c74:	d9f1      	bls.n	8003c5a <print_broken_up_decimal+0x1c6>
    }
  }

  if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c78:	2b1f      	cmp	r3, #31
 8003c7a:	d824      	bhi.n	8003cc6 <print_broken_up_decimal+0x232>
    if (number_.is_negative) {
 8003c7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <print_broken_up_decimal+0x200>
      buf[len++] = '-';
 8003c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	647a      	str	r2, [r7, #68]	; 0x44
 8003c8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c8c:	4413      	add	r3, r2
 8003c8e:	222d      	movs	r2, #45	; 0x2d
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e018      	b.n	8003cc6 <print_broken_up_decimal+0x232>
    }
    else if (flags & FLAGS_PLUS) {
 8003c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <print_broken_up_decimal+0x21a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ca6:	4413      	add	r3, r2
 8003ca8:	222b      	movs	r2, #43	; 0x2b
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e00b      	b.n	8003cc6 <print_broken_up_decimal+0x232>
    }
    else if (flags & FLAGS_SPACE) {
 8003cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d006      	beq.n	8003cc6 <print_broken_up_decimal+0x232>
      buf[len++] = ' ';
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	647a      	str	r2, [r7, #68]	; 0x44
 8003cbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cc0:	4413      	add	r3, r2
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 8003cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd2:	f7ff fa69 	bl	80031a8 <out_rev_>
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ce0:	b004      	add	sp, #16
 8003ce2:	4770      	bx	lr

08003ce4 <print_decimal_number>:

      // internal ftoa for fixed decimal floating point
static void print_decimal_number(output_gadget_t* output, double number, printf_size_t precision, printf_size_t width, printf_flags_t flags, char* buf, printf_size_t len)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b094      	sub	sp, #80	; 0x50
 8003ce8:	af08      	add	r7, sp, #32
 8003cea:	6178      	str	r0, [r7, #20]
 8003cec:	ed87 0b02 	vstr	d0, [r7, #8]
 8003cf0:	6139      	str	r1, [r7, #16]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  struct double_components value_ = get_components(number, precision);
 8003cf6:	f107 0318 	add.w	r3, r7, #24
 8003cfa:	6939      	ldr	r1, [r7, #16]
 8003cfc:	ed97 0b02 	vldr	d0, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fc0b 	bl	800351c <get_components>
  print_broken_up_decimal(value_, output, precision, width, flags, buf, len);
 8003d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d08:	9307      	str	r3, [sp, #28]
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	9306      	str	r3, [sp, #24]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	9305      	str	r3, [sp, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	9304      	str	r3, [sp, #16]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	9303      	str	r3, [sp, #12]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	9302      	str	r3, [sp, #8]
 8003d1e:	466a      	mov	r2, sp
 8003d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003d28:	e882 0003 	stmia.w	r2, {r0, r1}
 8003d2c:	f107 0318 	add.w	r3, r7, #24
 8003d30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d32:	f7ff feaf 	bl	8003a94 <print_broken_up_decimal>
}
 8003d36:	bf00      	nop
 8003d38:	3730      	adds	r7, #48	; 0x30
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <bastardized_floor>:
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

// A floor function - but one which only works for numbers whose
// floor value is representable by an int.
static int bastardized_floor(double x)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	ed87 0b00 	vstr	d0, [r7]
  if (x >= 0) { return (int) x; }
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d54:	f7fc fede 	bl	8000b14 <__aeabi_dcmpge>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <bastardized_floor+0x2c>
 8003d5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d62:	f7fc ff01 	bl	8000b68 <__aeabi_d2iz>
 8003d66:	4603      	mov	r3, r0
 8003d68:	e015      	b.n	8003d96 <bastardized_floor+0x58>
  int n = (int) x;
 8003d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d6e:	f7fc fefb 	bl	8000b68 <__aeabi_d2iz>
 8003d72:	4603      	mov	r3, r0
 8003d74:	60fb      	str	r3, [r7, #12]
  return ( ((double) n) == x ) ? n : n-1;
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f7fc fbdc 	bl	8000534 <__aeabi_i2d>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d84:	f7fc fea8 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <bastardized_floor+0x56>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	e000      	b.n	8003d96 <bastardized_floor+0x58>
 8003d94:	68fb      	ldr	r3, [r7, #12]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <log10_of_positive>:

// Computes the base-10 logarithm of the input number - which must be an actual
// positive number (not infinity or NaN, nor a sub-normal)
static double log10_of_positive(double positive_number)
{
 8003da0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003da4:	b088      	sub	sp, #32
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	ed87 0b00 	vstr	d0, [r7]
  // our input number, and need only solve log_10(M) for M between 1 and 2 (as
  // the base-2 mantissa is always 1-point-something). In that limited range, a
  // Taylor series expansion of log10(x) should serve us well enough; and we'll
  // take the mid-point, 1.5, as the point of expansion.

  double_with_bit_access dwba = get_bit_access(positive_number);
 8003dac:	f107 0108 	add.w	r1, r7, #8
 8003db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003db4:	4608      	mov	r0, r1
 8003db6:	f7ff f8ae 	bl	8002f16 <get_bit_access>
  // based on the algorithm by David Gay (https://www.ampl.com/netlib/fp/dtoa.c)
  int exp2 = get_exp2(dwba);
 8003dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dbe:	f7ff f8d8 	bl	8002f72 <get_exp2>
 8003dc2:	61f8      	str	r0, [r7, #28]
  // drop the exponent, so dwba.F comes into the range [1,2)
  dwba.U = (dwba.U & (((double_uint_t) (1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) |
 8003dc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dc8:	4690      	mov	r8, r2
 8003dca:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003dce:	4644      	mov	r4, r8
 8003dd0:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003dd4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003dd8:	e9c7 4502 	strd	r4, r5, [r7, #8]
           ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
  double z = (dwba.F - 1.5);
 8003ddc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <log10_of_positive+0x150>)
 8003de6:	f7fc fa57 	bl	8000298 <__aeabi_dsub>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return (
    // Taylor expansion around 1.5:
    0.1760912590556812420           // Expansion term 0: ln(1.5)            / ln(10)
    + z     * 0.2895296546021678851 // Expansion term 1: (M - 1.5)   * 2/3  / ln(10)
 8003df2:	a335      	add	r3, pc, #212	; (adr r3, 8003ec8 <log10_of_positive+0x128>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003dfc:	f7fc fc04 	bl	8000608 <__aeabi_dmul>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	a331      	add	r3, pc, #196	; (adr r3, 8003ed0 <log10_of_positive+0x130>)
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	f7fc fa45 	bl	800029c <__adddf3>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4614      	mov	r4, r2
 8003e18:	461d      	mov	r5, r3
#if PRINTF_LOG10_TAYLOR_TERMS > 2
    - z*z   * 0.0965098848673892950 // Expansion term 2: (M - 1.5)^2 * 2/9  / ln(10)
 8003e1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e22:	f7fc fbf1 	bl	8000608 <__aeabi_dmul>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	a32a      	add	r3, pc, #168	; (adr r3, 8003ed8 <log10_of_positive+0x138>)
 8003e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e34:	f7fc fbe8 	bl	8000608 <__aeabi_dmul>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	4629      	mov	r1, r5
 8003e40:	f7fc fa2a 	bl	8000298 <__aeabi_dsub>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4614      	mov	r4, r2
 8003e4a:	461d      	mov	r5, r3
#if PRINTF_LOG10_TAYLOR_TERMS > 3
    + z*z*z * 0.0428932821632841311 // Expansion term 2: (M - 1.5)^3 * 8/81 / ln(10)
 8003e4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e54:	f7fc fbd8 	bl	8000608 <__aeabi_dmul>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e64:	f7fc fbd0 	bl	8000608 <__aeabi_dmul>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4619      	mov	r1, r3
 8003e70:	a31b      	add	r3, pc, #108	; (adr r3, 8003ee0 <log10_of_positive+0x140>)
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	f7fc fbc7 	bl	8000608 <__aeabi_dmul>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4620      	mov	r0, r4
 8003e80:	4629      	mov	r1, r5
 8003e82:	f7fc fa0b 	bl	800029c <__adddf3>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4614      	mov	r4, r2
 8003e8c:	461d      	mov	r5, r3
#endif
#endif
    // exact log_2 of the exponent x, with logarithm base change
    + exp2 * 0.30102999566398119521 // = exp2 * log_10(2) = exp2 * ln(2)/ln(10)
 8003e8e:	69f8      	ldr	r0, [r7, #28]
 8003e90:	f7fc fb50 	bl	8000534 <__aeabi_i2d>
 8003e94:	a314      	add	r3, pc, #80	; (adr r3, 8003ee8 <log10_of_positive+0x148>)
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	f7fc fbb5 	bl	8000608 <__aeabi_dmul>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	f7fc f9f9 	bl	800029c <__adddf3>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	ec43 2b17 	vmov	d7, r2, r3
  );
}
 8003eb2:	eeb0 0a47 	vmov.f32	s0, s14
 8003eb6:	eef0 0a67 	vmov.f32	s1, s15
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ec2:	bf00      	nop
 8003ec4:	f3af 8000 	nop.w
 8003ec8:	636f435f 	.word	0x636f435f
 8003ecc:	3fd287a7 	.word	0x3fd287a7
 8003ed0:	8b60b7fc 	.word	0x8b60b7fc
 8003ed4:	3fc68a28 	.word	0x3fc68a28
 8003ed8:	2f3f047e 	.word	0x2f3f047e
 8003edc:	3fb8b4df 	.word	0x3fb8b4df
 8003ee0:	b83803ff 	.word	0xb83803ff
 8003ee4:	3fa5f61b 	.word	0x3fa5f61b
 8003ee8:	509f79ff 	.word	0x509f79ff
 8003eec:	3fd34413 	.word	0x3fd34413
 8003ef0:	3ff80000 	.word	0x3ff80000
 8003ef4:	00000000 	.word	0x00000000

08003ef8 <pow10_of_int>:


static double pow10_of_int(int floored_exp10)
{
 8003ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003efc:	b08a      	sub	sp, #40	; 0x28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  // A crude hack for avoiding undesired behavior with barely-normal or slightly-subnormal values.
  if (floored_exp10 == DOUBLE_MAX_SUBNORMAL_EXPONENT_OF_10) {
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f513 7f9a 	cmn.w	r3, #308	; 0x134
 8003f08:	d103      	bne.n	8003f12 <pow10_of_int+0x1a>
    return DOUBLE_MAX_SUBNORMAL_POWER_OF_10;
 8003f0a:	a36a      	add	r3, pc, #424	; (adr r3, 80040b4 <pow10_of_int+0x1bc>)
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	e0b4      	b.n	800407c <pow10_of_int+0x184>
  }
  // Compute 10^(floored_exp10) but (try to) make sure that doesn't overflow
  double_with_bit_access dwba;
  int exp2 = bastardized_floor(floored_exp10 * 3.321928094887362 + 0.5);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fc fb0e 	bl	8000534 <__aeabi_i2d>
 8003f18:	a368      	add	r3, pc, #416	; (adr r3, 80040bc <pow10_of_int+0x1c4>)
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	f7fc fb73 	bl	8000608 <__aeabi_dmul>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4610      	mov	r0, r2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	4b5c      	ldr	r3, [pc, #368]	; (80040a0 <pow10_of_int+0x1a8>)
 8003f30:	f7fc f9b4 	bl	800029c <__adddf3>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	ec43 2b17 	vmov	d7, r2, r3
 8003f3c:	eeb0 0a47 	vmov.f32	s0, s14
 8003f40:	eef0 0a67 	vmov.f32	s1, s15
 8003f44:	f7ff fefb 	bl	8003d3e <bastardized_floor>
 8003f48:	6278      	str	r0, [r7, #36]	; 0x24
  const double z  = floored_exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fc faf2 	bl	8000534 <__aeabi_i2d>
 8003f50:	a34f      	add	r3, pc, #316	; (adr r3, 8004090 <pow10_of_int+0x198>)
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f7fc fb57 	bl	8000608 <__aeabi_dmul>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4692      	mov	sl, r2
 8003f60:	469b      	mov	fp, r3
 8003f62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f64:	f7fc fae6 	bl	8000534 <__aeabi_i2d>
 8003f68:	a34b      	add	r3, pc, #300	; (adr r3, 8004098 <pow10_of_int+0x1a0>)
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	f7fc fb4b 	bl	8000608 <__aeabi_dmul>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4650      	mov	r0, sl
 8003f78:	4659      	mov	r1, fp
 8003f7a:	f7fc f98d 	bl	8000298 <__aeabi_dsub>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const double z2 = z * z;
 8003f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f8e:	f7fc fb3b 	bl	8000608 <__aeabi_dmul>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	e9c7 2304 	strd	r2, r3, [r7, #16]
  dwba.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	17da      	asrs	r2, r3, #31
 8003f9e:	461c      	mov	r4, r3
 8003fa0:	4615      	mov	r5, r2
 8003fa2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003fa6:	eb14 0803 	adds.w	r8, r4, r3
 8003faa:	f145 0900 	adc.w	r9, r5, #0
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	ea4f 5308 	mov.w	r3, r8, lsl #20
 8003fba:	2200      	movs	r2, #0
 8003fbc:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // compute exp(z) using continued fractions,
  // see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  dwba.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003fc0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	f7fc f966 	bl	800029c <__adddf3>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4690      	mov	r8, r2
 8003fd6:	4699      	mov	r9, r3
 8003fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fdc:	f04f 0000 	mov.w	r0, #0
 8003fe0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003fe4:	f7fc f958 	bl	8000298 <__aeabi_dsub>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4692      	mov	sl, r2
 8003fee:	469b      	mov	fp, r3
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	4b2b      	ldr	r3, [pc, #172]	; (80040a4 <pow10_of_int+0x1ac>)
 8003ff6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ffa:	f7fc fc2f 	bl	800085c <__aeabi_ddiv>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <pow10_of_int+0x1b0>)
 800400c:	f7fc f946 	bl	800029c <__adddf3>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004018:	f7fc fc20 	bl	800085c <__aeabi_ddiv>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	4b20      	ldr	r3, [pc, #128]	; (80040ac <pow10_of_int+0x1b4>)
 800402a:	f7fc f937 	bl	800029c <__adddf3>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004036:	f7fc fc11 	bl	800085c <__aeabi_ddiv>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4650      	mov	r0, sl
 8004040:	4659      	mov	r1, fp
 8004042:	f7fc f92b 	bl	800029c <__adddf3>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4640      	mov	r0, r8
 800404c:	4649      	mov	r1, r9
 800404e:	f7fc fc05 	bl	800085c <__aeabi_ddiv>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4610      	mov	r0, r2
 8004058:	4619      	mov	r1, r3
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <pow10_of_int+0x1b8>)
 8004060:	f7fc f91c 	bl	800029c <__adddf3>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4620      	mov	r0, r4
 800406a:	4629      	mov	r1, r5
 800406c:	f7fc facc 	bl	8000608 <__aeabi_dmul>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return dwba.F;
 8004078:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800407c:	ec43 2b17 	vmov	d7, r2, r3
 8004080:	eeb0 0a47 	vmov.f32	s0, s14
 8004084:	eef0 0a67 	vmov.f32	s1, s15
 8004088:	3728      	adds	r7, #40	; 0x28
 800408a:	46bd      	mov	sp, r7
 800408c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004090:	bbb55516 	.word	0xbbb55516
 8004094:	40026bb1 	.word	0x40026bb1
 8004098:	fefa39ef 	.word	0xfefa39ef
 800409c:	3fe62e42 	.word	0x3fe62e42
 80040a0:	3fe00000 	.word	0x3fe00000
 80040a4:	402c0000 	.word	0x402c0000
 80040a8:	40240000 	.word	0x40240000
 80040ac:	40180000 	.word	0x40180000
 80040b0:	3ff00000 	.word	0x3ff00000
 80040b4:	7819e8d2 	.word	0x7819e8d2
 80040b8:	000730d6 	.word	0x000730d6
 80040bc:	0979a371 	.word	0x0979a371
 80040c0:	400a934f 	.word	0x400a934f

080040c4 <print_exponential_number>:

static void print_exponential_number(output_gadget_t* output, double number, printf_size_t precision, printf_size_t width, printf_flags_t flags, char* buf, printf_size_t len)
{
 80040c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c8:	b0ad      	sub	sp, #180	; 0xb4
 80040ca:	af08      	add	r7, sp, #32
 80040cc:	6278      	str	r0, [r7, #36]	; 0x24
 80040ce:	ed87 0b06 	vstr	d0, [r7, #24]
 80040d2:	6239      	str	r1, [r7, #32]
 80040d4:	617a      	str	r2, [r7, #20]
 80040d6:	613b      	str	r3, [r7, #16]
  const bool negative = get_sign_bit(number);
 80040d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040dc:	f7fe ff30 	bl	8002f40 <get_sign_bit>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  // This number will decrease gradually (by factors of 10) as we "extract" the exponent out of it
  double abs_number =  negative ? -number : number;
 80040ee:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <print_exponential_number+0x3c>
 80040f6:	69bc      	ldr	r4, [r7, #24]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80040fe:	e001      	b.n	8004104 <print_exponential_number+0x40>
 8004100:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004104:	e9c7 451c 	strd	r4, r5, [r7, #112]	; 0x70
  bool abs_exp10_covered_by_powers_table;
  struct scaling_factor normalization;


  // Determine the decimal exponent
  if (abs_number == 0.0) {
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004114:	f7fc fce0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <print_exponential_number+0x62>
    // TODO: This is a special-case for 0.0 (and -0.0); but proper handling is required for denormals more generally.
    floored_exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 800411e:	2300      	movs	r3, #0
 8004120:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004124:	e051      	b.n	80041ca <print_exponential_number+0x106>
  }
  else  {
    double exp10 = log10_of_positive(abs_number);
 8004126:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 800412a:	f7ff fe39 	bl	8003da0 <log10_of_positive>
 800412e:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
    floored_exp10 = bastardized_floor(exp10);
 8004132:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8004136:	f7ff fe02 	bl	8003d3e <bastardized_floor>
 800413a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    double p10 = pow10_of_int(floored_exp10);
 800413e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004142:	f7ff fed9 	bl	8003ef8 <pow10_of_int>
 8004146:	ed87 0b20 	vstr	d0, [r7, #128]	; 0x80
    // correct for rounding errors
    if (abs_number < p10) {
 800414a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800414e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004152:	f7fc fccb 	bl	8000aec <__aeabi_dcmplt>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00f      	beq.n	800417c <print_exponential_number+0xb8>
      floored_exp10--;
 800415c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004160:	3b01      	subs	r3, #1
 8004162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      p10 /= 10;
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	4baf      	ldr	r3, [pc, #700]	; (8004428 <print_exponential_number+0x364>)
 800416c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004170:	f7fc fb74 	bl	800085c <__aeabi_ddiv>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    }
    abs_exp10_covered_by_powers_table = PRINTF_ABS(floored_exp10) < PRINTF_MAX_PRECOMPUTED_POWER_OF_10;
 800417c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004180:	f113 0f11 	cmn.w	r3, #17
 8004184:	db05      	blt.n	8004192 <print_exponential_number+0xce>
 8004186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800418a:	2b11      	cmp	r3, #17
 800418c:	dc01      	bgt.n	8004192 <print_exponential_number+0xce>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <print_exponential_number+0xd0>
 8004192:	2300      	movs	r3, #0
 8004194:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8004198:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(floored_exp10)] : p10;
 80041a4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <print_exponential_number+0xfe>
 80041ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bfb8      	it	lt
 80041b4:	425b      	neglt	r3, r3
 80041b6:	4a9d      	ldr	r2, [pc, #628]	; (800442c <print_exponential_number+0x368>)
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4413      	add	r3, r2
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	e001      	b.n	80041c6 <print_exponential_number+0x102>
 80041c2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80041c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  // the decimal part after decimal exponent extraction, and the base-10 exponent part.
  // For both of these, the value of 0 has a special meaning, but not the same one:
  // a 0 exponent-part width means "don't print the exponent"; a 0 decimal-part width
  // means "use as many characters as necessary".

  bool fall_back_to_decimal_only_mode = false;
 80041ca:	2300      	movs	r3, #0
 80041cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  if (flags & FLAGS_ADAPT_EXP) {
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d030      	beq.n	800423c <print_exponential_number+0x178>
    int required_significant_digits = (precision == 0) ? 1 : (int) precision;
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <print_exponential_number+0x120>
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	e000      	b.n	80041e6 <print_exponential_number+0x122>
 80041e4:	2301      	movs	r3, #1
 80041e6:	667b      	str	r3, [r7, #100]	; 0x64
    // Should we want to fall-back to "%f" mode, and only print the decimal part?
    fall_back_to_decimal_only_mode = (floored_exp10 >= -4 && floored_exp10 < required_significant_digits);
 80041e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ec:	f113 0f04 	cmn.w	r3, #4
 80041f0:	db06      	blt.n	8004200 <print_exponential_number+0x13c>
 80041f2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80041f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041f8:	429a      	cmp	r2, r3
 80041fa:	da01      	bge.n	8004200 <print_exponential_number+0x13c>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <print_exponential_number+0x13e>
 8004200:	2300      	movs	r3, #0
 8004202:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004206:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    // Now, let's adjust the precision
    // This also decided how we adjust the precision value - as in "%g" mode,
    // "precision" is the number of _significant digits_, and this is when we "translate"
    // the precision value to an actual number of decimal digits.
    int precision_ = fall_back_to_decimal_only_mode ?
                     (int) precision - 1 - floored_exp10 :
 8004212:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <print_exponential_number+0x162>
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	1e5a      	subs	r2, r3, #1
 800421e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	e001      	b.n	800422a <print_exponential_number+0x166>
        (int) precision - 1; // the presence of the exponent ensures only one significant digit comes before the decimal point
 8004226:	6a3b      	ldr	r3, [r7, #32]
                     (int) precision - 1 - floored_exp10 :
 8004228:	3b01      	subs	r3, #1
    int precision_ = fall_back_to_decimal_only_mode ?
 800422a:	663b      	str	r3, [r7, #96]	; 0x60
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 800422c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800422e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004232:	623b      	str	r3, [r7, #32]
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800423a:	613b      	str	r3, [r7, #16]
  }

  normalization.multiply = (floored_exp10 < 0 && abs_exp10_covered_by_powers_table);
 800423c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004240:	2b00      	cmp	r3, #0
 8004242:	da05      	bge.n	8004250 <print_exponential_number+0x18c>
 8004244:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <print_exponential_number+0x18c>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <print_exponential_number+0x18e>
 8004250:	2300      	movs	r3, #0
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || floored_exp10 == 0);
 800425c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004260:	2b00      	cmp	r3, #0
 8004262:	d103      	bne.n	800426c <print_exponential_number+0x1a8>
 8004264:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <print_exponential_number+0x1ac>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <print_exponential_number+0x1ae>
 8004270:	2300      	movs	r3, #0
 8004272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004276:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  struct double_components decimal_part_components =
 8004282:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004286:	2b00      	cmp	r3, #0
 8004288:	d017      	beq.n	80042ba <print_exponential_number+0x1f6>
    should_skip_normalization ?
    get_components(negative ? -abs_number : abs_number, precision) :
 800428a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800428e:	2b00      	cmp	r3, #0
 8004290:	d006      	beq.n	80042a0 <print_exponential_number+0x1dc>
 8004292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e003      	b.n	80042a8 <print_exponential_number+0x1e4>
 80042a0:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 80042a4:	ed87 7b02 	vstr	d7, [r7, #8]
 80042a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042ac:	6a39      	ldr	r1, [r7, #32]
 80042ae:	ed97 0b02 	vldr	d0, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f932 	bl	800351c <get_components>
 80042b8:	e013      	b.n	80042e2 <print_exponential_number+0x21e>
    get_normalized_components(negative, precision, abs_number, normalization, floored_exp10);
 80042ba:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80042be:	f897 607e 	ldrb.w	r6, [r7, #126]	; 0x7e
 80042c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042c6:	9304      	str	r3, [sp, #16]
 80042c8:	466c      	mov	r4, sp
 80042ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80042d4:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 80042d8:	6a3a      	ldr	r2, [r7, #32]
 80042da:	4631      	mov	r1, r6
 80042dc:	4628      	mov	r0, r5
 80042de:	f7ff fadd 	bl	800389c <get_normalized_components>

  // Account for roll-over, e.g. rounding from 9.99 to 100.0 - which effects
  // the exponent and may require additional tweaking of the parts
  if (fall_back_to_decimal_only_mode) {
 80042e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d025      	beq.n	8004336 <print_exponential_number+0x272>
    if ((flags & FLAGS_ADAPT_EXP) && floored_exp10 >= -1 && decimal_part_components.integral == powers_of_10[floored_exp10 + 1]) {
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d037      	beq.n	8004364 <print_exponential_number+0x2a0>
 80042f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042fc:	db32      	blt.n	8004364 <print_exponential_number+0x2a0>
 80042fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004302:	4610      	mov	r0, r2
 8004304:	4619      	mov	r1, r3
 8004306:	f7fc f951 	bl	80005ac <__aeabi_l2d>
 800430a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800430e:	3301      	adds	r3, #1
 8004310:	4a46      	ldr	r2, [pc, #280]	; (800442c <print_exponential_number+0x368>)
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4413      	add	r3, r2
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f7fc fbdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01f      	beq.n	8004364 <print_exponential_number+0x2a0>
      floored_exp10++; // Not strictly necessary, since floored_exp10 is no longer really used
 8004324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004328:	3301      	adds	r3, #1
 800432a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      precision--;
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	3b01      	subs	r3, #1
 8004332:	623b      	str	r3, [r7, #32]
 8004334:	e016      	b.n	8004364 <print_exponential_number+0x2a0>
      // ... and it should already be the case that decimal_part_components.fractional == 0
    }
    // TODO: What about rollover strictly within the fractional part?
  }
  else {
    if (decimal_part_components.integral >= 10) {
 8004336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800433a:	2a0a      	cmp	r2, #10
 800433c:	f173 0300 	sbcs.w	r3, r3, #0
 8004340:	db10      	blt.n	8004364 <print_exponential_number+0x2a0>
      floored_exp10++;
 8004342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004346:	3301      	adds	r3, #1
 8004348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      decimal_part_components.integral = 1;
 800434c:	f04f 0201 	mov.w	r2, #1
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      decimal_part_components.fractional = 0;
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }
  }

  // the floored_exp10 format is "E%+03d" and largest possible floored_exp10 value for a 64-bit double
  // is "307" (for 2^1023), so we set aside 4-5 characters overall
  printf_size_t exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(floored_exp10) < 100) ? 4U : 5U;
 8004364:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <print_exponential_number+0x2ac>
 800436c:	2300      	movs	r3, #0
 800436e:	e00b      	b.n	8004388 <print_exponential_number+0x2c4>
 8004370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004374:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004378:	db05      	blt.n	8004386 <print_exponential_number+0x2c2>
 800437a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800437e:	2b63      	cmp	r3, #99	; 0x63
 8004380:	dc01      	bgt.n	8004386 <print_exponential_number+0x2c2>
 8004382:	2304      	movs	r3, #4
 8004384:	e000      	b.n	8004388 <print_exponential_number+0x2c4>
 8004386:	2305      	movs	r3, #5
 8004388:	65bb      	str	r3, [r7, #88]	; 0x58

  printf_size_t decimal_part_width =
    ((flags & FLAGS_LEFT) && exp10_part_width) ?
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f003 0302 	and.w	r3, r3, #2
      // We're padding on the right, so the width constraint is the exponent part's
      // problem, not the decimal part's, so we'll use as many characters as we need:
      0U :
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <print_exponential_number+0x2d6>
    ((flags & FLAGS_LEFT) && exp10_part_width) ?
 8004394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <print_exponential_number+0x2ea>
      // We're padding on the left; so the width constraint is the decimal part's
      // problem. Well, can both the decimal part and the exponent part fit within our overall width?
      ((width > exp10_part_width) ?
        // Yes, so we limit our decimal part's width.
        // (Note this is trivially valid even if we've fallen back to "%f" mode)
        width - exp10_part_width :
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800439e:	429a      	cmp	r2, r3
 80043a0:	d903      	bls.n	80043aa <print_exponential_number+0x2e6>
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043a6:	1ad3      	subs	r3, r2, r3
      0U :
 80043a8:	e002      	b.n	80043b0 <print_exponential_number+0x2ec>
        width - exp10_part_width :
 80043aa:	2300      	movs	r3, #0
      0U :
 80043ac:	e000      	b.n	80043b0 <print_exponential_number+0x2ec>
 80043ae:	2300      	movs	r3, #0
  printf_size_t decimal_part_width =
 80043b0:	657b      	str	r3, [r7, #84]	; 0x54
        // No; we just give up on any restriction on the decimal part and use as many
        // characters as we need
        0U);

  const printf_size_t printed_exponential_start_pos = output->pos;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	653b      	str	r3, [r7, #80]	; 0x50
  print_broken_up_decimal(decimal_part_components, output, precision, decimal_part_width, flags, buf, len);
 80043b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043bc:	9307      	str	r3, [sp, #28]
 80043be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043c2:	9306      	str	r3, [sp, #24]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	9305      	str	r3, [sp, #20]
 80043c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ca:	9304      	str	r3, [sp, #16]
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	9303      	str	r3, [sp, #12]
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	9302      	str	r3, [sp, #8]
 80043d4:	466a      	mov	r2, sp
 80043d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80043de:	e882 0003 	stmia.w	r2, {r0, r1}
 80043e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043e8:	f7ff fb54 	bl	8003a94 <print_broken_up_decimal>

  if (! fall_back_to_decimal_only_mode) {
 80043ec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80043f0:	f083 0301 	eor.w	r3, r3, #1
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d04a      	beq.n	8004490 <print_exponential_number+0x3cc>
    putchar_via_gadget(output, (flags & FLAGS_UPPERCASE) ? 'E' : 'e');
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <print_exponential_number+0x344>
 8004404:	2345      	movs	r3, #69	; 0x45
 8004406:	e000      	b.n	800440a <print_exponential_number+0x346>
 8004408:	2365      	movs	r3, #101	; 0x65
 800440a:	4619      	mov	r1, r3
 800440c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800440e:	f7fe fdc8 	bl	8002fa2 <putchar_via_gadget>
    print_integer(output,
 8004412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004416:	2b00      	cmp	r3, #0
 8004418:	dd0a      	ble.n	8004430 <print_exponential_number+0x36c>
 800441a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800441e:	17da      	asrs	r2, r3, #31
 8004420:	603b      	str	r3, [r7, #0]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	e010      	b.n	8004448 <print_exponential_number+0x384>
 8004426:	bf00      	nop
 8004428:	40240000 	.word	0x40240000
 800442c:	0800e3f8 	.word	0x0800e3f8
                  ABS_FOR_PRINTING(floored_exp10),
 8004430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004434:	17da      	asrs	r2, r3, #31
 8004436:	4698      	mov	r8, r3
 8004438:	4691      	mov	r9, r2
 800443a:	2300      	movs	r3, #0
 800443c:	f1d8 0a00 	rsbs	sl, r8, #0
 8004440:	eb63 0b09 	sbc.w	fp, r3, r9
    print_integer(output,
 8004444:	e9c7 ab00 	strd	sl, fp, [r7]
 8004448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800444c:	0fdb      	lsrs	r3, r3, #31
 800444e:	b2db      	uxtb	r3, r3
 8004450:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004452:	3a01      	subs	r2, #1
 8004454:	2105      	movs	r1, #5
 8004456:	9104      	str	r1, [sp, #16]
 8004458:	9203      	str	r2, [sp, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	9202      	str	r2, [sp, #8]
 800445e:	220a      	movs	r2, #10
 8004460:	9201      	str	r2, [sp, #4]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800446a:	f7fe ffd5 	bl	8003418 <print_integer>
                  floored_exp10 < 0, 10, 0, exp10_part_width - 1,
                FLAGS_ZEROPAD | FLAGS_PLUS);
    if (flags & FLAGS_LEFT) {
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00b      	beq.n	8004490 <print_exponential_number+0x3cc>
      // We need to right-pad with spaces to meet the width requirement
      while (output->pos - printed_exponential_start_pos < width) {
 8004478:	e003      	b.n	8004482 <print_exponential_number+0x3be>
        putchar_via_gadget(output, ' ');
 800447a:	2120      	movs	r1, #32
 800447c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800447e:	f7fe fd90 	bl	8002fa2 <putchar_via_gadget>
      while (output->pos - printed_exponential_start_pos < width) {
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	429a      	cmp	r2, r3
 800448e:	d8f4      	bhi.n	800447a <print_exponential_number+0x3b6>
      }
    }
  }
}
 8004490:	bf00      	nop
 8004492:	3794      	adds	r7, #148	; 0x94
 8004494:	46bd      	mov	sp, r7
 8004496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800449a:	bf00      	nop
 800449c:	0000      	movs	r0, r0
	...

080044a0 <print_floating_point>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_floating_point(output_gadget_t* output, double value, printf_size_t precision, printf_size_t width, printf_flags_t flags, bool prefer_exponential)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b092      	sub	sp, #72	; 0x48
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6178      	str	r0, [r7, #20]
 80044a8:	ed87 0b02 	vstr	d0, [r7, #8]
 80044ac:	6139      	str	r1, [r7, #16]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_DECIMAL_BUFFER_SIZE];
  printf_size_t len = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  // test for special values
  if (value != value) {
 80044b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044be:	f7fc fb0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <print_floating_point+0x3a>
    out_rev_(output, "nan", 3, width, flags);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2203      	movs	r2, #3
 80044d0:	4953      	ldr	r1, [pc, #332]	; (8004620 <print_floating_point+0x180>)
 80044d2:	6978      	ldr	r0, [r7, #20]
 80044d4:	f7fe fe68 	bl	80031a8 <out_rev_>
    return;
 80044d8:	e095      	b.n	8004606 <print_floating_point+0x166>
  }
  if (value < -DBL_MAX) {
 80044da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044de:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80044e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044e6:	f7fc fb01 	bl	8000aec <__aeabi_dcmplt>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <print_floating_point+0x62>
    out_rev_(output, "fni-", 4, width, flags);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2204      	movs	r2, #4
 80044f8:	494a      	ldr	r1, [pc, #296]	; (8004624 <print_floating_point+0x184>)
 80044fa:	6978      	ldr	r0, [r7, #20]
 80044fc:	f7fe fe54 	bl	80031a8 <out_rev_>
    return;
 8004500:	e081      	b.n	8004606 <print_floating_point+0x166>
  }
  if (value > DBL_MAX) {
 8004502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004506:	4b48      	ldr	r3, [pc, #288]	; (8004628 <print_floating_point+0x188>)
 8004508:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800450c:	f7fc fb0c 	bl	8000b28 <__aeabi_dcmpgt>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d016      	beq.n	8004544 <print_floating_point+0xa4>
    out_rev_(output, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <print_floating_point+0x84>
 8004520:	4942      	ldr	r1, [pc, #264]	; (800462c <print_floating_point+0x18c>)
 8004522:	e000      	b.n	8004526 <print_floating_point+0x86>
 8004524:	4942      	ldr	r1, [pc, #264]	; (8004630 <print_floating_point+0x190>)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <print_floating_point+0x94>
 8004530:	2204      	movs	r2, #4
 8004532:	e000      	b.n	8004536 <print_floating_point+0x96>
 8004534:	2203      	movs	r2, #3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6978      	ldr	r0, [r7, #20]
 800453e:	f7fe fe33 	bl	80031a8 <out_rev_>
    return;
 8004542:	e060      	b.n	8004606 <print_floating_point+0x166>
  }

  if (!prefer_exponential &&
 8004544:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004548:	f083 0301 	eor.w	r3, r3, #1
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d021      	beq.n	8004596 <print_floating_point+0xf6>
 8004552:	a32f      	add	r3, pc, #188	; (adr r3, 8004610 <print_floating_point+0x170>)
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800455c:	f7fc fae4 	bl	8000b28 <__aeabi_dcmpgt>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <print_floating_point+0xda>
      ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 8004566:	a32c      	add	r3, pc, #176	; (adr r3, 8004618 <print_floating_point+0x178>)
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004570:	f7fc fabc 	bl	8000aec <__aeabi_dcmplt>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00d      	beq.n	8004596 <print_floating_point+0xf6>
    // The required behavior of standard printf is to print _every_ integral-part digit -- which could mean
    // printing hundreds of characters, overflowing any fixed internal buffer and necessitating a more complicated
    // implementation.
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    print_exponential_number(output, value, precision, width, flags, buf, len);
 800457a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	f107 031c 	add.w	r3, r7, #28
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6939      	ldr	r1, [r7, #16]
 800458a:	ed97 0b02 	vldr	d0, [r7, #8]
 800458e:	6978      	ldr	r0, [r7, #20]
 8004590:	f7ff fd98 	bl	80040c4 <print_exponential_number>
#endif
    return;
 8004594:	e037      	b.n	8004606 <print_floating_point+0x166>
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10d      	bne.n	80045bc <print_floating_point+0x11c>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 80045a0:	2306      	movs	r3, #6
 80045a2:	613b      	str	r3, [r7, #16]
  }

  // limit precision so that our integer holding the fractional part does not overflow
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 80045a4:	e00a      	b.n	80045bc <print_floating_point+0x11c>
    buf[len++] = '0'; // This respects the precision in terms of result length only
 80045a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045ac:	3340      	adds	r3, #64	; 0x40
 80045ae:	443b      	add	r3, r7
 80045b0:	2230      	movs	r2, #48	; 0x30
 80045b2:	f803 2c24 	strb.w	r2, [r3, #-36]
    precision--;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	613b      	str	r3, [r7, #16]
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 80045bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045be:	2b1f      	cmp	r3, #31
 80045c0:	d802      	bhi.n	80045c8 <print_floating_point+0x128>
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b11      	cmp	r3, #17
 80045c6:	d8ee      	bhi.n	80045a6 <print_floating_point+0x106>
  }

#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
  if (prefer_exponential)
 80045c8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00d      	beq.n	80045ec <print_floating_point+0x14c>
    print_exponential_number(output, value, precision, width, flags, buf, len);
 80045d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d2:	9301      	str	r3, [sp, #4]
 80045d4:	f107 031c 	add.w	r3, r7, #28
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6939      	ldr	r1, [r7, #16]
 80045e0:	ed97 0b02 	vldr	d0, [r7, #8]
 80045e4:	6978      	ldr	r0, [r7, #20]
 80045e6:	f7ff fd6d 	bl	80040c4 <print_exponential_number>
 80045ea:	e00c      	b.n	8004606 <print_floating_point+0x166>
  else
#endif
    print_decimal_number(output, value, precision, width, flags, buf, len);
 80045ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ee:	9301      	str	r3, [sp, #4]
 80045f0:	f107 031c 	add.w	r3, r7, #28
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6939      	ldr	r1, [r7, #16]
 80045fc:	ed97 0b02 	vldr	d0, [r7, #8]
 8004600:	6978      	ldr	r0, [r7, #20]
 8004602:	f7ff fb6f 	bl	8003ce4 <print_decimal_number>
}
 8004606:	3740      	adds	r7, #64	; 0x40
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	f3af 8000 	nop.w
 8004610:	00000000 	.word	0x00000000
 8004614:	41cdcd65 	.word	0x41cdcd65
 8004618:	00000000 	.word	0x00000000
 800461c:	c1cdcd65 	.word	0xc1cdcd65
 8004620:	0800e3d0 	.word	0x0800e3d0
 8004624:	0800e3d4 	.word	0x0800e3d4
 8004628:	7fefffff 	.word	0x7fefffff
 800462c:	0800e3dc 	.word	0x0800e3dc
 8004630:	0800e3e4 	.word	0x0800e3e4

08004634 <parse_flags>:
#endif  // (PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS)

// Advances the format pointer past the flags, and returns the parsed flags
// due to the characters passed
static printf_flags_t parse_flags(const char** format)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  printf_flags_t flags = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  do {
    switch (**format) {
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	3b20      	subs	r3, #32
 8004648:	2b10      	cmp	r3, #16
 800464a:	d857      	bhi.n	80046fc <parse_flags+0xc8>
 800464c:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <parse_flags+0x20>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	080046d5 	.word	0x080046d5
 8004658:	080046fd 	.word	0x080046fd
 800465c:	080046fd 	.word	0x080046fd
 8004660:	080046e9 	.word	0x080046e9
 8004664:	080046fd 	.word	0x080046fd
 8004668:	080046fd 	.word	0x080046fd
 800466c:	080046fd 	.word	0x080046fd
 8004670:	080046fd 	.word	0x080046fd
 8004674:	080046fd 	.word	0x080046fd
 8004678:	080046fd 	.word	0x080046fd
 800467c:	080046fd 	.word	0x080046fd
 8004680:	080046c1 	.word	0x080046c1
 8004684:	080046fd 	.word	0x080046fd
 8004688:	080046ad 	.word	0x080046ad
 800468c:	080046fd 	.word	0x080046fd
 8004690:	080046fd 	.word	0x080046fd
 8004694:	08004699 	.word	0x08004699
      case '0': flags |= FLAGS_ZEROPAD; (*format)++; break;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e029      	b.n	8004700 <parse_flags+0xcc>
      case '-': flags |= FLAGS_LEFT;    (*format)++; break;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f043 0302 	orr.w	r3, r3, #2
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e01f      	b.n	8004700 <parse_flags+0xcc>
      case '+': flags |= FLAGS_PLUS;    (*format)++; break;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f043 0304 	orr.w	r3, r3, #4
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e015      	b.n	8004700 <parse_flags+0xcc>
      case ' ': flags |= FLAGS_SPACE;   (*format)++; break;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f043 0308 	orr.w	r3, r3, #8
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	e00b      	b.n	8004700 <parse_flags+0xcc>
      case '#': flags |= FLAGS_HASH;    (*format)++; break;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f043 0310 	orr.w	r3, r3, #16
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e001      	b.n	8004700 <parse_flags+0xcc>
      default : return flags;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	e000      	b.n	8004702 <parse_flags+0xce>
    switch (**format) {
 8004700:	e79e      	b.n	8004640 <parse_flags+0xc>
    }
  } while (true);
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop

08004710 <format_string_loop>:

static inline void format_string_loop(output_gadget_t* output, const char* format, va_list args)
{
 8004710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004714:	b0aa      	sub	sp, #168	; 0xa8
 8004716:	af06      	add	r7, sp, #24
 8004718:	64f8      	str	r0, [r7, #76]	; 0x4c
 800471a:	64b9      	str	r1, [r7, #72]	; 0x48
 800471c:	647a      	str	r2, [r7, #68]	; 0x44
#else
#define ADVANCE_IN_FORMAT_STRING(cptr_) (cptr_)++
#endif


  while (*format)
 800471e:	f000 bd04 	b.w	800512a <format_string_loop+0xa1a>
  {
    if (*format != '%') {
 8004722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b25      	cmp	r3, #37	; 0x25
 8004728:	d00a      	beq.n	8004740 <format_string_loop+0x30>
      // A regular content character
      putchar_via_gadget(output, *format);
 800472a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	4619      	mov	r1, r3
 8004730:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004732:	f7fe fc36 	bl	8002fa2 <putchar_via_gadget>
      format++;
 8004736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004738:	3301      	adds	r3, #1
 800473a:	64bb      	str	r3, [r7, #72]	; 0x48
      continue;
 800473c:	f000 bcf5 	b.w	800512a <format_string_loop+0xa1a>
    }
    // We're parsing a format specifier: %[flags][width][.precision][length]
    ADVANCE_IN_FORMAT_STRING(format);
 8004740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004742:	3301      	adds	r3, #1
 8004744:	64bb      	str	r3, [r7, #72]	; 0x48
 8004746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 84f2 	beq.w	8005134 <format_string_loop+0xa24>

    printf_flags_t flags = parse_flags(&format);
 8004750:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff ff6d 	bl	8004634 <parse_flags>
 800475a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

    // evaluate width field
    printf_size_t width = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (is_digit_(*format)) {
 8004764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe fce2 	bl	8003132 <is_digit_>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <format_string_loop+0x74>
      width = (printf_size_t) atou_(&format);
 8004774:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe fcf1 	bl	8003160 <atou_>
 800477e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8004782:	e021      	b.n	80047c8 <format_string_loop+0xb8>
    }
    else if (*format == '*') {
 8004784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b2a      	cmp	r3, #42	; 0x2a
 800478a:	d11d      	bne.n	80047c8 <format_string_loop+0xb8>
      const int w = va_arg(args, int);
 800478c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800478e:	1d13      	adds	r3, r2, #4
 8004790:	647b      	str	r3, [r7, #68]	; 0x44
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	673b      	str	r3, [r7, #112]	; 0x70
      if (w < 0) {
 8004796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004798:	2b00      	cmp	r3, #0
 800479a:	da0a      	bge.n	80047b2 <format_string_loop+0xa2>
        flags |= FLAGS_LEFT;    // reverse padding
 800479c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047a0:	f043 0302 	orr.w	r3, r3, #2
 80047a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        width = (printf_size_t)-w;
 80047a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047aa:	425b      	negs	r3, r3
 80047ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047b0:	e002      	b.n	80047b8 <format_string_loop+0xa8>
      }
      else {
        width = (printf_size_t)w;
 80047b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      ADVANCE_IN_FORMAT_STRING(format);
 80047b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ba:	3301      	adds	r3, #1
 80047bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80047be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 84b6 	beq.w	8005134 <format_string_loop+0xa24>
    }

    // evaluate precision field
    printf_size_t precision = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (*format == '.') {
 80047ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b2e      	cmp	r3, #46	; 0x2e
 80047d4:	d133      	bne.n	800483e <format_string_loop+0x12e>
      flags |= FLAGS_PRECISION;
 80047d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      ADVANCE_IN_FORMAT_STRING(format);
 80047e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e4:	3301      	adds	r3, #1
 80047e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 84a1 	beq.w	8005134 <format_string_loop+0xa24>
      if (is_digit_(*format)) {
 80047f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fc9b 	bl	8003132 <is_digit_>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <format_string_loop+0x102>
        precision = (printf_size_t) atou_(&format);
 8004802:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fcaa 	bl	8003160 <atou_>
 800480c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8004810:	e015      	b.n	800483e <format_string_loop+0x12e>
      }
      else if (*format == '*') {
 8004812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b2a      	cmp	r3, #42	; 0x2a
 8004818:	d111      	bne.n	800483e <format_string_loop+0x12e>
        const int precision_ = va_arg(args, int);
 800481a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800481c:	1d13      	adds	r3, r2, #4
 800481e:	647b      	str	r3, [r7, #68]	; 0x44
 8004820:	6813      	ldr	r3, [r2, #0]
 8004822:	66fb      	str	r3, [r7, #108]	; 0x6c
        precision = precision_ > 0 ? (printf_size_t) precision_ : 0U;
 8004824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004826:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800482a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        ADVANCE_IN_FORMAT_STRING(format);
 800482e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004830:	3301      	adds	r3, #1
 8004832:	64bb      	str	r3, [r7, #72]	; 0x48
 8004834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 847b 	beq.w	8005134 <format_string_loop+0xa24>
      }
    }

    // evaluate length field
    switch (*format) {
 800483e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	3b68      	subs	r3, #104	; 0x68
 8004844:	2b12      	cmp	r3, #18
 8004846:	f200 8096 	bhi.w	8004976 <format_string_loop+0x266>
 800484a:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <format_string_loop+0x140>)
 800484c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004850:	080048df 	.word	0x080048df
 8004854:	08004977 	.word	0x08004977
 8004858:	0800493d 	.word	0x0800493d
 800485c:	08004977 	.word	0x08004977
 8004860:	0800489d 	.word	0x0800489d
 8004864:	08004977 	.word	0x08004977
 8004868:	08004977 	.word	0x08004977
 800486c:	08004977 	.word	0x08004977
 8004870:	08004977 	.word	0x08004977
 8004874:	08004977 	.word	0x08004977
 8004878:	08004977 	.word	0x08004977
 800487c:	08004977 	.word	0x08004977
 8004880:	08004921 	.word	0x08004921
 8004884:	08004977 	.word	0x08004977
 8004888:	08004977 	.word	0x08004977
 800488c:	08004977 	.word	0x08004977
 8004890:	08004977 	.word	0x08004977
 8004894:	08004977 	.word	0x08004977
 8004898:	08004959 	.word	0x08004959
        }
        break;
      }
#endif
      case 'l' :
        flags |= FLAGS_LONG;
 800489c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        ADVANCE_IN_FORMAT_STRING(format);
 80048a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048aa:	3301      	adds	r3, #1
 80048ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 843e 	beq.w	8005134 <format_string_loop+0xa24>
        if (*format == 'l') {
 80048b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b6c      	cmp	r3, #108	; 0x6c
 80048be:	d15c      	bne.n	800497a <format_string_loop+0x26a>
          flags |= FLAGS_LONG_LONG;
 80048c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ADVANCE_IN_FORMAT_STRING(format);
 80048cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ce:	3301      	adds	r3, #1
 80048d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80048d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d14f      	bne.n	800497a <format_string_loop+0x26a>
 80048da:	f000 bc2b 	b.w	8005134 <format_string_loop+0xa24>
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
 80048de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        ADVANCE_IN_FORMAT_STRING(format);
 80048ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ec:	3301      	adds	r3, #1
 80048ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 841d 	beq.w	8005134 <format_string_loop+0xa24>
        if (*format == 'h') {
 80048fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b68      	cmp	r3, #104	; 0x68
 8004900:	d13d      	bne.n	800497e <format_string_loop+0x26e>
          flags |= FLAGS_CHAR;
 8004902:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800490a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ADVANCE_IN_FORMAT_STRING(format);
 800490e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004910:	3301      	adds	r3, #1
 8004912:	64bb      	str	r3, [r7, #72]	; 0x48
 8004914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d130      	bne.n	800497e <format_string_loop+0x26e>
 800491c:	f000 bc0a 	b.w	8005134 <format_string_loop+0xa24>
        }
        break;
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004928:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        ADVANCE_IN_FORMAT_STRING(format);
 800492c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492e:	3301      	adds	r3, #1
 8004930:	64bb      	str	r3, [r7, #72]	; 0x48
 8004932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d123      	bne.n	8004982 <format_string_loop+0x272>
 800493a:	e3fb      	b.n	8005134 <format_string_loop+0xa24>
        break;
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800493c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        ADVANCE_IN_FORMAT_STRING(format);
 8004948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800494a:	3301      	adds	r3, #1
 800494c:	64bb      	str	r3, [r7, #72]	; 0x48
 800494e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d117      	bne.n	8004986 <format_string_loop+0x276>
 8004956:	e3ed      	b.n	8005134 <format_string_loop+0xa24>
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004958:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800495c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004960:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        ADVANCE_IN_FORMAT_STRING(format);
 8004964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004966:	3301      	adds	r3, #1
 8004968:	64bb      	str	r3, [r7, #72]	; 0x48
 800496a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 83e0 	beq.w	8005134 <format_string_loop+0xa24>
        break;
 8004974:	e008      	b.n	8004988 <format_string_loop+0x278>
      default:
        break;
 8004976:	bf00      	nop
 8004978:	e006      	b.n	8004988 <format_string_loop+0x278>
        break;
 800497a:	bf00      	nop
 800497c:	e004      	b.n	8004988 <format_string_loop+0x278>
        break;
 800497e:	bf00      	nop
 8004980:	e002      	b.n	8004988 <format_string_loop+0x278>
        break;
 8004982:	bf00      	nop
 8004984:	e000      	b.n	8004988 <format_string_loop+0x278>
        break;
 8004986:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8004988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	3b25      	subs	r3, #37	; 0x25
 800498e:	2b53      	cmp	r3, #83	; 0x53
 8004990:	f200 83c1 	bhi.w	8005116 <format_string_loop+0xa06>
 8004994:	a201      	add	r2, pc, #4	; (adr r2, 800499c <format_string_loop+0x28c>)
 8004996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499a:	bf00      	nop
 800499c:	0800506d 	.word	0x0800506d
 80049a0:	08005117 	.word	0x08005117
 80049a4:	08005117 	.word	0x08005117
 80049a8:	08005117 	.word	0x08005117
 80049ac:	08005117 	.word	0x08005117
 80049b0:	08005117 	.word	0x08005117
 80049b4:	08005117 	.word	0x08005117
 80049b8:	08005117 	.word	0x08005117
 80049bc:	08005117 	.word	0x08005117
 80049c0:	08005117 	.word	0x08005117
 80049c4:	08005117 	.word	0x08005117
 80049c8:	08005117 	.word	0x08005117
 80049cc:	08005117 	.word	0x08005117
 80049d0:	08005117 	.word	0x08005117
 80049d4:	08005117 	.word	0x08005117
 80049d8:	08005117 	.word	0x08005117
 80049dc:	08005117 	.word	0x08005117
 80049e0:	08005117 	.word	0x08005117
 80049e4:	08005117 	.word	0x08005117
 80049e8:	08005117 	.word	0x08005117
 80049ec:	08005117 	.word	0x08005117
 80049f0:	08005117 	.word	0x08005117
 80049f4:	08005117 	.word	0x08005117
 80049f8:	08005117 	.word	0x08005117
 80049fc:	08005117 	.word	0x08005117
 8004a00:	08005117 	.word	0x08005117
 8004a04:	08005117 	.word	0x08005117
 8004a08:	08005117 	.word	0x08005117
 8004a0c:	08005117 	.word	0x08005117
 8004a10:	08005117 	.word	0x08005117
 8004a14:	08005117 	.word	0x08005117
 8004a18:	08005117 	.word	0x08005117
 8004a1c:	08004e43 	.word	0x08004e43
 8004a20:	08004df7 	.word	0x08004df7
 8004a24:	08004e43 	.word	0x08004e43
 8004a28:	08005117 	.word	0x08005117
 8004a2c:	08005117 	.word	0x08005117
 8004a30:	08005117 	.word	0x08005117
 8004a34:	08005117 	.word	0x08005117
 8004a38:	08005117 	.word	0x08005117
 8004a3c:	08005117 	.word	0x08005117
 8004a40:	08005117 	.word	0x08005117
 8004a44:	08005117 	.word	0x08005117
 8004a48:	08005117 	.word	0x08005117
 8004a4c:	08005117 	.word	0x08005117
 8004a50:	08005117 	.word	0x08005117
 8004a54:	08005117 	.word	0x08005117
 8004a58:	08005117 	.word	0x08005117
 8004a5c:	08005117 	.word	0x08005117
 8004a60:	08005117 	.word	0x08005117
 8004a64:	08005117 	.word	0x08005117
 8004a68:	08004aed 	.word	0x08004aed
 8004a6c:	08005117 	.word	0x08005117
 8004a70:	08005117 	.word	0x08005117
 8004a74:	08005117 	.word	0x08005117
 8004a78:	08005117 	.word	0x08005117
 8004a7c:	08005117 	.word	0x08005117
 8004a80:	08005117 	.word	0x08005117
 8004a84:	08005117 	.word	0x08005117
 8004a88:	08005117 	.word	0x08005117
 8004a8c:	08005117 	.word	0x08005117
 8004a90:	08004aed 	.word	0x08004aed
 8004a94:	08004eb3 	.word	0x08004eb3
 8004a98:	08004aed 	.word	0x08004aed
 8004a9c:	08004e43 	.word	0x08004e43
 8004aa0:	08004df7 	.word	0x08004df7
 8004aa4:	08004e43 	.word	0x08004e43
 8004aa8:	08005117 	.word	0x08005117
 8004aac:	08004aed 	.word	0x08004aed
 8004ab0:	08005117 	.word	0x08005117
 8004ab4:	08005117 	.word	0x08005117
 8004ab8:	08005117 	.word	0x08005117
 8004abc:	08005117 	.word	0x08005117
 8004ac0:	0800507d 	.word	0x0800507d
 8004ac4:	08004aed 	.word	0x08004aed
 8004ac8:	08004ffd 	.word	0x08004ffd
 8004acc:	08005117 	.word	0x08005117
 8004ad0:	08005117 	.word	0x08005117
 8004ad4:	08004f19 	.word	0x08004f19
 8004ad8:	08005117 	.word	0x08005117
 8004adc:	08004aed 	.word	0x08004aed
 8004ae0:	08005117 	.word	0x08005117
 8004ae4:	08005117 	.word	0x08005117
 8004ae8:	08004aed 	.word	0x08004aed
      case 'x' :
      case 'X' :
      case 'o' :
      case 'b' : {

        if (*format == 'd' || *format == 'i') {
 8004aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b64      	cmp	r3, #100	; 0x64
 8004af2:	d003      	beq.n	8004afc <format_string_loop+0x3ec>
 8004af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b69      	cmp	r3, #105	; 0x69
 8004afa:	d105      	bne.n	8004b08 <format_string_loop+0x3f8>
          flags |= FLAGS_SIGNED;
 8004afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        numeric_base_t base;
        if (*format == 'x' || *format == 'X') {
 8004b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b78      	cmp	r3, #120	; 0x78
 8004b0e:	d003      	beq.n	8004b18 <format_string_loop+0x408>
 8004b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b58      	cmp	r3, #88	; 0x58
 8004b16:	d103      	bne.n	8004b20 <format_string_loop+0x410>
          base = BASE_HEX;
 8004b18:	2310      	movs	r3, #16
 8004b1a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8004b1e:	e018      	b.n	8004b52 <format_string_loop+0x442>
        }
        else if (*format == 'o') {
 8004b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b6f      	cmp	r3, #111	; 0x6f
 8004b26:	d103      	bne.n	8004b30 <format_string_loop+0x420>
          base =  BASE_OCTAL;
 8004b28:	2308      	movs	r3, #8
 8004b2a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8004b2e:	e010      	b.n	8004b52 <format_string_loop+0x442>
        }
        else if (*format == 'b') {
 8004b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b62      	cmp	r3, #98	; 0x62
 8004b36:	d103      	bne.n	8004b40 <format_string_loop+0x430>
          base =  BASE_BINARY;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8004b3e:	e008      	b.n	8004b52 <format_string_loop+0x442>
        }
        else {
          base = BASE_DECIMAL;
 8004b40:	230a      	movs	r3, #10
 8004b42:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
          flags &= ~FLAGS_HASH; // decimal integers have no alternative presentation
 8004b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b4a:	f023 0310 	bic.w	r3, r3, #16
 8004b4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        if (*format == 'X') {
 8004b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b58      	cmp	r3, #88	; 0x58
 8004b58:	d105      	bne.n	8004b66 <format_string_loop+0x456>
          flags |= FLAGS_UPPERCASE;
 8004b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b5e:	f043 0320 	orr.w	r3, r3, #32
 8004b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        format++;
 8004b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b68:	3301      	adds	r3, #1
 8004b6a:	64bb      	str	r3, [r7, #72]	; 0x48
        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <format_string_loop+0x474>
          flags &= ~FLAGS_ZEROPAD;
 8004b78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        if (flags & FLAGS_SIGNED) {
 8004b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80b3 	beq.w	8004cf8 <format_string_loop+0x5e8>
          // A signed specifier: d, i or possibly I + bit size if enabled

          if (flags & FLAGS_LONG_LONG) {
 8004b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d02e      	beq.n	8004bfc <format_string_loop+0x4ec>
#if PRINTF_SUPPORT_LONG_LONG
            const long long value = va_arg(args, long long);
 8004b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba0:	3307      	adds	r3, #7
 8004ba2:	f023 0207 	bic.w	r2, r3, #7
 8004ba6:	f102 0308 	add.w	r3, r2, #8
 8004baa:	647b      	str	r3, [r7, #68]	; 0x44
 8004bac:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004bb0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8004bb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	da07      	bge.n	8004bcc <format_string_loop+0x4bc>
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4250      	negs	r0, r2
 8004bc0:	6038      	str	r0, [r7, #0]
 8004bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8004bc6:	607b      	str	r3, [r7, #4]
 8004bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd2:	0fdb      	lsrs	r3, r3, #31
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bda:	9304      	str	r3, [sp, #16]
 8004bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004be0:	9303      	str	r3, [sp, #12]
 8004be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004be6:	9302      	str	r3, [sp, #8]
 8004be8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004bec:	9301      	str	r3, [sp, #4]
 8004bee:	9200      	str	r2, [sp, #0]
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004bf6:	f7fe fc0f 	bl	8003418 <print_integer>
 8004bfa:	e296      	b.n	800512a <format_string_loop+0xa1a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d02d      	beq.n	8004c64 <format_string_loop+0x554>
            const long value = va_arg(args, long);
 8004c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c0a:	1d13      	adds	r3, r2, #4
 8004c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0e:	6813      	ldr	r3, [r2, #0]
 8004c10:	65fb      	str	r3, [r7, #92]	; 0x5c
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8004c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	dd04      	ble.n	8004c22 <format_string_loop+0x512>
 8004c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c1a:	17da      	asrs	r2, r3, #31
 8004c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c1e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c20:	e00a      	b.n	8004c38 <format_string_loop+0x528>
 8004c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c24:	17da      	asrs	r2, r3, #31
 8004c26:	461c      	mov	r4, r3
 8004c28:	4615      	mov	r5, r2
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f1d4 0a00 	rsbs	sl, r4, #0
 8004c30:	eb63 0b05 	sbc.w	fp, r3, r5
 8004c34:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
 8004c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c3a:	0fdb      	lsrs	r3, r3, #31
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c42:	9304      	str	r3, [sp, #16]
 8004c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c48:	9303      	str	r3, [sp, #12]
 8004c4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c4e:	9302      	str	r3, [sp, #8]
 8004c50:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	9200      	str	r2, [sp, #0]
 8004c58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c5c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004c5e:	f7fe fbdb 	bl	8003418 <print_integer>
 8004c62:	e262      	b.n	800512a <format_string_loop+0xa1a>
            // We never try to interpret the argument as something potentially-smaller than int,
            // due to integer promotion rules: Even if the user passed a short int, short unsigned
            // etc. - these will come in after promotion, as int's (or unsigned for the case of
            // short unsigned when it has the same size as int)
            const int value =
              (flags & FLAGS_CHAR) ? (signed char) va_arg(args, int) :
 8004c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <format_string_loop+0x56c>
 8004c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c72:	1d13      	adds	r3, r2, #4
 8004c74:	647b      	str	r3, [r7, #68]	; 0x44
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	b25b      	sxtb	r3, r3
 8004c7a:	e00f      	b.n	8004c9c <format_string_loop+0x58c>
              (flags & FLAGS_SHORT) ? (short int) va_arg(args, int) :
 8004c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <format_string_loop+0x584>
 8004c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c8a:	1d13      	adds	r3, r2, #4
 8004c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c8e:	6813      	ldr	r3, [r2, #0]
 8004c90:	b21b      	sxth	r3, r3
 8004c92:	e003      	b.n	8004c9c <format_string_loop+0x58c>
 8004c94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c96:	1d13      	adds	r3, r2, #4
 8004c98:	647b      	str	r3, [r7, #68]	; 0x44
 8004c9a:	6813      	ldr	r3, [r2, #0]
            const int value =
 8004c9c:	663b      	str	r3, [r7, #96]	; 0x60
              va_arg(args, int);
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8004c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	dd04      	ble.n	8004cae <format_string_loop+0x59e>
 8004ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ca6:	17da      	asrs	r2, r3, #31
 8004ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8004caa:	637a      	str	r2, [r7, #52]	; 0x34
 8004cac:	e00e      	b.n	8004ccc <format_string_loop+0x5bc>
 8004cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cb0:	17da      	asrs	r2, r3, #31
 8004cb2:	4698      	mov	r8, r3
 8004cb4:	4691      	mov	r9, r2
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f1d8 0200 	rsbs	r2, r8, #0
 8004cbc:	62ba      	str	r2, [r7, #40]	; 0x28
 8004cbe:	eb63 0309 	sbc.w	r3, r3, r9
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cc8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cce:	0fdb      	lsrs	r3, r3, #31
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cd6:	9304      	str	r3, [sp, #16]
 8004cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cdc:	9303      	str	r3, [sp, #12]
 8004cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ce2:	9302      	str	r3, [sp, #8]
 8004ce4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004ce8:	9301      	str	r3, [sp, #4]
 8004cea:	9200      	str	r2, [sp, #0]
 8004cec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cf0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004cf2:	f7fe fb91 	bl	8003418 <print_integer>
 8004cf6:	e218      	b.n	800512a <format_string_loop+0xa1a>
          }
        }
        else {
          // An unsigned specifier: u, x, X, o, b

          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cfc:	f023 030c 	bic.w	r3, r3, #12
 8004d00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

          if (flags & FLAGS_LONG_LONG) {
 8004d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01c      	beq.n	8004d4a <format_string_loop+0x63a>
#if PRINTF_SUPPORT_LONG_LONG
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long long), false, base, precision, width, flags);
 8004d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d12:	3307      	adds	r3, #7
 8004d14:	f023 0207 	bic.w	r2, r3, #7
 8004d18:	f102 0308 	add.w	r3, r2, #8
 8004d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d1e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d26:	9304      	str	r3, [sp, #16]
 8004d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d2c:	9303      	str	r3, [sp, #12]
 8004d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d32:	9302      	str	r3, [sp, #8]
 8004d34:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d44:	f7fe fb68 	bl	8003418 <print_integer>
 8004d48:	e1ef      	b.n	800512a <format_string_loop+0xa1a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01a      	beq.n	8004d8c <format_string_loop+0x67c>
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long), false, base, precision, width, flags);
 8004d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d58:	1d13      	adds	r3, r2, #4
 8004d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d5c:	6813      	ldr	r3, [r2, #0]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	623b      	str	r3, [r7, #32]
 8004d62:	627a      	str	r2, [r7, #36]	; 0x24
 8004d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d68:	9304      	str	r3, [sp, #16]
 8004d6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d6e:	9303      	str	r3, [sp, #12]
 8004d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d74:	9302      	str	r3, [sp, #8]
 8004d76:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004d7a:	9301      	str	r3, [sp, #4]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d84:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d86:	f7fe fb47 	bl	8003418 <print_integer>
 8004d8a:	e1ce      	b.n	800512a <format_string_loop+0xa1a>
          }
          else {
            const unsigned int value =
              (flags & FLAGS_CHAR) ? (unsigned char)va_arg(args, unsigned int) :
 8004d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <format_string_loop+0x694>
 8004d98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d9a:	1d13      	adds	r3, r2, #4
 8004d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d9e:	6813      	ldr	r3, [r2, #0]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	e00f      	b.n	8004dc4 <format_string_loop+0x6b4>
              (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
 8004da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <format_string_loop+0x6ac>
 8004db0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004db2:	1d13      	adds	r3, r2, #4
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
 8004db6:	6813      	ldr	r3, [r2, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	e003      	b.n	8004dc4 <format_string_loop+0x6b4>
 8004dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dbe:	1d13      	adds	r3, r2, #4
 8004dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc2:	6813      	ldr	r3, [r2, #0]
            const unsigned int value =
 8004dc4:	667b      	str	r3, [r7, #100]	; 0x64
              va_arg(args, unsigned int);
            print_integer(output, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 8004dc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dc8:	2200      	movs	r2, #0
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	61fa      	str	r2, [r7, #28]
 8004dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dd2:	9304      	str	r3, [sp, #16]
 8004dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dd8:	9303      	str	r3, [sp, #12]
 8004dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dde:	9302      	str	r3, [sp, #8]
 8004de0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	2300      	movs	r3, #0
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004df0:	f7fe fb12 	bl	8003418 <print_integer>
          }
        }
        break;
 8004df4:	e199      	b.n	800512a <format_string_loop+0xa1a>
      }
#if PRINTF_SUPPORT_DECIMAL_SPECIFIERS
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b46      	cmp	r3, #70	; 0x46
 8004dfc:	d105      	bne.n	8004e0a <format_string_loop+0x6fa>
 8004dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e02:	f043 0320 	orr.w	r3, r3, #32
 8004e06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8004e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e0c:	3307      	adds	r3, #7
 8004e0e:	f023 0207 	bic.w	r2, r3, #7
 8004e12:	f102 0308 	add.w	r3, r2, #8
 8004e16:	647b      	str	r3, [r7, #68]	; 0x44
 8004e18:	ed92 7b00 	vldr	d7, [r2]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004e28:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004e2c:	eeb0 0a47 	vmov.f32	s0, s14
 8004e30:	eef0 0a67 	vmov.f32	s1, s15
 8004e34:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004e36:	f7ff fb33 	bl	80044a0 <print_floating_point>
        format++;
 8004e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	64bb      	str	r3, [r7, #72]	; 0x48
        break;
 8004e40:	e173      	b.n	800512a <format_string_loop+0xa1a>
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b67      	cmp	r3, #103	; 0x67
 8004e48:	d003      	beq.n	8004e52 <format_string_loop+0x742>
 8004e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b47      	cmp	r3, #71	; 0x47
 8004e50:	d105      	bne.n	8004e5e <format_string_loop+0x74e>
 8004e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b45      	cmp	r3, #69	; 0x45
 8004e64:	d003      	beq.n	8004e6e <format_string_loop+0x75e>
 8004e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b47      	cmp	r3, #71	; 0x47
 8004e6c:	d105      	bne.n	8004e7a <format_string_loop+0x76a>
 8004e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e72:	f043 0320 	orr.w	r3, r3, #32
 8004e76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
 8004e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7c:	3307      	adds	r3, #7
 8004e7e:	f023 0207 	bic.w	r2, r3, #7
 8004e82:	f102 0308 	add.w	r3, r2, #8
 8004e86:	647b      	str	r3, [r7, #68]	; 0x44
 8004e88:	ed92 7b00 	vldr	d7, [r2]
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e94:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004e98:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004e9c:	eeb0 0a47 	vmov.f32	s0, s14
 8004ea0:	eef0 0a67 	vmov.f32	s1, s15
 8004ea4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004ea6:	f7ff fafb 	bl	80044a0 <print_floating_point>
        format++;
 8004eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eac:	3301      	adds	r3, #1
 8004eae:	64bb      	str	r3, [r7, #72]	; 0x48
        break;
 8004eb0:	e13b      	b.n	800512a <format_string_loop+0xa1a>
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'c' : {
        printf_size_t l = 1U;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10b      	bne.n	8004eda <format_string_loop+0x7ca>
          while (l++ < width) {
 8004ec2:	e003      	b.n	8004ecc <format_string_loop+0x7bc>
            putchar_via_gadget(output, ' ');
 8004ec4:	2120      	movs	r1, #32
 8004ec6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004ec8:	f7fe f86b 	bl	8002fa2 <putchar_via_gadget>
          while (l++ < width) {
 8004ecc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004ece:	1c53      	adds	r3, r2, #1
 8004ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ed2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d8f4      	bhi.n	8004ec4 <format_string_loop+0x7b4>
          }
        }
        // char output
        putchar_via_gadget(output, (char) va_arg(args, int) );
 8004eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004edc:	1d13      	adds	r3, r2, #4
 8004ede:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee0:	6813      	ldr	r3, [r2, #0]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004ee8:	f7fe f85b 	bl	8002fa2 <putchar_via_gadget>
        // post padding
        if (flags & FLAGS_LEFT) {
 8004eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00b      	beq.n	8004f10 <format_string_loop+0x800>
          while (l++ < width) {
 8004ef8:	e003      	b.n	8004f02 <format_string_loop+0x7f2>
            putchar_via_gadget(output, ' ');
 8004efa:	2120      	movs	r1, #32
 8004efc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004efe:	f7fe f850 	bl	8002fa2 <putchar_via_gadget>
          while (l++ < width) {
 8004f02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004f04:	1c53      	adds	r3, r2, #1
 8004f06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d8f4      	bhi.n	8004efa <format_string_loop+0x7ea>
          }
        }
        format++;
 8004f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f12:	3301      	adds	r3, #1
 8004f14:	64bb      	str	r3, [r7, #72]	; 0x48
        break;
 8004f16:	e108      	b.n	800512a <format_string_loop+0xa1a>
      }

      case 's' : {
        const char* p = va_arg(args, char*);
 8004f18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f1a:	1d13      	adds	r3, r2, #4
 8004f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f1e:	6813      	ldr	r3, [r2, #0]
 8004f20:	67bb      	str	r3, [r7, #120]	; 0x78
        if (p == NULL) {
 8004f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <format_string_loop+0x82e>
          out_rev_(output, ")llun(", 6, width, flags);
 8004f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f32:	2206      	movs	r2, #6
 8004f34:	4981      	ldr	r1, [pc, #516]	; (800513c <format_string_loop+0xa2c>)
 8004f36:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004f38:	f7fe f936 	bl	80031a8 <out_rev_>
 8004f3c:	e05a      	b.n	8004ff4 <format_string_loop+0x8e4>
        }
        else {
          printf_size_t l = strnlen_s_(p, precision ? precision : PRINTF_MAX_POSSIBLE_BUFFER_SIZE);
 8004f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <format_string_loop+0x83c>
 8004f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f4a:	e001      	b.n	8004f50 <format_string_loop+0x840>
 8004f4c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004f50:	4619      	mov	r1, r3
 8004f52:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004f54:	f7fe f8d0 	bl	80030f8 <strnlen_s_>
 8004f58:	6778      	str	r0, [r7, #116]	; 0x74
          // pre padding
          if (flags & FLAGS_PRECISION) {
 8004f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d006      	beq.n	8004f74 <format_string_loop+0x864>
            l = (l < precision ? l : precision);
 8004f66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	bf28      	it	cs
 8004f70:	4613      	movcs	r3, r2
 8004f72:	677b      	str	r3, [r7, #116]	; 0x74
          }
          if (!(flags & FLAGS_LEFT)) {
 8004f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d119      	bne.n	8004fb4 <format_string_loop+0x8a4>
            while (l++ < width) {
 8004f80:	e003      	b.n	8004f8a <format_string_loop+0x87a>
              putchar_via_gadget(output, ' ');
 8004f82:	2120      	movs	r1, #32
 8004f84:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004f86:	f7fe f80c 	bl	8002fa2 <putchar_via_gadget>
            while (l++ < width) {
 8004f8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f8c:	1c53      	adds	r3, r2, #1
 8004f8e:	677b      	str	r3, [r7, #116]	; 0x74
 8004f90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d8f4      	bhi.n	8004f82 <format_string_loop+0x872>
            }
          }
          // string output
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 8004f98:	e00c      	b.n	8004fb4 <format_string_loop+0x8a4>
            putchar_via_gadget(output, *(p++));
 8004f9a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f9c:	1c53      	adds	r3, r2, #1
 8004f9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fa0:	7813      	ldrb	r3, [r2, #0]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004fa6:	f7fd fffc 	bl	8002fa2 <putchar_via_gadget>
            --precision;
 8004faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 8004fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <format_string_loop+0x8c0>
 8004fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0e8      	beq.n	8004f9a <format_string_loop+0x88a>
 8004fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e4      	bne.n	8004f9a <format_string_loop+0x88a>
          }
          // post padding
          if (flags & FLAGS_LEFT) {
 8004fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00b      	beq.n	8004ff4 <format_string_loop+0x8e4>
            while (l++ < width) {
 8004fdc:	e003      	b.n	8004fe6 <format_string_loop+0x8d6>
              putchar_via_gadget(output, ' ');
 8004fde:	2120      	movs	r1, #32
 8004fe0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004fe2:	f7fd ffde 	bl	8002fa2 <putchar_via_gadget>
            while (l++ < width) {
 8004fe6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004fe8:	1c53      	adds	r3, r2, #1
 8004fea:	677b      	str	r3, [r7, #116]	; 0x74
 8004fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d8f4      	bhi.n	8004fde <format_string_loop+0x8ce>
            }
          }
        }
        format++;
 8004ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	64bb      	str	r3, [r7, #72]	; 0x48
        break;
 8004ffa:	e096      	b.n	800512a <format_string_loop+0xa1a>
      }

      case 'p' : {
        width = sizeof(void*) * 2U + 2; // 2 hex chars per byte + the "0x" prefix
 8004ffc:	230a      	movs	r3, #10
 8004ffe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 8005002:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005006:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        uintptr_t value = (uintptr_t)va_arg(args, void*);
 8005012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005014:	1d13      	adds	r3, r2, #4
 8005016:	647b      	str	r3, [r7, #68]	; 0x44
 8005018:	6813      	ldr	r3, [r2, #0]
 800501a:	66bb      	str	r3, [r7, #104]	; 0x68
        (value == (uintptr_t) NULL) ?
          out_rev_(output, ")lin(", 5, width, flags) :
 800501c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <format_string_loop+0x928>
 8005022:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800502c:	2205      	movs	r2, #5
 800502e:	4944      	ldr	r1, [pc, #272]	; (8005140 <format_string_loop+0xa30>)
 8005030:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005032:	f7fe f8b9 	bl	80031a8 <out_rev_>
 8005036:	e015      	b.n	8005064 <format_string_loop+0x954>
          print_integer(output, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 8005038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800503a:	2200      	movs	r2, #0
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	617a      	str	r2, [r7, #20]
 8005040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005044:	9304      	str	r3, [sp, #16]
 8005046:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800504a:	9303      	str	r3, [sp, #12]
 800504c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005050:	9302      	str	r3, [sp, #8]
 8005052:	2310      	movs	r3, #16
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	2300      	movs	r3, #0
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800505e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005060:	f7fe f9da 	bl	8003418 <print_integer>
        format++;
 8005064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005066:	3301      	adds	r3, #1
 8005068:	64bb      	str	r3, [r7, #72]	; 0x48
        break;
 800506a:	e05e      	b.n	800512a <format_string_loop+0xa1a>
      }

      case '%' :
        putchar_via_gadget(output, '%');
 800506c:	2125      	movs	r1, #37	; 0x25
 800506e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005070:	f7fd ff97 	bl	8002fa2 <putchar_via_gadget>
        format++;
 8005074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005076:	3301      	adds	r3, #1
 8005078:	64bb      	str	r3, [r7, #72]	; 0x48
        break;
 800507a:	e056      	b.n	800512a <format_string_loop+0xa1a>
      // Many people prefer to disable support for %n, as it lets the caller
      // engineer a write to an arbitrary location, of a value the caller
      // effectively controls - which could be a security concern in some cases.
#if PRINTF_SUPPORT_WRITEBACK_SPECIFIER
      case 'n' : {
        if       (flags & FLAGS_CHAR)      *(va_arg(args, char*))      = (char) output->pos;
 800507c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <format_string_loop+0x98a>
 8005088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508a:	68d9      	ldr	r1, [r3, #12]
 800508c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800508e:	1d13      	adds	r3, r2, #4
 8005090:	647b      	str	r3, [r7, #68]	; 0x44
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	b2cb      	uxtb	r3, r1
 8005096:	7013      	strb	r3, [r2, #0]
 8005098:	e039      	b.n	800510e <format_string_loop+0x9fe>
        else if  (flags & FLAGS_SHORT)     *(va_arg(args, short*))     = (short) output->pos;
 800509a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <format_string_loop+0x9a8>
 80050a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a8:	68d9      	ldr	r1, [r3, #12]
 80050aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ac:	1d13      	adds	r3, r2, #4
 80050ae:	647b      	str	r3, [r7, #68]	; 0x44
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	b20b      	sxth	r3, r1
 80050b4:	8013      	strh	r3, [r2, #0]
 80050b6:	e02a      	b.n	800510e <format_string_loop+0x9fe>
        else if  (flags & FLAGS_LONG)      *(va_arg(args, long*))      = (long) output->pos;
 80050b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d008      	beq.n	80050d6 <format_string_loop+0x9c6>
 80050c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c6:	68d9      	ldr	r1, [r3, #12]
 80050c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ca:	1d13      	adds	r3, r2, #4
 80050cc:	647b      	str	r3, [r7, #68]	; 0x44
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	460b      	mov	r3, r1
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	e01b      	b.n	800510e <format_string_loop+0x9fe>
#if PRINTF_SUPPORT_LONG_LONG
        else if  (flags & FLAGS_LONG_LONG) *(va_arg(args, long long*)) = (long long int) output->pos;
 80050d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00d      	beq.n	80050fe <format_string_loop+0x9ee>
 80050e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e4:	68d9      	ldr	r1, [r3, #12]
 80050e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e8:	1d13      	adds	r3, r2, #4
 80050ea:	647b      	str	r3, [r7, #68]	; 0x44
 80050ec:	6813      	ldr	r3, [r2, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	60fa      	str	r2, [r7, #12]
 80050f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050f8:	e9c3 1200 	strd	r1, r2, [r3]
 80050fc:	e007      	b.n	800510e <format_string_loop+0x9fe>
#endif // PRINTF_SUPPORT_LONG_LONG
        else                               *(va_arg(args, int*))       = (int) output->pos;
 80050fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005100:	68d9      	ldr	r1, [r3, #12]
 8005102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005104:	1d13      	adds	r3, r2, #4
 8005106:	647b      	str	r3, [r7, #68]	; 0x44
 8005108:	6812      	ldr	r2, [r2, #0]
 800510a:	460b      	mov	r3, r1
 800510c:	6013      	str	r3, [r2, #0]
        format++;
 800510e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005110:	3301      	adds	r3, #1
 8005112:	64bb      	str	r3, [r7, #72]	; 0x48
        break;
 8005114:	e009      	b.n	800512a <format_string_loop+0xa1a>
      }
#endif // PRINTF_SUPPORT_WRITEBACK_SPECIFIER

      default :
        putchar_via_gadget(output, *format);
 8005116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	4619      	mov	r1, r3
 800511c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800511e:	f7fd ff40 	bl	8002fa2 <putchar_via_gadget>
        format++;
 8005122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005124:	3301      	adds	r3, #1
 8005126:	64bb      	str	r3, [r7, #72]	; 0x48
        break;
 8005128:	bf00      	nop
  while (*format)
 800512a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	f47f aaf7 	bne.w	8004722 <format_string_loop+0x12>
    }
  }
}
 8005134:	3790      	adds	r7, #144	; 0x90
 8005136:	46bd      	mov	sp, r7
 8005138:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800513c:	0800e3e8 	.word	0x0800e3e8
 8005140:	0800e3f0 	.word	0x0800e3f0

08005144 <vsnprintf_impl>:

// internal vsnprintf - used for implementing _all library functions
static int vsnprintf_impl(output_gadget_t* output, const char* format, va_list args)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  // Note: The library only calls vsnprintf_impl() with output->pos being 0. However, it is
  // possible to call this function with a non-zero pos value for some "remedial printing".
  format_string_loop(output, format, args);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f7ff fadb 	bl	8004710 <format_string_loop>

  // termination
  append_termination_with_gadget(output);
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7fd ff49 	bl	8002ff2 <append_termination_with_gadget>

  // return written chars without terminating \0
  return (int)output->pos;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68db      	ldr	r3, [r3, #12]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <vprintf_>:

///////////////////////////////////////////////////////////////////////////////

int vprintf_(const char* format, va_list arg)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  output_gadget_t gadget = extern_putchar_gadget();
 8005176:	f107 030c 	add.w	r3, r7, #12
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd ffac 	bl	80030d8 <extern_putchar_gadget>
  return vsnprintf_impl(&gadget, format, arg);
 8005180:	f107 030c 	add.w	r3, r7, #12
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff ffdb 	bl	8005144 <vsnprintf_impl>
 800518e:	4603      	mov	r3, r0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <printf_>:
  output_gadget_t gadget = function_gadget(out, extra_arg);
  return vsnprintf_impl(&gadget, format, arg);
}

int printf_(const char* format, ...)
{
 8005198:	b40f      	push	{r0, r1, r2, r3}
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 80051a0:	f107 0314 	add.w	r3, r7, #20
 80051a4:	603b      	str	r3, [r7, #0]
  const int ret = vprintf_(format, args);
 80051a6:	6839      	ldr	r1, [r7, #0]
 80051a8:	6938      	ldr	r0, [r7, #16]
 80051aa:	f7ff ffdf 	bl	800516c <vprintf_>
 80051ae:	6078      	str	r0, [r7, #4]
  va_end(args);
  return ret;
 80051b0:	687b      	ldr	r3, [r7, #4]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051bc:	b004      	add	sp, #16
 80051be:	4770      	bx	lr

080051c0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80051c4:	4b17      	ldr	r3, [pc, #92]	; (8005224 <MX_SPI5_Init+0x64>)
 80051c6:	4a18      	ldr	r2, [pc, #96]	; (8005228 <MX_SPI5_Init+0x68>)
 80051c8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80051ca:	4b16      	ldr	r3, [pc, #88]	; (8005224 <MX_SPI5_Init+0x64>)
 80051cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80051d0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80051d2:	4b14      	ldr	r3, [pc, #80]	; (8005224 <MX_SPI5_Init+0x64>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80051d8:	4b12      	ldr	r3, [pc, #72]	; (8005224 <MX_SPI5_Init+0x64>)
 80051da:	2200      	movs	r2, #0
 80051dc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80051de:	4b11      	ldr	r3, [pc, #68]	; (8005224 <MX_SPI5_Init+0x64>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <MX_SPI5_Init+0x64>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80051ea:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <MX_SPI5_Init+0x64>)
 80051ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051f0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80051f2:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <MX_SPI5_Init+0x64>)
 80051f4:	2218      	movs	r2, #24
 80051f6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80051f8:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <MX_SPI5_Init+0x64>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80051fe:	4b09      	ldr	r3, [pc, #36]	; (8005224 <MX_SPI5_Init+0x64>)
 8005200:	2200      	movs	r2, #0
 8005202:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005204:	4b07      	ldr	r3, [pc, #28]	; (8005224 <MX_SPI5_Init+0x64>)
 8005206:	2200      	movs	r2, #0
 8005208:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800520a:	4b06      	ldr	r3, [pc, #24]	; (8005224 <MX_SPI5_Init+0x64>)
 800520c:	220a      	movs	r2, #10
 800520e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8005210:	4804      	ldr	r0, [pc, #16]	; (8005224 <MX_SPI5_Init+0x64>)
 8005212:	f003 fb95 	bl	8008940 <HAL_SPI_Init>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800521c:	f7fd fe76 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8005220:	bf00      	nop
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20000318 	.word	0x20000318
 8005228:	40015000 	.word	0x40015000

0800522c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08a      	sub	sp, #40	; 0x28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005234:	f107 0314 	add.w	r3, r7, #20
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	609a      	str	r2, [r3, #8]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <HAL_SPI_MspInit+0x84>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d12c      	bne.n	80052a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800524e:	2300      	movs	r3, #0
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	4b18      	ldr	r3, [pc, #96]	; (80052b4 <HAL_SPI_MspInit+0x88>)
 8005254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005256:	4a17      	ldr	r2, [pc, #92]	; (80052b4 <HAL_SPI_MspInit+0x88>)
 8005258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800525c:	6453      	str	r3, [r2, #68]	; 0x44
 800525e:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <HAL_SPI_MspInit+0x88>)
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <HAL_SPI_MspInit+0x88>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	4a10      	ldr	r2, [pc, #64]	; (80052b4 <HAL_SPI_MspInit+0x88>)
 8005274:	f043 0320 	orr.w	r3, r3, #32
 8005278:	6313      	str	r3, [r2, #48]	; 0x30
 800527a:	4b0e      	ldr	r3, [pc, #56]	; (80052b4 <HAL_SPI_MspInit+0x88>)
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8005286:	f44f 7360 	mov.w	r3, #896	; 0x380
 800528a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528c:	2302      	movs	r3, #2
 800528e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005294:	2300      	movs	r3, #0
 8005296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005298:	2305      	movs	r3, #5
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800529c:	f107 0314 	add.w	r3, r7, #20
 80052a0:	4619      	mov	r1, r3
 80052a2:	4805      	ldr	r0, [pc, #20]	; (80052b8 <HAL_SPI_MspInit+0x8c>)
 80052a4:	f001 fda8 	bl	8006df8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80052a8:	bf00      	nop
 80052aa:	3728      	adds	r7, #40	; 0x28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40015000 	.word	0x40015000
 80052b4:	40023800 	.word	0x40023800
 80052b8:	40021400 	.word	0x40021400

080052bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052c2:	2300      	movs	r3, #0
 80052c4:	607b      	str	r3, [r7, #4]
 80052c6:	4b10      	ldr	r3, [pc, #64]	; (8005308 <HAL_MspInit+0x4c>)
 80052c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ca:	4a0f      	ldr	r2, [pc, #60]	; (8005308 <HAL_MspInit+0x4c>)
 80052cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052d0:	6453      	str	r3, [r2, #68]	; 0x44
 80052d2:	4b0d      	ldr	r3, [pc, #52]	; (8005308 <HAL_MspInit+0x4c>)
 80052d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052da:	607b      	str	r3, [r7, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <HAL_MspInit+0x4c>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	4a08      	ldr	r2, [pc, #32]	; (8005308 <HAL_MspInit+0x4c>)
 80052e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ec:	6413      	str	r3, [r2, #64]	; 0x40
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <HAL_MspInit+0x4c>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40023800 	.word	0x40023800

0800530c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08e      	sub	sp, #56	; 0x38
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	4b33      	ldr	r3, [pc, #204]	; (80053f0 <HAL_InitTick+0xe4>)
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	4a32      	ldr	r2, [pc, #200]	; (80053f0 <HAL_InitTick+0xe4>)
 8005326:	f043 0310 	orr.w	r3, r3, #16
 800532a:	6413      	str	r3, [r2, #64]	; 0x40
 800532c:	4b30      	ldr	r3, [pc, #192]	; (80053f0 <HAL_InitTick+0xe4>)
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005338:	f107 0210 	add.w	r2, r7, #16
 800533c:	f107 0314 	add.w	r3, r7, #20
 8005340:	4611      	mov	r1, r2
 8005342:	4618      	mov	r0, r3
 8005344:	f003 fa96 	bl	8008874 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005352:	f003 fa67 	bl	8008824 <HAL_RCC_GetPCLK1Freq>
 8005356:	6378      	str	r0, [r7, #52]	; 0x34
 8005358:	e004      	b.n	8005364 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800535a:	f003 fa63 	bl	8008824 <HAL_RCC_GetPCLK1Freq>
 800535e:	4603      	mov	r3, r0
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005366:	4a23      	ldr	r2, [pc, #140]	; (80053f4 <HAL_InitTick+0xe8>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	0c9b      	lsrs	r3, r3, #18
 800536e:	3b01      	subs	r3, #1
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005372:	4b21      	ldr	r3, [pc, #132]	; (80053f8 <HAL_InitTick+0xec>)
 8005374:	4a21      	ldr	r2, [pc, #132]	; (80053fc <HAL_InitTick+0xf0>)
 8005376:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005378:	4b1f      	ldr	r3, [pc, #124]	; (80053f8 <HAL_InitTick+0xec>)
 800537a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800537e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005380:	4a1d      	ldr	r2, [pc, #116]	; (80053f8 <HAL_InitTick+0xec>)
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005386:	4b1c      	ldr	r3, [pc, #112]	; (80053f8 <HAL_InitTick+0xec>)
 8005388:	2200      	movs	r2, #0
 800538a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800538c:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <HAL_InitTick+0xec>)
 800538e:	2200      	movs	r2, #0
 8005390:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005392:	4b19      	ldr	r3, [pc, #100]	; (80053f8 <HAL_InitTick+0xec>)
 8005394:	2200      	movs	r2, #0
 8005396:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005398:	4817      	ldr	r0, [pc, #92]	; (80053f8 <HAL_InitTick+0xec>)
 800539a:	f003 fb5a 	bl	8008a52 <HAL_TIM_Base_Init>
 800539e:	4603      	mov	r3, r0
 80053a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80053a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d11b      	bne.n	80053e4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80053ac:	4812      	ldr	r0, [pc, #72]	; (80053f8 <HAL_InitTick+0xec>)
 80053ae:	f003 fb9f 	bl	8008af0 <HAL_TIM_Base_Start_IT>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80053b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d111      	bne.n	80053e4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80053c0:	2036      	movs	r0, #54	; 0x36
 80053c2:	f001 f90f 	bl	80065e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b0f      	cmp	r3, #15
 80053ca:	d808      	bhi.n	80053de <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80053cc:	2200      	movs	r2, #0
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	2036      	movs	r0, #54	; 0x36
 80053d2:	f001 f8eb 	bl	80065ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053d6:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <HAL_InitTick+0xf4>)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	e002      	b.n	80053e4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80053e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3738      	adds	r7, #56	; 0x38
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40023800 	.word	0x40023800
 80053f4:	431bde83 	.word	0x431bde83
 80053f8:	20000370 	.word	0x20000370
 80053fc:	40001000 	.word	0x40001000
 8005400:	20000010 	.word	0x20000010

08005404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005408:	e7fe      	b.n	8005408 <NMI_Handler+0x4>

0800540a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800540a:	b480      	push	{r7}
 800540c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800540e:	e7fe      	b.n	800540e <HardFault_Handler+0x4>

08005410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005414:	e7fe      	b.n	8005414 <MemManage_Handler+0x4>

08005416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005416:	b480      	push	{r7}
 8005418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800541a:	e7fe      	b.n	800541a <BusFault_Handler+0x4>

0800541c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005420:	e7fe      	b.n	8005420 <UsageFault_Handler+0x4>

08005422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005426:	bf00      	nop
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800543e:	b480      	push	{r7}
 8005440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005442:	bf00      	nop
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005450:	bf00      	nop
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6050_INT_Pin);
 800545e:	2010      	movs	r0, #16
 8005460:	f001 fe90 	bl	8007184 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005464:	bf00      	nop
 8005466:	bd80      	pop	{r7, pc}

08005468 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800546c:	4802      	ldr	r0, [pc, #8]	; (8005478 <DMA1_Stream0_IRQHandler+0x10>)
 800546e:	f001 fa59 	bl	8006924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005472:	bf00      	nop
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200005b4 	.word	0x200005b4

0800547c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005480:	4802      	ldr	r0, [pc, #8]	; (800548c <TIM6_DAC_IRQHandler+0x10>)
 8005482:	f003 fcbd 	bl	8008e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000370 	.word	0x20000370

08005490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  return 1;
 8005494:	2301      	movs	r3, #1
}
 8005496:	4618      	mov	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <_kill>:

int _kill(int pid, int sig)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80054aa:	f006 f99b 	bl	800b7e4 <__errno>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2216      	movs	r2, #22
 80054b2:	601a      	str	r2, [r3, #0]
  return -1;
 80054b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <_exit>:

void _exit (int status)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80054c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff ffe7 	bl	80054a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80054d2:	e7fe      	b.n	80054d2 <_exit+0x12>

080054d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	e00a      	b.n	80054fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80054e6:	f3af 8000 	nop.w
 80054ea:	4601      	mov	r1, r0
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	60ba      	str	r2, [r7, #8]
 80054f2:	b2ca      	uxtb	r2, r1
 80054f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	3301      	adds	r3, #1
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	dbf0      	blt.n	80054e6 <_read+0x12>
  }

  return len;
 8005504:	687b      	ldr	r3, [r7, #4]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b086      	sub	sp, #24
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	e009      	b.n	8005534 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	60ba      	str	r2, [r7, #8]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	3301      	adds	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	dbf1      	blt.n	8005520 <_write+0x12>
  }
  return len;
 800553c:	687b      	ldr	r3, [r7, #4]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <_close>:

int _close(int file)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800554e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800556e:	605a      	str	r2, [r3, #4]
  return 0;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <_isatty>:

int _isatty(int file)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005586:	2301      	movs	r3, #1
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055b8:	4a14      	ldr	r2, [pc, #80]	; (800560c <_sbrk+0x5c>)
 80055ba:	4b15      	ldr	r3, [pc, #84]	; (8005610 <_sbrk+0x60>)
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055c4:	4b13      	ldr	r3, [pc, #76]	; (8005614 <_sbrk+0x64>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055cc:	4b11      	ldr	r3, [pc, #68]	; (8005614 <_sbrk+0x64>)
 80055ce:	4a12      	ldr	r2, [pc, #72]	; (8005618 <_sbrk+0x68>)
 80055d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055d2:	4b10      	ldr	r3, [pc, #64]	; (8005614 <_sbrk+0x64>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4413      	add	r3, r2
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d207      	bcs.n	80055f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055e0:	f006 f900 	bl	800b7e4 <__errno>
 80055e4:	4603      	mov	r3, r0
 80055e6:	220c      	movs	r2, #12
 80055e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055ee:	e009      	b.n	8005604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055f0:	4b08      	ldr	r3, [pc, #32]	; (8005614 <_sbrk+0x64>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055f6:	4b07      	ldr	r3, [pc, #28]	; (8005614 <_sbrk+0x64>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4413      	add	r3, r2
 80055fe:	4a05      	ldr	r2, [pc, #20]	; (8005614 <_sbrk+0x64>)
 8005600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005602:	68fb      	ldr	r3, [r7, #12]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20030000 	.word	0x20030000
 8005610:	00000400 	.word	0x00000400
 8005614:	200003b8 	.word	0x200003b8
 8005618:	20000768 	.word	0x20000768

0800561c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005620:	4b06      	ldr	r3, [pc, #24]	; (800563c <SystemInit+0x20>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	4a05      	ldr	r2, [pc, #20]	; (800563c <SystemInit+0x20>)
 8005628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800562c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	e000ed00 	.word	0xe000ed00

08005640 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005646:	f107 0308 	add.w	r3, r7, #8
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	605a      	str	r2, [r3, #4]
 8005650:	609a      	str	r2, [r3, #8]
 8005652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005654:	463b      	mov	r3, r7
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800565c:	4b1e      	ldr	r3, [pc, #120]	; (80056d8 <MX_TIM1_Init+0x98>)
 800565e:	4a1f      	ldr	r2, [pc, #124]	; (80056dc <MX_TIM1_Init+0x9c>)
 8005660:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005662:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <MX_TIM1_Init+0x98>)
 8005664:	2200      	movs	r2, #0
 8005666:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005668:	4b1b      	ldr	r3, [pc, #108]	; (80056d8 <MX_TIM1_Init+0x98>)
 800566a:	2200      	movs	r2, #0
 800566c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800566e:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <MX_TIM1_Init+0x98>)
 8005670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005674:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005676:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <MX_TIM1_Init+0x98>)
 8005678:	2200      	movs	r2, #0
 800567a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800567c:	4b16      	ldr	r3, [pc, #88]	; (80056d8 <MX_TIM1_Init+0x98>)
 800567e:	2200      	movs	r2, #0
 8005680:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <MX_TIM1_Init+0x98>)
 8005684:	2200      	movs	r2, #0
 8005686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005688:	4813      	ldr	r0, [pc, #76]	; (80056d8 <MX_TIM1_Init+0x98>)
 800568a:	f003 f9e2 	bl	8008a52 <HAL_TIM_Base_Init>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005694:	f7fd fc3a 	bl	8002f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800569c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800569e:	f107 0308 	add.w	r3, r7, #8
 80056a2:	4619      	mov	r1, r3
 80056a4:	480c      	ldr	r0, [pc, #48]	; (80056d8 <MX_TIM1_Init+0x98>)
 80056a6:	f003 fd5d 	bl	8009164 <HAL_TIM_ConfigClockSource>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80056b0:	f7fd fc2c 	bl	8002f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056b4:	2300      	movs	r3, #0
 80056b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80056bc:	463b      	mov	r3, r7
 80056be:	4619      	mov	r1, r3
 80056c0:	4805      	ldr	r0, [pc, #20]	; (80056d8 <MX_TIM1_Init+0x98>)
 80056c2:	f004 f95b 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80056cc:	f7fd fc1e 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80056d0:	bf00      	nop
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	200003bc 	.word	0x200003bc
 80056dc:	40010000 	.word	0x40010000

080056e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	; 0x28
 80056e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056e6:	f107 0320 	add.w	r3, r7, #32
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056f0:	1d3b      	adds	r3, r7, #4
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	605a      	str	r2, [r3, #4]
 80056f8:	609a      	str	r2, [r3, #8]
 80056fa:	60da      	str	r2, [r3, #12]
 80056fc:	611a      	str	r2, [r3, #16]
 80056fe:	615a      	str	r2, [r3, #20]
 8005700:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005702:	4b28      	ldr	r3, [pc, #160]	; (80057a4 <MX_TIM2_Init+0xc4>)
 8005704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005708:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 800570a:	4b26      	ldr	r3, [pc, #152]	; (80057a4 <MX_TIM2_Init+0xc4>)
 800570c:	220a      	movs	r2, #10
 800570e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005710:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <MX_TIM2_Init+0xc4>)
 8005712:	2200      	movs	r2, #0
 8005714:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005716:	4b23      	ldr	r3, [pc, #140]	; (80057a4 <MX_TIM2_Init+0xc4>)
 8005718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800571c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800571e:	4b21      	ldr	r3, [pc, #132]	; (80057a4 <MX_TIM2_Init+0xc4>)
 8005720:	2200      	movs	r2, #0
 8005722:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005724:	4b1f      	ldr	r3, [pc, #124]	; (80057a4 <MX_TIM2_Init+0xc4>)
 8005726:	2200      	movs	r2, #0
 8005728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800572a:	481e      	ldr	r0, [pc, #120]	; (80057a4 <MX_TIM2_Init+0xc4>)
 800572c:	f003 fa50 	bl	8008bd0 <HAL_TIM_PWM_Init>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8005736:	f7fd fbe9 	bl	8002f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800573a:	2300      	movs	r3, #0
 800573c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800573e:	2300      	movs	r3, #0
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005742:	f107 0320 	add.w	r3, r7, #32
 8005746:	4619      	mov	r1, r3
 8005748:	4816      	ldr	r0, [pc, #88]	; (80057a4 <MX_TIM2_Init+0xc4>)
 800574a:	f004 f917 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8005754:	f7fd fbda 	bl	8002f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005758:	2360      	movs	r3, #96	; 0x60
 800575a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005768:	1d3b      	adds	r3, r7, #4
 800576a:	2200      	movs	r2, #0
 800576c:	4619      	mov	r1, r3
 800576e:	480d      	ldr	r0, [pc, #52]	; (80057a4 <MX_TIM2_Init+0xc4>)
 8005770:	f003 fc36 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800577a:	f7fd fbc7 	bl	8002f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	2204      	movs	r2, #4
 8005782:	4619      	mov	r1, r3
 8005784:	4807      	ldr	r0, [pc, #28]	; (80057a4 <MX_TIM2_Init+0xc4>)
 8005786:	f003 fc2b 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005790:	f7fd fbbc 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005794:	4803      	ldr	r0, [pc, #12]	; (80057a4 <MX_TIM2_Init+0xc4>)
 8005796:	f000 f963 	bl	8005a60 <HAL_TIM_MspPostInit>

}
 800579a:	bf00      	nop
 800579c:	3728      	adds	r7, #40	; 0x28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000404 	.word	0x20000404

080057a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057ae:	f107 0320 	add.w	r3, r7, #32
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80057b8:	1d3b      	adds	r3, r7, #4
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	609a      	str	r2, [r3, #8]
 80057c2:	60da      	str	r2, [r3, #12]
 80057c4:	611a      	str	r2, [r3, #16]
 80057c6:	615a      	str	r2, [r3, #20]
 80057c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80057ca:	4b27      	ldr	r3, [pc, #156]	; (8005868 <MX_TIM3_Init+0xc0>)
 80057cc:	4a27      	ldr	r2, [pc, #156]	; (800586c <MX_TIM3_Init+0xc4>)
 80057ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 80057d0:	4b25      	ldr	r3, [pc, #148]	; (8005868 <MX_TIM3_Init+0xc0>)
 80057d2:	220a      	movs	r2, #10
 80057d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057d6:	4b24      	ldr	r3, [pc, #144]	; (8005868 <MX_TIM3_Init+0xc0>)
 80057d8:	2200      	movs	r2, #0
 80057da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80057dc:	4b22      	ldr	r3, [pc, #136]	; (8005868 <MX_TIM3_Init+0xc0>)
 80057de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057e4:	4b20      	ldr	r3, [pc, #128]	; (8005868 <MX_TIM3_Init+0xc0>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057ea:	4b1f      	ldr	r3, [pc, #124]	; (8005868 <MX_TIM3_Init+0xc0>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80057f0:	481d      	ldr	r0, [pc, #116]	; (8005868 <MX_TIM3_Init+0xc0>)
 80057f2:	f003 f9ed 	bl	8008bd0 <HAL_TIM_PWM_Init>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80057fc:	f7fd fb86 	bl	8002f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005800:	2300      	movs	r3, #0
 8005802:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005804:	2300      	movs	r3, #0
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005808:	f107 0320 	add.w	r3, r7, #32
 800580c:	4619      	mov	r1, r3
 800580e:	4816      	ldr	r0, [pc, #88]	; (8005868 <MX_TIM3_Init+0xc0>)
 8005810:	f004 f8b4 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800581a:	f7fd fb77 	bl	8002f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800581e:	2360      	movs	r3, #96	; 0x60
 8005820:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800582e:	1d3b      	adds	r3, r7, #4
 8005830:	2200      	movs	r2, #0
 8005832:	4619      	mov	r1, r3
 8005834:	480c      	ldr	r0, [pc, #48]	; (8005868 <MX_TIM3_Init+0xc0>)
 8005836:	f003 fbd3 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005840:	f7fd fb64 	bl	8002f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005844:	1d3b      	adds	r3, r7, #4
 8005846:	2208      	movs	r2, #8
 8005848:	4619      	mov	r1, r3
 800584a:	4807      	ldr	r0, [pc, #28]	; (8005868 <MX_TIM3_Init+0xc0>)
 800584c:	f003 fbc8 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005856:	f7fd fb59 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800585a:	4803      	ldr	r0, [pc, #12]	; (8005868 <MX_TIM3_Init+0xc0>)
 800585c:	f000 f900 	bl	8005a60 <HAL_TIM_MspPostInit>

}
 8005860:	bf00      	nop
 8005862:	3728      	adds	r7, #40	; 0x28
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	2000044c 	.word	0x2000044c
 800586c:	40000400 	.word	0x40000400

08005870 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005876:	1d3b      	adds	r3, r7, #4
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	605a      	str	r2, [r3, #4]
 800587e:	609a      	str	r2, [r3, #8]
 8005880:	60da      	str	r2, [r3, #12]
 8005882:	611a      	str	r2, [r3, #16]
 8005884:	615a      	str	r2, [r3, #20]
 8005886:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8005888:	4b1f      	ldr	r3, [pc, #124]	; (8005908 <MX_TIM9_Init+0x98>)
 800588a:	4a20      	ldr	r2, [pc, #128]	; (800590c <MX_TIM9_Init+0x9c>)
 800588c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10;
 800588e:	4b1e      	ldr	r3, [pc, #120]	; (8005908 <MX_TIM9_Init+0x98>)
 8005890:	220a      	movs	r2, #10
 8005892:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005894:	4b1c      	ldr	r3, [pc, #112]	; (8005908 <MX_TIM9_Init+0x98>)
 8005896:	2200      	movs	r2, #0
 8005898:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800589a:	4b1b      	ldr	r3, [pc, #108]	; (8005908 <MX_TIM9_Init+0x98>)
 800589c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058a2:	4b19      	ldr	r3, [pc, #100]	; (8005908 <MX_TIM9_Init+0x98>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058a8:	4b17      	ldr	r3, [pc, #92]	; (8005908 <MX_TIM9_Init+0x98>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80058ae:	4816      	ldr	r0, [pc, #88]	; (8005908 <MX_TIM9_Init+0x98>)
 80058b0:	f003 f98e 	bl	8008bd0 <HAL_TIM_PWM_Init>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80058ba:	f7fd fb27 	bl	8002f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058be:	2360      	movs	r3, #96	; 0x60
 80058c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	2200      	movs	r2, #0
 80058d2:	4619      	mov	r1, r3
 80058d4:	480c      	ldr	r0, [pc, #48]	; (8005908 <MX_TIM9_Init+0x98>)
 80058d6:	f003 fb83 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80058e0:	f7fd fb14 	bl	8002f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80058e4:	1d3b      	adds	r3, r7, #4
 80058e6:	2204      	movs	r2, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4807      	ldr	r0, [pc, #28]	; (8005908 <MX_TIM9_Init+0x98>)
 80058ec:	f003 fb78 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80058f6:	f7fd fb09 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80058fa:	4803      	ldr	r0, [pc, #12]	; (8005908 <MX_TIM9_Init+0x98>)
 80058fc:	f000 f8b0 	bl	8005a60 <HAL_TIM_MspPostInit>

}
 8005900:	bf00      	nop
 8005902:	3720      	adds	r7, #32
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20000494 	.word	0x20000494
 800590c:	40014000 	.word	0x40014000

08005910 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005914:	4b0e      	ldr	r3, [pc, #56]	; (8005950 <MX_TIM10_Init+0x40>)
 8005916:	4a0f      	ldr	r2, [pc, #60]	; (8005954 <MX_TIM10_Init+0x44>)
 8005918:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800591a:	4b0d      	ldr	r3, [pc, #52]	; (8005950 <MX_TIM10_Init+0x40>)
 800591c:	2200      	movs	r2, #0
 800591e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005920:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <MX_TIM10_Init+0x40>)
 8005922:	2200      	movs	r2, #0
 8005924:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8005926:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <MX_TIM10_Init+0x40>)
 8005928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800592c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800592e:	4b08      	ldr	r3, [pc, #32]	; (8005950 <MX_TIM10_Init+0x40>)
 8005930:	2200      	movs	r2, #0
 8005932:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005934:	4b06      	ldr	r3, [pc, #24]	; (8005950 <MX_TIM10_Init+0x40>)
 8005936:	2200      	movs	r2, #0
 8005938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800593a:	4805      	ldr	r0, [pc, #20]	; (8005950 <MX_TIM10_Init+0x40>)
 800593c:	f003 f889 	bl	8008a52 <HAL_TIM_Base_Init>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8005946:	f7fd fae1 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800594a:	bf00      	nop
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	200004dc 	.word	0x200004dc
 8005954:	40014400 	.word	0x40014400

08005958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a15      	ldr	r2, [pc, #84]	; (80059bc <HAL_TIM_Base_MspInit+0x64>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d10e      	bne.n	8005988 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <HAL_TIM_Base_MspInit+0x68>)
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <HAL_TIM_Base_MspInit+0x68>)
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	6453      	str	r3, [r2, #68]	; 0x44
 800597a:	4b11      	ldr	r3, [pc, #68]	; (80059c0 <HAL_TIM_Base_MspInit+0x68>)
 800597c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8005986:	e012      	b.n	80059ae <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM10)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a0d      	ldr	r2, [pc, #52]	; (80059c4 <HAL_TIM_Base_MspInit+0x6c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d10d      	bne.n	80059ae <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005992:	2300      	movs	r3, #0
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <HAL_TIM_Base_MspInit+0x68>)
 8005998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599a:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <HAL_TIM_Base_MspInit+0x68>)
 800599c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059a0:	6453      	str	r3, [r2, #68]	; 0x44
 80059a2:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <HAL_TIM_Base_MspInit+0x68>)
 80059a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059aa:	60bb      	str	r3, [r7, #8]
 80059ac:	68bb      	ldr	r3, [r7, #8]
}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40023800 	.word	0x40023800
 80059c4:	40014400 	.word	0x40014400

080059c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d8:	d10e      	bne.n	80059f8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	4b1d      	ldr	r3, [pc, #116]	; (8005a54 <HAL_TIM_PWM_MspInit+0x8c>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <HAL_TIM_PWM_MspInit+0x8c>)
 80059e4:	f043 0301 	orr.w	r3, r3, #1
 80059e8:	6413      	str	r3, [r2, #64]	; 0x40
 80059ea:	4b1a      	ldr	r3, [pc, #104]	; (8005a54 <HAL_TIM_PWM_MspInit+0x8c>)
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80059f6:	e026      	b.n	8005a46 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a16      	ldr	r2, [pc, #88]	; (8005a58 <HAL_TIM_PWM_MspInit+0x90>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d10e      	bne.n	8005a20 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a02:	2300      	movs	r3, #0
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	4b13      	ldr	r3, [pc, #76]	; (8005a54 <HAL_TIM_PWM_MspInit+0x8c>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	4a12      	ldr	r2, [pc, #72]	; (8005a54 <HAL_TIM_PWM_MspInit+0x8c>)
 8005a0c:	f043 0302 	orr.w	r3, r3, #2
 8005a10:	6413      	str	r3, [r2, #64]	; 0x40
 8005a12:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <HAL_TIM_PWM_MspInit+0x8c>)
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	613b      	str	r3, [r7, #16]
 8005a1c:	693b      	ldr	r3, [r7, #16]
}
 8005a1e:	e012      	b.n	8005a46 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM9)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0d      	ldr	r2, [pc, #52]	; (8005a5c <HAL_TIM_PWM_MspInit+0x94>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d10d      	bne.n	8005a46 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <HAL_TIM_PWM_MspInit+0x8c>)
 8005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a32:	4a08      	ldr	r2, [pc, #32]	; (8005a54 <HAL_TIM_PWM_MspInit+0x8c>)
 8005a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a38:	6453      	str	r3, [r2, #68]	; 0x44
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <HAL_TIM_PWM_MspInit+0x8c>)
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40023800 	.word	0x40023800
 8005a58:	40000400 	.word	0x40000400
 8005a5c:	40014000 	.word	0x40014000

08005a60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08c      	sub	sp, #48	; 0x30
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a68:	f107 031c 	add.w	r3, r7, #28
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	609a      	str	r2, [r3, #8]
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a80:	d13c      	bne.n	8005afc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	4b52      	ldr	r3, [pc, #328]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	4a51      	ldr	r2, [pc, #324]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005a8c:	f043 0301 	orr.w	r3, r3, #1
 8005a90:	6313      	str	r3, [r2, #48]	; 0x30
 8005a92:	4b4f      	ldr	r3, [pc, #316]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	4b4b      	ldr	r3, [pc, #300]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	4a4a      	ldr	r2, [pc, #296]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005aa8:	f043 0302 	orr.w	r3, r3, #2
 8005aac:	6313      	str	r3, [r2, #48]	; 0x30
 8005aae:	4b48      	ldr	r3, [pc, #288]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005aba:	2320      	movs	r3, #32
 8005abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005aca:	2301      	movs	r3, #1
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ace:	f107 031c 	add.w	r3, r7, #28
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	483f      	ldr	r0, [pc, #252]	; (8005bd4 <HAL_TIM_MspPostInit+0x174>)
 8005ad6:	f001 f98f 	bl	8006df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005ada:	2308      	movs	r3, #8
 8005adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005aea:	2301      	movs	r3, #1
 8005aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aee:	f107 031c 	add.w	r3, r7, #28
 8005af2:	4619      	mov	r1, r3
 8005af4:	4838      	ldr	r0, [pc, #224]	; (8005bd8 <HAL_TIM_MspPostInit+0x178>)
 8005af6:	f001 f97f 	bl	8006df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8005afa:	e065      	b.n	8005bc8 <HAL_TIM_MspPostInit+0x168>
  else if(timHandle->Instance==TIM3)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a36      	ldr	r2, [pc, #216]	; (8005bdc <HAL_TIM_MspPostInit+0x17c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d13d      	bne.n	8005b82 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b06:	2300      	movs	r3, #0
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	4b31      	ldr	r3, [pc, #196]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	4a30      	ldr	r2, [pc, #192]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005b10:	f043 0304 	orr.w	r3, r3, #4
 8005b14:	6313      	str	r3, [r2, #48]	; 0x30
 8005b16:	4b2e      	ldr	r3, [pc, #184]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	4a29      	ldr	r2, [pc, #164]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005b2c:	f043 0302 	orr.w	r3, r3, #2
 8005b30:	6313      	str	r3, [r2, #48]	; 0x30
 8005b32:	4b27      	ldr	r3, [pc, #156]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b44:	2302      	movs	r3, #2
 8005b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005b50:	2302      	movs	r3, #2
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b54:	f107 031c 	add.w	r3, r7, #28
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4821      	ldr	r0, [pc, #132]	; (8005be0 <HAL_TIM_MspPostInit+0x180>)
 8005b5c:	f001 f94c 	bl	8006df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005b60:	2310      	movs	r3, #16
 8005b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b64:	2302      	movs	r3, #2
 8005b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005b70:	2302      	movs	r3, #2
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b74:	f107 031c 	add.w	r3, r7, #28
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4817      	ldr	r0, [pc, #92]	; (8005bd8 <HAL_TIM_MspPostInit+0x178>)
 8005b7c:	f001 f93c 	bl	8006df8 <HAL_GPIO_Init>
}
 8005b80:	e022      	b.n	8005bc8 <HAL_TIM_MspPostInit+0x168>
  else if(timHandle->Instance==TIM9)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a17      	ldr	r2, [pc, #92]	; (8005be4 <HAL_TIM_MspPostInit+0x184>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d11d      	bne.n	8005bc8 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60bb      	str	r3, [r7, #8]
 8005b90:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	4a0e      	ldr	r2, [pc, #56]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005b96:	f043 0310 	orr.w	r3, r3, #16
 8005b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <HAL_TIM_MspPostInit+0x170>)
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	60bb      	str	r3, [r7, #8]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005ba8:	2360      	movs	r3, #96	; 0x60
 8005baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bac:	2302      	movs	r3, #2
 8005bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005bbc:	f107 031c 	add.w	r3, r7, #28
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4809      	ldr	r0, [pc, #36]	; (8005be8 <HAL_TIM_MspPostInit+0x188>)
 8005bc4:	f001 f918 	bl	8006df8 <HAL_GPIO_Init>
}
 8005bc8:	bf00      	nop
 8005bca:	3730      	adds	r7, #48	; 0x30
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	40020000 	.word	0x40020000
 8005bd8:	40020400 	.word	0x40020400
 8005bdc:	40000400 	.word	0x40000400
 8005be0:	40020800 	.word	0x40020800
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40021000 	.word	0x40021000

08005bec <MX_UART5_Init>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005bf0:	4b11      	ldr	r3, [pc, #68]	; (8005c38 <MX_UART5_Init+0x4c>)
 8005bf2:	4a12      	ldr	r2, [pc, #72]	; (8005c3c <MX_UART5_Init+0x50>)
 8005bf4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005bf6:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <MX_UART5_Init+0x4c>)
 8005bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005bfc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <MX_UART5_Init+0x4c>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <MX_UART5_Init+0x4c>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <MX_UART5_Init+0x4c>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005c10:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <MX_UART5_Init+0x4c>)
 8005c12:	220c      	movs	r2, #12
 8005c14:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c16:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <MX_UART5_Init+0x4c>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c1c:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <MX_UART5_Init+0x4c>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005c22:	4805      	ldr	r0, [pc, #20]	; (8005c38 <MX_UART5_Init+0x4c>)
 8005c24:	f003 ff3a 	bl	8009a9c <HAL_UART_Init>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8005c2e:	f7fd f96d 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005c32:	bf00      	nop
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000524 	.word	0x20000524
 8005c3c:	40005000 	.word	0x40005000

08005c40 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005c44:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <MX_USART1_UART_Init+0x4c>)
 8005c46:	4a12      	ldr	r2, [pc, #72]	; (8005c90 <MX_USART1_UART_Init+0x50>)
 8005c48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005c4a:	4b10      	ldr	r3, [pc, #64]	; (8005c8c <MX_USART1_UART_Init+0x4c>)
 8005c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c52:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <MX_USART1_UART_Init+0x4c>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005c58:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <MX_USART1_UART_Init+0x4c>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <MX_USART1_UART_Init+0x4c>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c64:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <MX_USART1_UART_Init+0x4c>)
 8005c66:	220c      	movs	r2, #12
 8005c68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c6a:	4b08      	ldr	r3, [pc, #32]	; (8005c8c <MX_USART1_UART_Init+0x4c>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c70:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <MX_USART1_UART_Init+0x4c>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005c76:	4805      	ldr	r0, [pc, #20]	; (8005c8c <MX_USART1_UART_Init+0x4c>)
 8005c78:	f003 ff10 	bl	8009a9c <HAL_UART_Init>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005c82:	f7fd f943 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005c86:	bf00      	nop
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	2000056c 	.word	0x2000056c
 8005c90:	40011000 	.word	0x40011000

08005c94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08c      	sub	sp, #48	; 0x30
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c9c:	f107 031c 	add.w	r3, r7, #28
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	609a      	str	r2, [r3, #8]
 8005ca8:	60da      	str	r2, [r3, #12]
 8005caa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a59      	ldr	r2, [pc, #356]	; (8005e18 <HAL_UART_MspInit+0x184>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d179      	bne.n	8005daa <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	4b58      	ldr	r3, [pc, #352]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	4a57      	ldr	r2, [pc, #348]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005cc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cc6:	4b55      	ldr	r3, [pc, #340]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cce:	61bb      	str	r3, [r7, #24]
 8005cd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	4b51      	ldr	r3, [pc, #324]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	4a50      	ldr	r2, [pc, #320]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005cdc:	f043 0304 	orr.w	r3, r3, #4
 8005ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ce2:	4b4e      	ldr	r3, [pc, #312]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cee:	2300      	movs	r3, #0
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	4b4a      	ldr	r3, [pc, #296]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	4a49      	ldr	r2, [pc, #292]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005cf8:	f043 0308 	orr.w	r3, r3, #8
 8005cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8005cfe:	4b47      	ldr	r3, [pc, #284]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d10:	2302      	movs	r3, #2
 8005d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d20:	f107 031c 	add.w	r3, r7, #28
 8005d24:	4619      	mov	r1, r3
 8005d26:	483e      	ldr	r0, [pc, #248]	; (8005e20 <HAL_UART_MspInit+0x18c>)
 8005d28:	f001 f866 	bl	8006df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d30:	2302      	movs	r3, #2
 8005d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d34:	2300      	movs	r3, #0
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d40:	f107 031c 	add.w	r3, r7, #28
 8005d44:	4619      	mov	r1, r3
 8005d46:	4837      	ldr	r0, [pc, #220]	; (8005e24 <HAL_UART_MspInit+0x190>)
 8005d48:	f001 f856 	bl	8006df8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005d4c:	4b36      	ldr	r3, [pc, #216]	; (8005e28 <HAL_UART_MspInit+0x194>)
 8005d4e:	4a37      	ldr	r2, [pc, #220]	; (8005e2c <HAL_UART_MspInit+0x198>)
 8005d50:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8005d52:	4b35      	ldr	r3, [pc, #212]	; (8005e28 <HAL_UART_MspInit+0x194>)
 8005d54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d58:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d5a:	4b33      	ldr	r3, [pc, #204]	; (8005e28 <HAL_UART_MspInit+0x194>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d60:	4b31      	ldr	r3, [pc, #196]	; (8005e28 <HAL_UART_MspInit+0x194>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d66:	4b30      	ldr	r3, [pc, #192]	; (8005e28 <HAL_UART_MspInit+0x194>)
 8005d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d6c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d6e:	4b2e      	ldr	r3, [pc, #184]	; (8005e28 <HAL_UART_MspInit+0x194>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d74:	4b2c      	ldr	r3, [pc, #176]	; (8005e28 <HAL_UART_MspInit+0x194>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8005d7a:	4b2b      	ldr	r3, [pc, #172]	; (8005e28 <HAL_UART_MspInit+0x194>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d80:	4b29      	ldr	r3, [pc, #164]	; (8005e28 <HAL_UART_MspInit+0x194>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d86:	4b28      	ldr	r3, [pc, #160]	; (8005e28 <HAL_UART_MspInit+0x194>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005d8c:	4826      	ldr	r0, [pc, #152]	; (8005e28 <HAL_UART_MspInit+0x194>)
 8005d8e:	f000 fc53 	bl	8006638 <HAL_DMA_Init>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8005d98:	f7fd f8b8 	bl	8002f0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a22      	ldr	r2, [pc, #136]	; (8005e28 <HAL_UART_MspInit+0x194>)
 8005da0:	63da      	str	r2, [r3, #60]	; 0x3c
 8005da2:	4a21      	ldr	r2, [pc, #132]	; (8005e28 <HAL_UART_MspInit+0x194>)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005da8:	e031      	b.n	8005e0e <HAL_UART_MspInit+0x17a>
  else if(uartHandle->Instance==USART1)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a20      	ldr	r2, [pc, #128]	; (8005e30 <HAL_UART_MspInit+0x19c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d12c      	bne.n	8005e0e <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	4b18      	ldr	r3, [pc, #96]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbc:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005dbe:	f043 0310 	orr.w	r3, r3, #16
 8005dc2:	6453      	str	r3, [r2, #68]	; 0x44
 8005dc4:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60bb      	str	r3, [r7, #8]
 8005dd4:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	4a10      	ldr	r2, [pc, #64]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	6313      	str	r3, [r2, #48]	; 0x30
 8005de0:	4b0e      	ldr	r3, [pc, #56]	; (8005e1c <HAL_UART_MspInit+0x188>)
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8005dec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005df2:	2302      	movs	r3, #2
 8005df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005dfe:	2307      	movs	r3, #7
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e02:	f107 031c 	add.w	r3, r7, #28
 8005e06:	4619      	mov	r1, r3
 8005e08:	480a      	ldr	r0, [pc, #40]	; (8005e34 <HAL_UART_MspInit+0x1a0>)
 8005e0a:	f000 fff5 	bl	8006df8 <HAL_GPIO_Init>
}
 8005e0e:	bf00      	nop
 8005e10:	3730      	adds	r7, #48	; 0x30
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40005000 	.word	0x40005000
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	40020800 	.word	0x40020800
 8005e24:	40020c00 	.word	0x40020c00
 8005e28:	200005b4 	.word	0x200005b4
 8005e2c:	40026010 	.word	0x40026010
 8005e30:	40011000 	.word	0x40011000
 8005e34:	40020000 	.word	0x40020000

08005e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005e3c:	f7ff fbee 	bl	800561c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e40:	480c      	ldr	r0, [pc, #48]	; (8005e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005e42:	490d      	ldr	r1, [pc, #52]	; (8005e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005e44:	4a0d      	ldr	r2, [pc, #52]	; (8005e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e48:	e002      	b.n	8005e50 <LoopCopyDataInit>

08005e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e4e:	3304      	adds	r3, #4

08005e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e54:	d3f9      	bcc.n	8005e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e56:	4a0a      	ldr	r2, [pc, #40]	; (8005e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005e58:	4c0a      	ldr	r4, [pc, #40]	; (8005e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e5c:	e001      	b.n	8005e62 <LoopFillZerobss>

08005e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e60:	3204      	adds	r2, #4

08005e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e64:	d3fb      	bcc.n	8005e5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005e66:	f005 fcc3 	bl	800b7f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e6a:	f7fc fe9d 	bl	8002ba8 <main>
  bx  lr    
 8005e6e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005e70:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e78:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005e7c:	0800e8e8 	.word	0x0800e8e8
  ldr r2, =_sbss
 8005e80:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005e84:	20000764 	.word	0x20000764

08005e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e88:	e7fe      	b.n	8005e88 <ADC_IRQHandler>
	...

08005e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e90:	4b0e      	ldr	r3, [pc, #56]	; (8005ecc <HAL_Init+0x40>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a0d      	ldr	r2, [pc, #52]	; (8005ecc <HAL_Init+0x40>)
 8005e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <HAL_Init+0x40>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <HAL_Init+0x40>)
 8005ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ea8:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <HAL_Init+0x40>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a07      	ldr	r2, [pc, #28]	; (8005ecc <HAL_Init+0x40>)
 8005eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005eb4:	2003      	movs	r0, #3
 8005eb6:	f000 fb6e 	bl	8006596 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005eba:	200e      	movs	r0, #14
 8005ebc:	f7ff fa26 	bl	800530c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ec0:	f7ff f9fc 	bl	80052bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40023c00 	.word	0x40023c00

08005ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <HAL_IncTick+0x20>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <HAL_IncTick+0x24>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4413      	add	r3, r2
 8005ee0:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <HAL_IncTick+0x24>)
 8005ee2:	6013      	str	r3, [r2, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	20000014 	.word	0x20000014
 8005ef4:	20000614 	.word	0x20000614

08005ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return uwTick;
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <HAL_GetTick+0x14>)
 8005efe:	681b      	ldr	r3, [r3, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000614 	.word	0x20000614

08005f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f18:	f7ff ffee 	bl	8005ef8 <HAL_GetTick>
 8005f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f28:	d005      	beq.n	8005f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f2a:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <HAL_Delay+0x44>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f36:	bf00      	nop
 8005f38:	f7ff ffde 	bl	8005ef8 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d8f7      	bhi.n	8005f38 <HAL_Delay+0x28>
  {
  }
}
 8005f48:	bf00      	nop
 8005f4a:	bf00      	nop
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000014 	.word	0x20000014

08005f58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e033      	b.n	8005fd6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d109      	bne.n	8005f8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fb f9e8 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	f003 0310 	and.w	r3, r3, #16
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d118      	bne.n	8005fc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005f9e:	f023 0302 	bic.w	r3, r3, #2
 8005fa2:	f043 0202 	orr.w	r2, r3, #2
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f94a 	bl	8006244 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f023 0303 	bic.w	r3, r3, #3
 8005fbe:	f043 0201 	orr.w	r2, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40
 8005fc6:	e001      	b.n	8005fcc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <HAL_ADC_ConfigChannel+0x1c>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e113      	b.n	8006224 <HAL_ADC_ConfigChannel+0x244>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b09      	cmp	r3, #9
 800600a:	d925      	bls.n	8006058 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68d9      	ldr	r1, [r3, #12]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	461a      	mov	r2, r3
 800601a:	4613      	mov	r3, r2
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	4413      	add	r3, r2
 8006020:	3b1e      	subs	r3, #30
 8006022:	2207      	movs	r2, #7
 8006024:	fa02 f303 	lsl.w	r3, r2, r3
 8006028:	43da      	mvns	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	400a      	ands	r2, r1
 8006030:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68d9      	ldr	r1, [r3, #12]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	4618      	mov	r0, r3
 8006044:	4603      	mov	r3, r0
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	4403      	add	r3, r0
 800604a:	3b1e      	subs	r3, #30
 800604c:	409a      	lsls	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	60da      	str	r2, [r3, #12]
 8006056:	e022      	b.n	800609e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6919      	ldr	r1, [r3, #16]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	461a      	mov	r2, r3
 8006066:	4613      	mov	r3, r2
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	4413      	add	r3, r2
 800606c:	2207      	movs	r2, #7
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	43da      	mvns	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	400a      	ands	r2, r1
 800607a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6919      	ldr	r1, [r3, #16]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	4618      	mov	r0, r3
 800608e:	4603      	mov	r3, r0
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	4403      	add	r3, r0
 8006094:	409a      	lsls	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b06      	cmp	r3, #6
 80060a4:	d824      	bhi.n	80060f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	3b05      	subs	r3, #5
 80060b8:	221f      	movs	r2, #31
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	43da      	mvns	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	400a      	ands	r2, r1
 80060c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	4618      	mov	r0, r3
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	3b05      	subs	r3, #5
 80060e2:	fa00 f203 	lsl.w	r2, r0, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	635a      	str	r2, [r3, #52]	; 0x34
 80060ee:	e04c      	b.n	800618a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b0c      	cmp	r3, #12
 80060f6:	d824      	bhi.n	8006142 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	3b23      	subs	r3, #35	; 0x23
 800610a:	221f      	movs	r2, #31
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	43da      	mvns	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	400a      	ands	r2, r1
 8006118:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	4618      	mov	r0, r3
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	3b23      	subs	r3, #35	; 0x23
 8006134:	fa00 f203 	lsl.w	r2, r0, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
 8006140:	e023      	b.n	800618a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	3b41      	subs	r3, #65	; 0x41
 8006154:	221f      	movs	r2, #31
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	43da      	mvns	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	400a      	ands	r2, r1
 8006162:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	4618      	mov	r0, r3
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	3b41      	subs	r3, #65	; 0x41
 800617e:	fa00 f203 	lsl.w	r2, r0, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800618a:	4b29      	ldr	r3, [pc, #164]	; (8006230 <HAL_ADC_ConfigChannel+0x250>)
 800618c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a28      	ldr	r2, [pc, #160]	; (8006234 <HAL_ADC_ConfigChannel+0x254>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10f      	bne.n	80061b8 <HAL_ADC_ConfigChannel+0x1d8>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b12      	cmp	r3, #18
 800619e:	d10b      	bne.n	80061b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1d      	ldr	r2, [pc, #116]	; (8006234 <HAL_ADC_ConfigChannel+0x254>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d12b      	bne.n	800621a <HAL_ADC_ConfigChannel+0x23a>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1c      	ldr	r2, [pc, #112]	; (8006238 <HAL_ADC_ConfigChannel+0x258>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <HAL_ADC_ConfigChannel+0x1f4>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b11      	cmp	r3, #17
 80061d2:	d122      	bne.n	800621a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a11      	ldr	r2, [pc, #68]	; (8006238 <HAL_ADC_ConfigChannel+0x258>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d111      	bne.n	800621a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80061f6:	4b11      	ldr	r3, [pc, #68]	; (800623c <HAL_ADC_ConfigChannel+0x25c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a11      	ldr	r2, [pc, #68]	; (8006240 <HAL_ADC_ConfigChannel+0x260>)
 80061fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006200:	0c9a      	lsrs	r2, r3, #18
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800620c:	e002      	b.n	8006214 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	3b01      	subs	r3, #1
 8006212:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1f9      	bne.n	800620e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	40012300 	.word	0x40012300
 8006234:	40012000 	.word	0x40012000
 8006238:	10000012 	.word	0x10000012
 800623c:	2000000c 	.word	0x2000000c
 8006240:	431bde83 	.word	0x431bde83

08006244 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800624c:	4b79      	ldr	r3, [pc, #484]	; (8006434 <ADC_Init+0x1f0>)
 800624e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	431a      	orrs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006278:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6859      	ldr	r1, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	021a      	lsls	r2, r3, #8
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800629c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6859      	ldr	r1, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6899      	ldr	r1, [r3, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d6:	4a58      	ldr	r2, [pc, #352]	; (8006438 <ADC_Init+0x1f4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d022      	beq.n	8006322 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6899      	ldr	r1, [r3, #8]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800630c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6899      	ldr	r1, [r3, #8]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	609a      	str	r2, [r3, #8]
 8006320:	e00f      	b.n	8006342 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006330:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006340:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0202 	bic.w	r2, r2, #2
 8006350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6899      	ldr	r1, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	7e1b      	ldrb	r3, [r3, #24]
 800635c:	005a      	lsls	r2, r3, #1
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01b      	beq.n	80063a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800637e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800638e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6859      	ldr	r1, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	3b01      	subs	r3, #1
 800639c:	035a      	lsls	r2, r3, #13
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
 80063a6:	e007      	b.n	80063b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80063c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	051a      	lsls	r2, r3, #20
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80063ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6899      	ldr	r1, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063fa:	025a      	lsls	r2, r3, #9
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6899      	ldr	r1, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	029a      	lsls	r2, r3, #10
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	609a      	str	r2, [r3, #8]
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	40012300 	.word	0x40012300
 8006438:	0f000001 	.word	0x0f000001

0800643c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800644c:	4b0c      	ldr	r3, [pc, #48]	; (8006480 <__NVIC_SetPriorityGrouping+0x44>)
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006458:	4013      	ands	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800646c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800646e:	4a04      	ldr	r2, [pc, #16]	; (8006480 <__NVIC_SetPriorityGrouping+0x44>)
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	60d3      	str	r3, [r2, #12]
}
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	e000ed00 	.word	0xe000ed00

08006484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006488:	4b04      	ldr	r3, [pc, #16]	; (800649c <__NVIC_GetPriorityGrouping+0x18>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	0a1b      	lsrs	r3, r3, #8
 800648e:	f003 0307 	and.w	r3, r3, #7
}
 8006492:	4618      	mov	r0, r3
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	e000ed00 	.word	0xe000ed00

080064a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4603      	mov	r3, r0
 80064a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	db0b      	blt.n	80064ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	f003 021f 	and.w	r2, r3, #31
 80064b8:	4907      	ldr	r1, [pc, #28]	; (80064d8 <__NVIC_EnableIRQ+0x38>)
 80064ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	2001      	movs	r0, #1
 80064c2:	fa00 f202 	lsl.w	r2, r0, r2
 80064c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	e000e100 	.word	0xe000e100

080064dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	6039      	str	r1, [r7, #0]
 80064e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	db0a      	blt.n	8006506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	490c      	ldr	r1, [pc, #48]	; (8006528 <__NVIC_SetPriority+0x4c>)
 80064f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064fa:	0112      	lsls	r2, r2, #4
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	440b      	add	r3, r1
 8006500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006504:	e00a      	b.n	800651c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	b2da      	uxtb	r2, r3
 800650a:	4908      	ldr	r1, [pc, #32]	; (800652c <__NVIC_SetPriority+0x50>)
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	3b04      	subs	r3, #4
 8006514:	0112      	lsls	r2, r2, #4
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	440b      	add	r3, r1
 800651a:	761a      	strb	r2, [r3, #24]
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	e000e100 	.word	0xe000e100
 800652c:	e000ed00 	.word	0xe000ed00

08006530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006530:	b480      	push	{r7}
 8006532:	b089      	sub	sp, #36	; 0x24
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	f1c3 0307 	rsb	r3, r3, #7
 800654a:	2b04      	cmp	r3, #4
 800654c:	bf28      	it	cs
 800654e:	2304      	movcs	r3, #4
 8006550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	3304      	adds	r3, #4
 8006556:	2b06      	cmp	r3, #6
 8006558:	d902      	bls.n	8006560 <NVIC_EncodePriority+0x30>
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	3b03      	subs	r3, #3
 800655e:	e000      	b.n	8006562 <NVIC_EncodePriority+0x32>
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	fa02 f303 	lsl.w	r3, r2, r3
 800656e:	43da      	mvns	r2, r3
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	401a      	ands	r2, r3
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006578:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	fa01 f303 	lsl.w	r3, r1, r3
 8006582:	43d9      	mvns	r1, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006588:	4313      	orrs	r3, r2
         );
}
 800658a:	4618      	mov	r0, r3
 800658c:	3724      	adds	r7, #36	; 0x24
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b082      	sub	sp, #8
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff ff4c 	bl	800643c <__NVIC_SetPriorityGrouping>
}
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4603      	mov	r3, r0
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80065be:	f7ff ff61 	bl	8006484 <__NVIC_GetPriorityGrouping>
 80065c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	6978      	ldr	r0, [r7, #20]
 80065ca:	f7ff ffb1 	bl	8006530 <NVIC_EncodePriority>
 80065ce:	4602      	mov	r2, r0
 80065d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff ff80 	bl	80064dc <__NVIC_SetPriority>
}
 80065dc:	bf00      	nop
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff ff54 	bl	80064a0 <__NVIC_EnableIRQ>
}
 80065f8:	bf00      	nop
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e00e      	b.n	8006630 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	795b      	ldrb	r3, [r3, #5]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d105      	bne.n	8006628 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fa ff06 	bl	8001434 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006644:	f7ff fc58 	bl	8005ef8 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e099      	b.n	8006788 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0201 	bic.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006674:	e00f      	b.n	8006696 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006676:	f7ff fc3f 	bl	8005ef8 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b05      	cmp	r3, #5
 8006682:	d908      	bls.n	8006696 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2220      	movs	r2, #32
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2203      	movs	r2, #3
 800668e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e078      	b.n	8006788 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e8      	bne.n	8006676 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	4b38      	ldr	r3, [pc, #224]	; (8006790 <HAL_DMA_Init+0x158>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d107      	bne.n	8006700 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	4313      	orrs	r3, r2
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f023 0307 	bic.w	r3, r3, #7
 8006716:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	2b04      	cmp	r3, #4
 8006728:	d117      	bne.n	800675a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	4313      	orrs	r3, r2
 8006732:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00e      	beq.n	800675a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fadf 	bl	8006d00 <DMA_CheckFifoParam>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d008      	beq.n	800675a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2240      	movs	r2, #64	; 0x40
 800674c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006756:	2301      	movs	r3, #1
 8006758:	e016      	b.n	8006788 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa96 	bl	8006c94 <DMA_CalcBaseAndBitshift>
 8006768:	4603      	mov	r3, r0
 800676a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006770:	223f      	movs	r2, #63	; 0x3f
 8006772:	409a      	lsls	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	f010803f 	.word	0xf010803f

08006794 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_DMA_Start_IT+0x26>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e040      	b.n	800683c <HAL_DMA_Start_IT+0xa8>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d12f      	bne.n	800682e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fa28 	bl	8006c38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ec:	223f      	movs	r2, #63	; 0x3f
 80067ee:	409a      	lsls	r2, r3
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0216 	orr.w	r2, r2, #22
 8006802:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	2b00      	cmp	r3, #0
 800680a:	d007      	beq.n	800681c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0208 	orr.w	r2, r2, #8
 800681a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	e005      	b.n	800683a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006836:	2302      	movs	r3, #2
 8006838:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800683a:	7dfb      	ldrb	r3, [r7, #23]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006850:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006852:	f7ff fb51 	bl	8005ef8 <HAL_GetTick>
 8006856:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d008      	beq.n	8006876 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2280      	movs	r2, #128	; 0x80
 8006868:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e052      	b.n	800691c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0216 	bic.w	r2, r2, #22
 8006884:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695a      	ldr	r2, [r3, #20]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006894:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d103      	bne.n	80068a6 <HAL_DMA_Abort+0x62>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0208 	bic.w	r2, r2, #8
 80068b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0201 	bic.w	r2, r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068c6:	e013      	b.n	80068f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068c8:	f7ff fb16 	bl	8005ef8 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b05      	cmp	r3, #5
 80068d4:	d90c      	bls.n	80068f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2203      	movs	r2, #3
 80068e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e015      	b.n	800691c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e4      	bne.n	80068c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006902:	223f      	movs	r2, #63	; 0x3f
 8006904:	409a      	lsls	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006930:	4b8e      	ldr	r3, [pc, #568]	; (8006b6c <HAL_DMA_IRQHandler+0x248>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a8e      	ldr	r2, [pc, #568]	; (8006b70 <HAL_DMA_IRQHandler+0x24c>)
 8006936:	fba2 2303 	umull	r2, r3, r2, r3
 800693a:	0a9b      	lsrs	r3, r3, #10
 800693c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006942:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694e:	2208      	movs	r2, #8
 8006950:	409a      	lsls	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4013      	ands	r3, r2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d01a      	beq.n	8006990 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	d013      	beq.n	8006990 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0204 	bic.w	r2, r2, #4
 8006976:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697c:	2208      	movs	r2, #8
 800697e:	409a      	lsls	r2, r3
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006988:	f043 0201 	orr.w	r2, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006994:	2201      	movs	r2, #1
 8006996:	409a      	lsls	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d012      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b2:	2201      	movs	r2, #1
 80069b4:	409a      	lsls	r2, r3
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069be:	f043 0202 	orr.w	r2, r3, #2
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ca:	2204      	movs	r2, #4
 80069cc:	409a      	lsls	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4013      	ands	r3, r2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d012      	beq.n	80069fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e8:	2204      	movs	r2, #4
 80069ea:	409a      	lsls	r2, r3
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f4:	f043 0204 	orr.w	r2, r3, #4
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a00:	2210      	movs	r2, #16
 8006a02:	409a      	lsls	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d043      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d03c      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1e:	2210      	movs	r2, #16
 8006a20:	409a      	lsls	r2, r3
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d018      	beq.n	8006a66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d108      	bne.n	8006a54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d024      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	4798      	blx	r3
 8006a52:	e01f      	b.n	8006a94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01b      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	4798      	blx	r3
 8006a64:	e016      	b.n	8006a94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d107      	bne.n	8006a84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0208 	bic.w	r2, r2, #8
 8006a82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a98:	2220      	movs	r2, #32
 8006a9a:	409a      	lsls	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 808f 	beq.w	8006bc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0310 	and.w	r3, r3, #16
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8087 	beq.w	8006bc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aba:	2220      	movs	r2, #32
 8006abc:	409a      	lsls	r2, r3
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b05      	cmp	r3, #5
 8006acc:	d136      	bne.n	8006b3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0216 	bic.w	r2, r2, #22
 8006adc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695a      	ldr	r2, [r3, #20]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d103      	bne.n	8006afe <HAL_DMA_IRQHandler+0x1da>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0208 	bic.w	r2, r2, #8
 8006b0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b12:	223f      	movs	r2, #63	; 0x3f
 8006b14:	409a      	lsls	r2, r3
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d07e      	beq.n	8006c30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	4798      	blx	r3
        }
        return;
 8006b3a:	e079      	b.n	8006c30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01d      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10d      	bne.n	8006b74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d031      	beq.n	8006bc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	4798      	blx	r3
 8006b68:	e02c      	b.n	8006bc4 <HAL_DMA_IRQHandler+0x2a0>
 8006b6a:	bf00      	nop
 8006b6c:	2000000c 	.word	0x2000000c
 8006b70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d023      	beq.n	8006bc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	4798      	blx	r3
 8006b84:	e01e      	b.n	8006bc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10f      	bne.n	8006bb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0210 	bic.w	r2, r2, #16
 8006ba2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d032      	beq.n	8006c32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d022      	beq.n	8006c1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2205      	movs	r2, #5
 8006bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0201 	bic.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60bb      	str	r3, [r7, #8]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d307      	bcc.n	8006c0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1f2      	bne.n	8006bf0 <HAL_DMA_IRQHandler+0x2cc>
 8006c0a:	e000      	b.n	8006c0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006c0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	4798      	blx	r3
 8006c2e:	e000      	b.n	8006c32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006c30:	bf00      	nop
    }
  }
}
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	2b40      	cmp	r3, #64	; 0x40
 8006c64:	d108      	bne.n	8006c78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c76:	e007      	b.n	8006c88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	60da      	str	r2, [r3, #12]
}
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	3b10      	subs	r3, #16
 8006ca4:	4a14      	ldr	r2, [pc, #80]	; (8006cf8 <DMA_CalcBaseAndBitshift+0x64>)
 8006ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8006caa:	091b      	lsrs	r3, r3, #4
 8006cac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006cae:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <DMA_CalcBaseAndBitshift+0x68>)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d909      	bls.n	8006cd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cca:	f023 0303 	bic.w	r3, r3, #3
 8006cce:	1d1a      	adds	r2, r3, #4
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	659a      	str	r2, [r3, #88]	; 0x58
 8006cd4:	e007      	b.n	8006ce6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cde:	f023 0303 	bic.w	r3, r3, #3
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	aaaaaaab 	.word	0xaaaaaaab
 8006cfc:	0800e4a0 	.word	0x0800e4a0

08006d00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d11f      	bne.n	8006d5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d856      	bhi.n	8006dce <DMA_CheckFifoParam+0xce>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <DMA_CheckFifoParam+0x28>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d4b 	.word	0x08006d4b
 8006d30:	08006d39 	.word	0x08006d39
 8006d34:	08006dcf 	.word	0x08006dcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d046      	beq.n	8006dd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d48:	e043      	b.n	8006dd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d52:	d140      	bne.n	8006dd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d58:	e03d      	b.n	8006dd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d62:	d121      	bne.n	8006da8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d837      	bhi.n	8006dda <DMA_CheckFifoParam+0xda>
 8006d6a:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <DMA_CheckFifoParam+0x70>)
 8006d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d70:	08006d81 	.word	0x08006d81
 8006d74:	08006d87 	.word	0x08006d87
 8006d78:	08006d81 	.word	0x08006d81
 8006d7c:	08006d99 	.word	0x08006d99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
      break;
 8006d84:	e030      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d025      	beq.n	8006dde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d96:	e022      	b.n	8006dde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006da0:	d11f      	bne.n	8006de2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006da6:	e01c      	b.n	8006de2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d903      	bls.n	8006db6 <DMA_CheckFifoParam+0xb6>
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d003      	beq.n	8006dbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006db4:	e018      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dba:	e015      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00e      	beq.n	8006de6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
      break;
 8006dcc:	e00b      	b.n	8006de6 <DMA_CheckFifoParam+0xe6>
      break;
 8006dce:	bf00      	nop
 8006dd0:	e00a      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      break;
 8006dd2:	bf00      	nop
 8006dd4:	e008      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      break;
 8006dd6:	bf00      	nop
 8006dd8:	e006      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      break;
 8006dda:	bf00      	nop
 8006ddc:	e004      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      break;
 8006dde:	bf00      	nop
 8006de0:	e002      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      break;   
 8006de2:	bf00      	nop
 8006de4:	e000      	b.n	8006de8 <DMA_CheckFifoParam+0xe8>
      break;
 8006de6:	bf00      	nop
    }
  } 
  
  return status; 
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop

08006df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b089      	sub	sp, #36	; 0x24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61fb      	str	r3, [r7, #28]
 8006e12:	e177      	b.n	8007104 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e14:	2201      	movs	r2, #1
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4013      	ands	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	f040 8166 	bne.w	80070fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d005      	beq.n	8006e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d130      	bne.n	8006eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	2203      	movs	r2, #3
 8006e56:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5a:	43db      	mvns	r3, r3
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e80:	2201      	movs	r2, #1
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	091b      	lsrs	r3, r3, #4
 8006e96:	f003 0201 	and.w	r2, r3, #1
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f003 0303 	and.w	r3, r3, #3
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d017      	beq.n	8006ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec8:	43db      	mvns	r3, r3
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d123      	bne.n	8006f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	08da      	lsrs	r2, r3, #3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3208      	adds	r2, #8
 8006efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	220f      	movs	r2, #15
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	43db      	mvns	r3, r3
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	4013      	ands	r3, r2
 8006f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	08da      	lsrs	r2, r3, #3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3208      	adds	r2, #8
 8006f36:	69b9      	ldr	r1, [r7, #24]
 8006f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	2203      	movs	r2, #3
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	4013      	ands	r3, r2
 8006f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f003 0203 	and.w	r2, r3, #3
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	fa02 f303 	lsl.w	r3, r2, r3
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 80c0 	beq.w	80070fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	4b66      	ldr	r3, [pc, #408]	; (800711c <HAL_GPIO_Init+0x324>)
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	4a65      	ldr	r2, [pc, #404]	; (800711c <HAL_GPIO_Init+0x324>)
 8006f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8006f8e:	4b63      	ldr	r3, [pc, #396]	; (800711c <HAL_GPIO_Init+0x324>)
 8006f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f9a:	4a61      	ldr	r2, [pc, #388]	; (8007120 <HAL_GPIO_Init+0x328>)
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	089b      	lsrs	r3, r3, #2
 8006fa0:	3302      	adds	r3, #2
 8006fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	220f      	movs	r2, #15
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	43db      	mvns	r3, r3
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a58      	ldr	r2, [pc, #352]	; (8007124 <HAL_GPIO_Init+0x32c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d037      	beq.n	8007036 <HAL_GPIO_Init+0x23e>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a57      	ldr	r2, [pc, #348]	; (8007128 <HAL_GPIO_Init+0x330>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d031      	beq.n	8007032 <HAL_GPIO_Init+0x23a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a56      	ldr	r2, [pc, #344]	; (800712c <HAL_GPIO_Init+0x334>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d02b      	beq.n	800702e <HAL_GPIO_Init+0x236>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a55      	ldr	r2, [pc, #340]	; (8007130 <HAL_GPIO_Init+0x338>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d025      	beq.n	800702a <HAL_GPIO_Init+0x232>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a54      	ldr	r2, [pc, #336]	; (8007134 <HAL_GPIO_Init+0x33c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d01f      	beq.n	8007026 <HAL_GPIO_Init+0x22e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a53      	ldr	r2, [pc, #332]	; (8007138 <HAL_GPIO_Init+0x340>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d019      	beq.n	8007022 <HAL_GPIO_Init+0x22a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a52      	ldr	r2, [pc, #328]	; (800713c <HAL_GPIO_Init+0x344>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d013      	beq.n	800701e <HAL_GPIO_Init+0x226>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a51      	ldr	r2, [pc, #324]	; (8007140 <HAL_GPIO_Init+0x348>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d00d      	beq.n	800701a <HAL_GPIO_Init+0x222>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a50      	ldr	r2, [pc, #320]	; (8007144 <HAL_GPIO_Init+0x34c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d007      	beq.n	8007016 <HAL_GPIO_Init+0x21e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a4f      	ldr	r2, [pc, #316]	; (8007148 <HAL_GPIO_Init+0x350>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d101      	bne.n	8007012 <HAL_GPIO_Init+0x21a>
 800700e:	2309      	movs	r3, #9
 8007010:	e012      	b.n	8007038 <HAL_GPIO_Init+0x240>
 8007012:	230a      	movs	r3, #10
 8007014:	e010      	b.n	8007038 <HAL_GPIO_Init+0x240>
 8007016:	2308      	movs	r3, #8
 8007018:	e00e      	b.n	8007038 <HAL_GPIO_Init+0x240>
 800701a:	2307      	movs	r3, #7
 800701c:	e00c      	b.n	8007038 <HAL_GPIO_Init+0x240>
 800701e:	2306      	movs	r3, #6
 8007020:	e00a      	b.n	8007038 <HAL_GPIO_Init+0x240>
 8007022:	2305      	movs	r3, #5
 8007024:	e008      	b.n	8007038 <HAL_GPIO_Init+0x240>
 8007026:	2304      	movs	r3, #4
 8007028:	e006      	b.n	8007038 <HAL_GPIO_Init+0x240>
 800702a:	2303      	movs	r3, #3
 800702c:	e004      	b.n	8007038 <HAL_GPIO_Init+0x240>
 800702e:	2302      	movs	r3, #2
 8007030:	e002      	b.n	8007038 <HAL_GPIO_Init+0x240>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <HAL_GPIO_Init+0x240>
 8007036:	2300      	movs	r3, #0
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	f002 0203 	and.w	r2, r2, #3
 800703e:	0092      	lsls	r2, r2, #2
 8007040:	4093      	lsls	r3, r2
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	4313      	orrs	r3, r2
 8007046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007048:	4935      	ldr	r1, [pc, #212]	; (8007120 <HAL_GPIO_Init+0x328>)
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	089b      	lsrs	r3, r3, #2
 800704e:	3302      	adds	r3, #2
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007056:	4b3d      	ldr	r3, [pc, #244]	; (800714c <HAL_GPIO_Init+0x354>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	43db      	mvns	r3, r3
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	4013      	ands	r3, r2
 8007064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800707a:	4a34      	ldr	r2, [pc, #208]	; (800714c <HAL_GPIO_Init+0x354>)
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007080:	4b32      	ldr	r3, [pc, #200]	; (800714c <HAL_GPIO_Init+0x354>)
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	43db      	mvns	r3, r3
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	4013      	ands	r3, r2
 800708e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80070a4:	4a29      	ldr	r2, [pc, #164]	; (800714c <HAL_GPIO_Init+0x354>)
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80070aa:	4b28      	ldr	r3, [pc, #160]	; (800714c <HAL_GPIO_Init+0x354>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	43db      	mvns	r3, r3
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	4013      	ands	r3, r2
 80070b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070ce:	4a1f      	ldr	r2, [pc, #124]	; (800714c <HAL_GPIO_Init+0x354>)
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80070d4:	4b1d      	ldr	r3, [pc, #116]	; (800714c <HAL_GPIO_Init+0x354>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	43db      	mvns	r3, r3
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	4013      	ands	r3, r2
 80070e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070f8:	4a14      	ldr	r2, [pc, #80]	; (800714c <HAL_GPIO_Init+0x354>)
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	3301      	adds	r3, #1
 8007102:	61fb      	str	r3, [r7, #28]
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	2b0f      	cmp	r3, #15
 8007108:	f67f ae84 	bls.w	8006e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	3724      	adds	r7, #36	; 0x24
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	40023800 	.word	0x40023800
 8007120:	40013800 	.word	0x40013800
 8007124:	40020000 	.word	0x40020000
 8007128:	40020400 	.word	0x40020400
 800712c:	40020800 	.word	0x40020800
 8007130:	40020c00 	.word	0x40020c00
 8007134:	40021000 	.word	0x40021000
 8007138:	40021400 	.word	0x40021400
 800713c:	40021800 	.word	0x40021800
 8007140:	40021c00 	.word	0x40021c00
 8007144:	40022000 	.word	0x40022000
 8007148:	40022400 	.word	0x40022400
 800714c:	40013c00 	.word	0x40013c00

08007150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	807b      	strh	r3, [r7, #2]
 800715c:	4613      	mov	r3, r2
 800715e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007160:	787b      	ldrb	r3, [r7, #1]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007166:	887a      	ldrh	r2, [r7, #2]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800716c:	e003      	b.n	8007176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800716e:	887b      	ldrh	r3, [r7, #2]
 8007170:	041a      	lsls	r2, r3, #16
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	619a      	str	r2, [r3, #24]
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
	...

08007184 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800718e:	4b08      	ldr	r3, [pc, #32]	; (80071b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007190:	695a      	ldr	r2, [r3, #20]
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	4013      	ands	r3, r2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d006      	beq.n	80071a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800719a:	4a05      	ldr	r2, [pc, #20]	; (80071b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800719c:	88fb      	ldrh	r3, [r7, #6]
 800719e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071a0:	88fb      	ldrh	r3, [r7, #6]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fb fe90 	bl	8002ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	40013c00 	.word	0x40013c00

080071b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e12b      	b.n	800741e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d106      	bne.n	80071e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fa fc6a 	bl	8001ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2224      	movs	r2, #36	; 0x24
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0201 	bic.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007218:	f001 fb04 	bl	8008824 <HAL_RCC_GetPCLK1Freq>
 800721c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	4a81      	ldr	r2, [pc, #516]	; (8007428 <HAL_I2C_Init+0x274>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d807      	bhi.n	8007238 <HAL_I2C_Init+0x84>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4a80      	ldr	r2, [pc, #512]	; (800742c <HAL_I2C_Init+0x278>)
 800722c:	4293      	cmp	r3, r2
 800722e:	bf94      	ite	ls
 8007230:	2301      	movls	r3, #1
 8007232:	2300      	movhi	r3, #0
 8007234:	b2db      	uxtb	r3, r3
 8007236:	e006      	b.n	8007246 <HAL_I2C_Init+0x92>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4a7d      	ldr	r2, [pc, #500]	; (8007430 <HAL_I2C_Init+0x27c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	bf94      	ite	ls
 8007240:	2301      	movls	r3, #1
 8007242:	2300      	movhi	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e0e7      	b.n	800741e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	4a78      	ldr	r2, [pc, #480]	; (8007434 <HAL_I2C_Init+0x280>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	0c9b      	lsrs	r3, r3, #18
 8007258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	4a6a      	ldr	r2, [pc, #424]	; (8007428 <HAL_I2C_Init+0x274>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d802      	bhi.n	8007288 <HAL_I2C_Init+0xd4>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	3301      	adds	r3, #1
 8007286:	e009      	b.n	800729c <HAL_I2C_Init+0xe8>
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	4a69      	ldr	r2, [pc, #420]	; (8007438 <HAL_I2C_Init+0x284>)
 8007294:	fba2 2303 	umull	r2, r3, r2, r3
 8007298:	099b      	lsrs	r3, r3, #6
 800729a:	3301      	adds	r3, #1
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	430b      	orrs	r3, r1
 80072a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80072ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	495c      	ldr	r1, [pc, #368]	; (8007428 <HAL_I2C_Init+0x274>)
 80072b8:	428b      	cmp	r3, r1
 80072ba:	d819      	bhi.n	80072f0 <HAL_I2C_Init+0x13c>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	1e59      	subs	r1, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80072ca:	1c59      	adds	r1, r3, #1
 80072cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80072d0:	400b      	ands	r3, r1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <HAL_I2C_Init+0x138>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	1e59      	subs	r1, r3, #1
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80072e4:	3301      	adds	r3, #1
 80072e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ea:	e051      	b.n	8007390 <HAL_I2C_Init+0x1dc>
 80072ec:	2304      	movs	r3, #4
 80072ee:	e04f      	b.n	8007390 <HAL_I2C_Init+0x1dc>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d111      	bne.n	800731c <HAL_I2C_Init+0x168>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	1e58      	subs	r0, r3, #1
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6859      	ldr	r1, [r3, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	440b      	add	r3, r1
 8007306:	fbb0 f3f3 	udiv	r3, r0, r3
 800730a:	3301      	adds	r3, #1
 800730c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007310:	2b00      	cmp	r3, #0
 8007312:	bf0c      	ite	eq
 8007314:	2301      	moveq	r3, #1
 8007316:	2300      	movne	r3, #0
 8007318:	b2db      	uxtb	r3, r3
 800731a:	e012      	b.n	8007342 <HAL_I2C_Init+0x18e>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	1e58      	subs	r0, r3, #1
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6859      	ldr	r1, [r3, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	440b      	add	r3, r1
 800732a:	0099      	lsls	r1, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007332:	3301      	adds	r3, #1
 8007334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007338:	2b00      	cmp	r3, #0
 800733a:	bf0c      	ite	eq
 800733c:	2301      	moveq	r3, #1
 800733e:	2300      	movne	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <HAL_I2C_Init+0x196>
 8007346:	2301      	movs	r3, #1
 8007348:	e022      	b.n	8007390 <HAL_I2C_Init+0x1dc>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10e      	bne.n	8007370 <HAL_I2C_Init+0x1bc>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	1e58      	subs	r0, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6859      	ldr	r1, [r3, #4]
 800735a:	460b      	mov	r3, r1
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	440b      	add	r3, r1
 8007360:	fbb0 f3f3 	udiv	r3, r0, r3
 8007364:	3301      	adds	r3, #1
 8007366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800736a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800736e:	e00f      	b.n	8007390 <HAL_I2C_Init+0x1dc>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	1e58      	subs	r0, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6859      	ldr	r1, [r3, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	440b      	add	r3, r1
 800737e:	0099      	lsls	r1, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	fbb0 f3f3 	udiv	r3, r0, r3
 8007386:	3301      	adds	r3, #1
 8007388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800738c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007390:	6879      	ldr	r1, [r7, #4]
 8007392:	6809      	ldr	r1, [r1, #0]
 8007394:	4313      	orrs	r3, r2
 8007396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	69da      	ldr	r2, [r3, #28]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80073be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6911      	ldr	r1, [r2, #16]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	68d2      	ldr	r2, [r2, #12]
 80073ca:	4311      	orrs	r1, r2
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6812      	ldr	r2, [r2, #0]
 80073d0:	430b      	orrs	r3, r1
 80073d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695a      	ldr	r2, [r3, #20]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0201 	orr.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	000186a0 	.word	0x000186a0
 800742c:	001e847f 	.word	0x001e847f
 8007430:	003d08ff 	.word	0x003d08ff
 8007434:	431bde83 	.word	0x431bde83
 8007438:	10624dd3 	.word	0x10624dd3

0800743c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b08c      	sub	sp, #48	; 0x30
 8007440:	af02      	add	r7, sp, #8
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	4608      	mov	r0, r1
 8007446:	4611      	mov	r1, r2
 8007448:	461a      	mov	r2, r3
 800744a:	4603      	mov	r3, r0
 800744c:	817b      	strh	r3, [r7, #10]
 800744e:	460b      	mov	r3, r1
 8007450:	813b      	strh	r3, [r7, #8]
 8007452:	4613      	mov	r3, r2
 8007454:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007456:	f7fe fd4f 	bl	8005ef8 <HAL_GetTick>
 800745a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b20      	cmp	r3, #32
 8007466:	f040 8214 	bne.w	8007892 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	2319      	movs	r3, #25
 8007470:	2201      	movs	r2, #1
 8007472:	497b      	ldr	r1, [pc, #492]	; (8007660 <HAL_I2C_Mem_Read+0x224>)
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fafb 	bl	8007a70 <I2C_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007480:	2302      	movs	r3, #2
 8007482:	e207      	b.n	8007894 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_I2C_Mem_Read+0x56>
 800748e:	2302      	movs	r3, #2
 8007490:	e200      	b.n	8007894 <HAL_I2C_Mem_Read+0x458>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d007      	beq.n	80074b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2222      	movs	r2, #34	; 0x22
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2240      	movs	r2, #64	; 0x40
 80074d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80074e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4a5b      	ldr	r2, [pc, #364]	; (8007664 <HAL_I2C_Mem_Read+0x228>)
 80074f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074fa:	88f8      	ldrh	r0, [r7, #6]
 80074fc:	893a      	ldrh	r2, [r7, #8]
 80074fe:	8979      	ldrh	r1, [r7, #10]
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	9301      	str	r3, [sp, #4]
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	4603      	mov	r3, r0
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 f9c8 	bl	80078a0 <I2C_RequestMemoryRead>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e1bc      	b.n	8007894 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751e:	2b00      	cmp	r3, #0
 8007520:	d113      	bne.n	800754a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007522:	2300      	movs	r3, #0
 8007524:	623b      	str	r3, [r7, #32]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	623b      	str	r3, [r7, #32]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	623b      	str	r3, [r7, #32]
 8007536:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	e190      	b.n	800786c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754e:	2b01      	cmp	r3, #1
 8007550:	d11b      	bne.n	800758a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007560:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	61fb      	str	r3, [r7, #28]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	e170      	b.n	800786c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800758e:	2b02      	cmp	r3, #2
 8007590:	d11b      	bne.n	80075ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075b2:	2300      	movs	r3, #0
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	61bb      	str	r3, [r7, #24]
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	e150      	b.n	800786c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ca:	2300      	movs	r3, #0
 80075cc:	617b      	str	r3, [r7, #20]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80075e0:	e144      	b.n	800786c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	f200 80f1 	bhi.w	80077ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d123      	bne.n	800763c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fb9b 	bl	8007d34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e145      	b.n	8007894 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	691a      	ldr	r2, [r3, #16]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	855a      	strh	r2, [r3, #42]	; 0x2a
 800763a:	e117      	b.n	800786c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007640:	2b02      	cmp	r3, #2
 8007642:	d14e      	bne.n	80076e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	2200      	movs	r2, #0
 800764c:	4906      	ldr	r1, [pc, #24]	; (8007668 <HAL_I2C_Mem_Read+0x22c>)
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 fa0e 	bl	8007a70 <I2C_WaitOnFlagUntilTimeout>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d008      	beq.n	800766c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e11a      	b.n	8007894 <HAL_I2C_Mem_Read+0x458>
 800765e:	bf00      	nop
 8007660:	00100002 	.word	0x00100002
 8007664:	ffff0000 	.word	0xffff0000
 8007668:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800767a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	691a      	ldr	r2, [r3, #16]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	b2d2      	uxtb	r2, r2
 80076ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076e0:	e0c4      	b.n	800786c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e8:	2200      	movs	r2, #0
 80076ea:	496c      	ldr	r1, [pc, #432]	; (800789c <HAL_I2C_Mem_Read+0x460>)
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f9bf 	bl	8007a70 <I2C_WaitOnFlagUntilTimeout>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e0cb      	b.n	8007894 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800770a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691a      	ldr	r2, [r3, #16]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	b2d2      	uxtb	r2, r2
 8007718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007728:	3b01      	subs	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007734:	b29b      	uxth	r3, r3
 8007736:	3b01      	subs	r3, #1
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	2200      	movs	r2, #0
 8007746:	4955      	ldr	r1, [pc, #340]	; (800789c <HAL_I2C_Mem_Read+0x460>)
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 f991 	bl	8007a70 <I2C_WaitOnFlagUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e09d      	b.n	8007894 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	691a      	ldr	r2, [r3, #16]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	b2d2      	uxtb	r2, r2
 8007774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	1c5a      	adds	r2, r3, #1
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b01      	subs	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691a      	ldr	r2, [r3, #16]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	3b01      	subs	r3, #1
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077cc:	e04e      	b.n	800786c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 faae 	bl	8007d34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e058      	b.n	8007894 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	b2d2      	uxtb	r2, r2
 80077ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077fe:	3b01      	subs	r3, #1
 8007800:	b29a      	uxth	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780a:	b29b      	uxth	r3, r3
 800780c:	3b01      	subs	r3, #1
 800780e:	b29a      	uxth	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	f003 0304 	and.w	r3, r3, #4
 800781e:	2b04      	cmp	r3, #4
 8007820:	d124      	bne.n	800786c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007826:	2b03      	cmp	r3, #3
 8007828:	d107      	bne.n	800783a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007838:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	b2d2      	uxtb	r2, r2
 8007846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007856:	3b01      	subs	r3, #1
 8007858:	b29a      	uxth	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007862:	b29b      	uxth	r3, r3
 8007864:	3b01      	subs	r3, #1
 8007866:	b29a      	uxth	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007870:	2b00      	cmp	r3, #0
 8007872:	f47f aeb6 	bne.w	80075e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2220      	movs	r2, #32
 800787a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	e000      	b.n	8007894 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007892:	2302      	movs	r3, #2
  }
}
 8007894:	4618      	mov	r0, r3
 8007896:	3728      	adds	r7, #40	; 0x28
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	00010004 	.word	0x00010004

080078a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af02      	add	r7, sp, #8
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	4608      	mov	r0, r1
 80078aa:	4611      	mov	r1, r2
 80078ac:	461a      	mov	r2, r3
 80078ae:	4603      	mov	r3, r0
 80078b0:	817b      	strh	r3, [r7, #10]
 80078b2:	460b      	mov	r3, r1
 80078b4:	813b      	strh	r3, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f8c2 	bl	8007a70 <I2C_WaitOnFlagUntilTimeout>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00d      	beq.n	800790e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007900:	d103      	bne.n	800790a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007908:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e0aa      	b.n	8007a64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800790e:	897b      	ldrh	r3, [r7, #10]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	461a      	mov	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800791c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	6a3a      	ldr	r2, [r7, #32]
 8007922:	4952      	ldr	r1, [pc, #328]	; (8007a6c <I2C_RequestMemoryRead+0x1cc>)
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 f91d 	bl	8007b64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e097      	b.n	8007a64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	617b      	str	r3, [r7, #20]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800794a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800794c:	6a39      	ldr	r1, [r7, #32]
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 f9a8 	bl	8007ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00d      	beq.n	8007976 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	2b04      	cmp	r3, #4
 8007960:	d107      	bne.n	8007972 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007970:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e076      	b.n	8007a64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007976:	88fb      	ldrh	r3, [r7, #6]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d105      	bne.n	8007988 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800797c:	893b      	ldrh	r3, [r7, #8]
 800797e:	b2da      	uxtb	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	611a      	str	r2, [r3, #16]
 8007986:	e021      	b.n	80079cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007988:	893b      	ldrh	r3, [r7, #8]
 800798a:	0a1b      	lsrs	r3, r3, #8
 800798c:	b29b      	uxth	r3, r3
 800798e:	b2da      	uxtb	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007998:	6a39      	ldr	r1, [r7, #32]
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 f982 	bl	8007ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00d      	beq.n	80079c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d107      	bne.n	80079be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e050      	b.n	8007a64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079c2:	893b      	ldrh	r3, [r7, #8]
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ce:	6a39      	ldr	r1, [r7, #32]
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 f967 	bl	8007ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00d      	beq.n	80079f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d107      	bne.n	80079f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e035      	b.n	8007a64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 f82b 	bl	8007a70 <I2C_WaitOnFlagUntilTimeout>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00d      	beq.n	8007a3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2e:	d103      	bne.n	8007a38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e013      	b.n	8007a64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a3c:	897b      	ldrh	r3, [r7, #10]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	f043 0301 	orr.w	r3, r3, #1
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	6a3a      	ldr	r2, [r7, #32]
 8007a50:	4906      	ldr	r1, [pc, #24]	; (8007a6c <I2C_RequestMemoryRead+0x1cc>)
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 f886 	bl	8007b64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e000      	b.n	8007a64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3718      	adds	r7, #24
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	00010002 	.word	0x00010002

08007a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	603b      	str	r3, [r7, #0]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a80:	e048      	b.n	8007b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a88:	d044      	beq.n	8007b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a8a:	f7fe fa35 	bl	8005ef8 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d302      	bcc.n	8007aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d139      	bne.n	8007b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	0c1b      	lsrs	r3, r3, #16
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d10d      	bne.n	8007ac6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	43da      	mvns	r2, r3
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bf0c      	ite	eq
 8007abc:	2301      	moveq	r3, #1
 8007abe:	2300      	movne	r3, #0
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	e00c      	b.n	8007ae0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	43da      	mvns	r2, r3
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	bf0c      	ite	eq
 8007ad8:	2301      	moveq	r3, #1
 8007ada:	2300      	movne	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d116      	bne.n	8007b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b00:	f043 0220 	orr.w	r2, r3, #32
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e023      	b.n	8007b5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	0c1b      	lsrs	r3, r3, #16
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d10d      	bne.n	8007b3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	43da      	mvns	r2, r3
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	4013      	ands	r3, r2
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bf0c      	ite	eq
 8007b30:	2301      	moveq	r3, #1
 8007b32:	2300      	movne	r3, #0
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	e00c      	b.n	8007b54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	43da      	mvns	r2, r3
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	4013      	ands	r3, r2
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bf0c      	ite	eq
 8007b4c:	2301      	moveq	r3, #1
 8007b4e:	2300      	movne	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	461a      	mov	r2, r3
 8007b54:	79fb      	ldrb	r3, [r7, #7]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d093      	beq.n	8007a82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b72:	e071      	b.n	8007c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b82:	d123      	bne.n	8007bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb8:	f043 0204 	orr.w	r2, r3, #4
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e067      	b.n	8007c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bd2:	d041      	beq.n	8007c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bd4:	f7fe f990 	bl	8005ef8 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d302      	bcc.n	8007bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d136      	bne.n	8007c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	0c1b      	lsrs	r3, r3, #16
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d10c      	bne.n	8007c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	43da      	mvns	r2, r3
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bf14      	ite	ne
 8007c06:	2301      	movne	r3, #1
 8007c08:	2300      	moveq	r3, #0
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	e00b      	b.n	8007c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	43da      	mvns	r2, r3
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bf14      	ite	ne
 8007c20:	2301      	movne	r3, #1
 8007c22:	2300      	moveq	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d016      	beq.n	8007c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c44:	f043 0220 	orr.w	r2, r3, #32
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e021      	b.n	8007c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	0c1b      	lsrs	r3, r3, #16
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d10c      	bne.n	8007c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	43da      	mvns	r2, r3
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bf14      	ite	ne
 8007c74:	2301      	movne	r3, #1
 8007c76:	2300      	moveq	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	e00b      	b.n	8007c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	43da      	mvns	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4013      	ands	r3, r2
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	bf14      	ite	ne
 8007c8e:	2301      	movne	r3, #1
 8007c90:	2300      	moveq	r3, #0
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f47f af6d 	bne.w	8007b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cb0:	e034      	b.n	8007d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 f89b 	bl	8007dee <I2C_IsAcknowledgeFailed>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e034      	b.n	8007d2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cc8:	d028      	beq.n	8007d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cca:	f7fe f915 	bl	8005ef8 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d302      	bcc.n	8007ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d11d      	bne.n	8007d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cea:	2b80      	cmp	r3, #128	; 0x80
 8007cec:	d016      	beq.n	8007d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	f043 0220 	orr.w	r2, r3, #32
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e007      	b.n	8007d2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d26:	2b80      	cmp	r3, #128	; 0x80
 8007d28:	d1c3      	bne.n	8007cb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d40:	e049      	b.n	8007dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	f003 0310 	and.w	r3, r3, #16
 8007d4c:	2b10      	cmp	r3, #16
 8007d4e:	d119      	bne.n	8007d84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f06f 0210 	mvn.w	r2, #16
 8007d58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e030      	b.n	8007de6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d84:	f7fe f8b8 	bl	8005ef8 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d302      	bcc.n	8007d9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d11d      	bne.n	8007dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da4:	2b40      	cmp	r3, #64	; 0x40
 8007da6:	d016      	beq.n	8007dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2220      	movs	r2, #32
 8007db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	f043 0220 	orr.w	r2, r3, #32
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e007      	b.n	8007de6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de0:	2b40      	cmp	r3, #64	; 0x40
 8007de2:	d1ae      	bne.n	8007d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e04:	d11b      	bne.n	8007e3e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e0e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	f043 0204 	orr.w	r2, r3, #4
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b20      	cmp	r3, #32
 8007e60:	d129      	bne.n	8007eb6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2224      	movs	r2, #36	; 0x24
 8007e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0201 	bic.w	r2, r2, #1
 8007e78:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0210 	bic.w	r2, r2, #16
 8007e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f042 0201 	orr.w	r2, r2, #1
 8007ea8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e000      	b.n	8007eb8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007eb6:	2302      	movs	r3, #2
  }
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b20      	cmp	r3, #32
 8007edc:	d12a      	bne.n	8007f34 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2224      	movs	r2, #36	; 0x24
 8007ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0201 	bic.w	r2, r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007efe:	89fb      	ldrh	r3, [r7, #14]
 8007f00:	f023 030f 	bic.w	r3, r3, #15
 8007f04:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	89fb      	ldrh	r3, [r7, #14]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	89fa      	ldrh	r2, [r7, #14]
 8007f16:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f042 0201 	orr.w	r2, r2, #1
 8007f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	e000      	b.n	8007f36 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007f34:	2302      	movs	r3, #2
  }
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
	...

08007f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e267      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d075      	beq.n	800804e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f62:	4b88      	ldr	r3, [pc, #544]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 030c 	and.w	r3, r3, #12
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d00c      	beq.n	8007f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f6e:	4b85      	ldr	r3, [pc, #532]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f76:	2b08      	cmp	r3, #8
 8007f78:	d112      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f7a:	4b82      	ldr	r3, [pc, #520]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f86:	d10b      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f88:	4b7e      	ldr	r3, [pc, #504]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d05b      	beq.n	800804c <HAL_RCC_OscConfig+0x108>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d157      	bne.n	800804c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e242      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fa8:	d106      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x74>
 8007faa:	4b76      	ldr	r3, [pc, #472]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a75      	ldr	r2, [pc, #468]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	e01d      	b.n	8007ff4 <HAL_RCC_OscConfig+0xb0>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fc0:	d10c      	bne.n	8007fdc <HAL_RCC_OscConfig+0x98>
 8007fc2:	4b70      	ldr	r3, [pc, #448]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a6f      	ldr	r2, [pc, #444]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	4b6d      	ldr	r3, [pc, #436]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a6c      	ldr	r2, [pc, #432]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fd8:	6013      	str	r3, [r2, #0]
 8007fda:	e00b      	b.n	8007ff4 <HAL_RCC_OscConfig+0xb0>
 8007fdc:	4b69      	ldr	r3, [pc, #420]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a68      	ldr	r2, [pc, #416]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	4b66      	ldr	r3, [pc, #408]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a65      	ldr	r2, [pc, #404]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8007fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d013      	beq.n	8008024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ffc:	f7fd ff7c 	bl	8005ef8 <HAL_GetTick>
 8008000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008002:	e008      	b.n	8008016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008004:	f7fd ff78 	bl	8005ef8 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b64      	cmp	r3, #100	; 0x64
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e207      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008016:	4b5b      	ldr	r3, [pc, #364]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0f0      	beq.n	8008004 <HAL_RCC_OscConfig+0xc0>
 8008022:	e014      	b.n	800804e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008024:	f7fd ff68 	bl	8005ef8 <HAL_GetTick>
 8008028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800802a:	e008      	b.n	800803e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800802c:	f7fd ff64 	bl	8005ef8 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b64      	cmp	r3, #100	; 0x64
 8008038:	d901      	bls.n	800803e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e1f3      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800803e:	4b51      	ldr	r3, [pc, #324]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1f0      	bne.n	800802c <HAL_RCC_OscConfig+0xe8>
 800804a:	e000      	b.n	800804e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800804c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d063      	beq.n	8008122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800805a:	4b4a      	ldr	r3, [pc, #296]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 030c 	and.w	r3, r3, #12
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00b      	beq.n	800807e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008066:	4b47      	ldr	r3, [pc, #284]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800806e:	2b08      	cmp	r3, #8
 8008070:	d11c      	bne.n	80080ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008072:	4b44      	ldr	r3, [pc, #272]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d116      	bne.n	80080ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800807e:	4b41      	ldr	r3, [pc, #260]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d005      	beq.n	8008096 <HAL_RCC_OscConfig+0x152>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d001      	beq.n	8008096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e1c7      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008096:	4b3b      	ldr	r3, [pc, #236]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	4937      	ldr	r1, [pc, #220]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080aa:	e03a      	b.n	8008122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d020      	beq.n	80080f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080b4:	4b34      	ldr	r3, [pc, #208]	; (8008188 <HAL_RCC_OscConfig+0x244>)
 80080b6:	2201      	movs	r2, #1
 80080b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ba:	f7fd ff1d 	bl	8005ef8 <HAL_GetTick>
 80080be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080c0:	e008      	b.n	80080d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080c2:	f7fd ff19 	bl	8005ef8 <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d901      	bls.n	80080d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e1a8      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080d4:	4b2b      	ldr	r3, [pc, #172]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0f0      	beq.n	80080c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080e0:	4b28      	ldr	r3, [pc, #160]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	4925      	ldr	r1, [pc, #148]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	600b      	str	r3, [r1, #0]
 80080f4:	e015      	b.n	8008122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080f6:	4b24      	ldr	r3, [pc, #144]	; (8008188 <HAL_RCC_OscConfig+0x244>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080fc:	f7fd fefc 	bl	8005ef8 <HAL_GetTick>
 8008100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008102:	e008      	b.n	8008116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008104:	f7fd fef8 	bl	8005ef8 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d901      	bls.n	8008116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e187      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008116:	4b1b      	ldr	r3, [pc, #108]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f0      	bne.n	8008104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0308 	and.w	r3, r3, #8
 800812a:	2b00      	cmp	r3, #0
 800812c:	d036      	beq.n	800819c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d016      	beq.n	8008164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008136:	4b15      	ldr	r3, [pc, #84]	; (800818c <HAL_RCC_OscConfig+0x248>)
 8008138:	2201      	movs	r2, #1
 800813a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800813c:	f7fd fedc 	bl	8005ef8 <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008144:	f7fd fed8 	bl	8005ef8 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e167      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <HAL_RCC_OscConfig+0x240>)
 8008158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800815a:	f003 0302 	and.w	r3, r3, #2
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f0      	beq.n	8008144 <HAL_RCC_OscConfig+0x200>
 8008162:	e01b      	b.n	800819c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008164:	4b09      	ldr	r3, [pc, #36]	; (800818c <HAL_RCC_OscConfig+0x248>)
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800816a:	f7fd fec5 	bl	8005ef8 <HAL_GetTick>
 800816e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008170:	e00e      	b.n	8008190 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008172:	f7fd fec1 	bl	8005ef8 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d907      	bls.n	8008190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e150      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
 8008184:	40023800 	.word	0x40023800
 8008188:	42470000 	.word	0x42470000
 800818c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008190:	4b88      	ldr	r3, [pc, #544]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 8008192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1ea      	bne.n	8008172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 8097 	beq.w	80082d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081aa:	2300      	movs	r3, #0
 80081ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081ae:	4b81      	ldr	r3, [pc, #516]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10f      	bne.n	80081da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ba:	2300      	movs	r3, #0
 80081bc:	60bb      	str	r3, [r7, #8]
 80081be:	4b7d      	ldr	r3, [pc, #500]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	4a7c      	ldr	r2, [pc, #496]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 80081c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081c8:	6413      	str	r3, [r2, #64]	; 0x40
 80081ca:	4b7a      	ldr	r3, [pc, #488]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081d2:	60bb      	str	r3, [r7, #8]
 80081d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081d6:	2301      	movs	r3, #1
 80081d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081da:	4b77      	ldr	r3, [pc, #476]	; (80083b8 <HAL_RCC_OscConfig+0x474>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d118      	bne.n	8008218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081e6:	4b74      	ldr	r3, [pc, #464]	; (80083b8 <HAL_RCC_OscConfig+0x474>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a73      	ldr	r2, [pc, #460]	; (80083b8 <HAL_RCC_OscConfig+0x474>)
 80081ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081f2:	f7fd fe81 	bl	8005ef8 <HAL_GetTick>
 80081f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081f8:	e008      	b.n	800820c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081fa:	f7fd fe7d 	bl	8005ef8 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	2b02      	cmp	r3, #2
 8008206:	d901      	bls.n	800820c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e10c      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800820c:	4b6a      	ldr	r3, [pc, #424]	; (80083b8 <HAL_RCC_OscConfig+0x474>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008214:	2b00      	cmp	r3, #0
 8008216:	d0f0      	beq.n	80081fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d106      	bne.n	800822e <HAL_RCC_OscConfig+0x2ea>
 8008220:	4b64      	ldr	r3, [pc, #400]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 8008222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008224:	4a63      	ldr	r2, [pc, #396]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 8008226:	f043 0301 	orr.w	r3, r3, #1
 800822a:	6713      	str	r3, [r2, #112]	; 0x70
 800822c:	e01c      	b.n	8008268 <HAL_RCC_OscConfig+0x324>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	2b05      	cmp	r3, #5
 8008234:	d10c      	bne.n	8008250 <HAL_RCC_OscConfig+0x30c>
 8008236:	4b5f      	ldr	r3, [pc, #380]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 8008238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823a:	4a5e      	ldr	r2, [pc, #376]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 800823c:	f043 0304 	orr.w	r3, r3, #4
 8008240:	6713      	str	r3, [r2, #112]	; 0x70
 8008242:	4b5c      	ldr	r3, [pc, #368]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 8008244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008246:	4a5b      	ldr	r2, [pc, #364]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 8008248:	f043 0301 	orr.w	r3, r3, #1
 800824c:	6713      	str	r3, [r2, #112]	; 0x70
 800824e:	e00b      	b.n	8008268 <HAL_RCC_OscConfig+0x324>
 8008250:	4b58      	ldr	r3, [pc, #352]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 8008252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008254:	4a57      	ldr	r2, [pc, #348]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 8008256:	f023 0301 	bic.w	r3, r3, #1
 800825a:	6713      	str	r3, [r2, #112]	; 0x70
 800825c:	4b55      	ldr	r3, [pc, #340]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 800825e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008260:	4a54      	ldr	r2, [pc, #336]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 8008262:	f023 0304 	bic.w	r3, r3, #4
 8008266:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d015      	beq.n	800829c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008270:	f7fd fe42 	bl	8005ef8 <HAL_GetTick>
 8008274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008276:	e00a      	b.n	800828e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008278:	f7fd fe3e 	bl	8005ef8 <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	f241 3288 	movw	r2, #5000	; 0x1388
 8008286:	4293      	cmp	r3, r2
 8008288:	d901      	bls.n	800828e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e0cb      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800828e:	4b49      	ldr	r3, [pc, #292]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d0ee      	beq.n	8008278 <HAL_RCC_OscConfig+0x334>
 800829a:	e014      	b.n	80082c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800829c:	f7fd fe2c 	bl	8005ef8 <HAL_GetTick>
 80082a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082a2:	e00a      	b.n	80082ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082a4:	f7fd fe28 	bl	8005ef8 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d901      	bls.n	80082ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e0b5      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082ba:	4b3e      	ldr	r3, [pc, #248]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 80082bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1ee      	bne.n	80082a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d105      	bne.n	80082d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082cc:	4b39      	ldr	r3, [pc, #228]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 80082ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d0:	4a38      	ldr	r2, [pc, #224]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 80082d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 80a1 	beq.w	8008424 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082e2:	4b34      	ldr	r3, [pc, #208]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 030c 	and.w	r3, r3, #12
 80082ea:	2b08      	cmp	r3, #8
 80082ec:	d05c      	beq.n	80083a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d141      	bne.n	800837a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082f6:	4b31      	ldr	r3, [pc, #196]	; (80083bc <HAL_RCC_OscConfig+0x478>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082fc:	f7fd fdfc 	bl	8005ef8 <HAL_GetTick>
 8008300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008302:	e008      	b.n	8008316 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008304:	f7fd fdf8 	bl	8005ef8 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	2b02      	cmp	r3, #2
 8008310:	d901      	bls.n	8008316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e087      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008316:	4b27      	ldr	r3, [pc, #156]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1f0      	bne.n	8008304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	69da      	ldr	r2, [r3, #28]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	019b      	lsls	r3, r3, #6
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008338:	085b      	lsrs	r3, r3, #1
 800833a:	3b01      	subs	r3, #1
 800833c:	041b      	lsls	r3, r3, #16
 800833e:	431a      	orrs	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	061b      	lsls	r3, r3, #24
 8008346:	491b      	ldr	r1, [pc, #108]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 8008348:	4313      	orrs	r3, r2
 800834a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800834c:	4b1b      	ldr	r3, [pc, #108]	; (80083bc <HAL_RCC_OscConfig+0x478>)
 800834e:	2201      	movs	r2, #1
 8008350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008352:	f7fd fdd1 	bl	8005ef8 <HAL_GetTick>
 8008356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008358:	e008      	b.n	800836c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800835a:	f7fd fdcd 	bl	8005ef8 <HAL_GetTick>
 800835e:	4602      	mov	r2, r0
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	2b02      	cmp	r3, #2
 8008366:	d901      	bls.n	800836c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e05c      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800836c:	4b11      	ldr	r3, [pc, #68]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d0f0      	beq.n	800835a <HAL_RCC_OscConfig+0x416>
 8008378:	e054      	b.n	8008424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800837a:	4b10      	ldr	r3, [pc, #64]	; (80083bc <HAL_RCC_OscConfig+0x478>)
 800837c:	2200      	movs	r2, #0
 800837e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008380:	f7fd fdba 	bl	8005ef8 <HAL_GetTick>
 8008384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008388:	f7fd fdb6 	bl	8005ef8 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b02      	cmp	r3, #2
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e045      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800839a:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <HAL_RCC_OscConfig+0x470>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1f0      	bne.n	8008388 <HAL_RCC_OscConfig+0x444>
 80083a6:	e03d      	b.n	8008424 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d107      	bne.n	80083c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e038      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
 80083b4:	40023800 	.word	0x40023800
 80083b8:	40007000 	.word	0x40007000
 80083bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083c0:	4b1b      	ldr	r3, [pc, #108]	; (8008430 <HAL_RCC_OscConfig+0x4ec>)
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d028      	beq.n	8008420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083d8:	429a      	cmp	r2, r3
 80083da:	d121      	bne.n	8008420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d11a      	bne.n	8008420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80083f0:	4013      	ands	r3, r2
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80083f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d111      	bne.n	8008420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008406:	085b      	lsrs	r3, r3, #1
 8008408:	3b01      	subs	r3, #1
 800840a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800840c:	429a      	cmp	r2, r3
 800840e:	d107      	bne.n	8008420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800841c:	429a      	cmp	r2, r3
 800841e:	d001      	beq.n	8008424 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e000      	b.n	8008426 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	40023800 	.word	0x40023800

08008434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e0cc      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008448:	4b68      	ldr	r3, [pc, #416]	; (80085ec <HAL_RCC_ClockConfig+0x1b8>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 030f 	and.w	r3, r3, #15
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d90c      	bls.n	8008470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008456:	4b65      	ldr	r3, [pc, #404]	; (80085ec <HAL_RCC_ClockConfig+0x1b8>)
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	b2d2      	uxtb	r2, r2
 800845c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800845e:	4b63      	ldr	r3, [pc, #396]	; (80085ec <HAL_RCC_ClockConfig+0x1b8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 030f 	and.w	r3, r3, #15
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d001      	beq.n	8008470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e0b8      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b00      	cmp	r3, #0
 800847a:	d020      	beq.n	80084be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	d005      	beq.n	8008494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008488:	4b59      	ldr	r3, [pc, #356]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	4a58      	ldr	r2, [pc, #352]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 800848e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0308 	and.w	r3, r3, #8
 800849c:	2b00      	cmp	r3, #0
 800849e:	d005      	beq.n	80084ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084a0:	4b53      	ldr	r3, [pc, #332]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	4a52      	ldr	r2, [pc, #328]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80084a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084ac:	4b50      	ldr	r3, [pc, #320]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	494d      	ldr	r1, [pc, #308]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d044      	beq.n	8008554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d107      	bne.n	80084e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084d2:	4b47      	ldr	r3, [pc, #284]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d119      	bne.n	8008512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e07f      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d003      	beq.n	80084f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d107      	bne.n	8008502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084f2:	4b3f      	ldr	r3, [pc, #252]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d109      	bne.n	8008512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e06f      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008502:	4b3b      	ldr	r3, [pc, #236]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e067      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008512:	4b37      	ldr	r3, [pc, #220]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f023 0203 	bic.w	r2, r3, #3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	4934      	ldr	r1, [pc, #208]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008520:	4313      	orrs	r3, r2
 8008522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008524:	f7fd fce8 	bl	8005ef8 <HAL_GetTick>
 8008528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800852a:	e00a      	b.n	8008542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800852c:	f7fd fce4 	bl	8005ef8 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	f241 3288 	movw	r2, #5000	; 0x1388
 800853a:	4293      	cmp	r3, r2
 800853c:	d901      	bls.n	8008542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e04f      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008542:	4b2b      	ldr	r3, [pc, #172]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f003 020c 	and.w	r2, r3, #12
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	429a      	cmp	r2, r3
 8008552:	d1eb      	bne.n	800852c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008554:	4b25      	ldr	r3, [pc, #148]	; (80085ec <HAL_RCC_ClockConfig+0x1b8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 030f 	and.w	r3, r3, #15
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d20c      	bcs.n	800857c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008562:	4b22      	ldr	r3, [pc, #136]	; (80085ec <HAL_RCC_ClockConfig+0x1b8>)
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800856a:	4b20      	ldr	r3, [pc, #128]	; (80085ec <HAL_RCC_ClockConfig+0x1b8>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	429a      	cmp	r2, r3
 8008576:	d001      	beq.n	800857c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e032      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d008      	beq.n	800859a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008588:	4b19      	ldr	r3, [pc, #100]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	4916      	ldr	r1, [pc, #88]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008596:	4313      	orrs	r3, r2
 8008598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0308 	and.w	r3, r3, #8
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085a6:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	490e      	ldr	r1, [pc, #56]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085ba:	f000 f821 	bl	8008600 <HAL_RCC_GetSysClockFreq>
 80085be:	4602      	mov	r2, r0
 80085c0:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	091b      	lsrs	r3, r3, #4
 80085c6:	f003 030f 	and.w	r3, r3, #15
 80085ca:	490a      	ldr	r1, [pc, #40]	; (80085f4 <HAL_RCC_ClockConfig+0x1c0>)
 80085cc:	5ccb      	ldrb	r3, [r1, r3]
 80085ce:	fa22 f303 	lsr.w	r3, r2, r3
 80085d2:	4a09      	ldr	r2, [pc, #36]	; (80085f8 <HAL_RCC_ClockConfig+0x1c4>)
 80085d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085d6:	4b09      	ldr	r3, [pc, #36]	; (80085fc <HAL_RCC_ClockConfig+0x1c8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fc fe96 	bl	800530c <HAL_InitTick>

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	40023c00 	.word	0x40023c00
 80085f0:	40023800 	.word	0x40023800
 80085f4:	0800e488 	.word	0x0800e488
 80085f8:	2000000c 	.word	0x2000000c
 80085fc:	20000010 	.word	0x20000010

08008600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008604:	b094      	sub	sp, #80	; 0x50
 8008606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	647b      	str	r3, [r7, #68]	; 0x44
 800860c:	2300      	movs	r3, #0
 800860e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008610:	2300      	movs	r3, #0
 8008612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008618:	4b79      	ldr	r3, [pc, #484]	; (8008800 <HAL_RCC_GetSysClockFreq+0x200>)
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f003 030c 	and.w	r3, r3, #12
 8008620:	2b08      	cmp	r3, #8
 8008622:	d00d      	beq.n	8008640 <HAL_RCC_GetSysClockFreq+0x40>
 8008624:	2b08      	cmp	r3, #8
 8008626:	f200 80e1 	bhi.w	80087ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <HAL_RCC_GetSysClockFreq+0x34>
 800862e:	2b04      	cmp	r3, #4
 8008630:	d003      	beq.n	800863a <HAL_RCC_GetSysClockFreq+0x3a>
 8008632:	e0db      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008634:	4b73      	ldr	r3, [pc, #460]	; (8008804 <HAL_RCC_GetSysClockFreq+0x204>)
 8008636:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008638:	e0db      	b.n	80087f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800863a:	4b73      	ldr	r3, [pc, #460]	; (8008808 <HAL_RCC_GetSysClockFreq+0x208>)
 800863c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800863e:	e0d8      	b.n	80087f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008640:	4b6f      	ldr	r3, [pc, #444]	; (8008800 <HAL_RCC_GetSysClockFreq+0x200>)
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008648:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800864a:	4b6d      	ldr	r3, [pc, #436]	; (8008800 <HAL_RCC_GetSysClockFreq+0x200>)
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d063      	beq.n	800871e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008656:	4b6a      	ldr	r3, [pc, #424]	; (8008800 <HAL_RCC_GetSysClockFreq+0x200>)
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	099b      	lsrs	r3, r3, #6
 800865c:	2200      	movs	r2, #0
 800865e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008668:	633b      	str	r3, [r7, #48]	; 0x30
 800866a:	2300      	movs	r3, #0
 800866c:	637b      	str	r3, [r7, #52]	; 0x34
 800866e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008672:	4622      	mov	r2, r4
 8008674:	462b      	mov	r3, r5
 8008676:	f04f 0000 	mov.w	r0, #0
 800867a:	f04f 0100 	mov.w	r1, #0
 800867e:	0159      	lsls	r1, r3, #5
 8008680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008684:	0150      	lsls	r0, r2, #5
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	4621      	mov	r1, r4
 800868c:	1a51      	subs	r1, r2, r1
 800868e:	6139      	str	r1, [r7, #16]
 8008690:	4629      	mov	r1, r5
 8008692:	eb63 0301 	sbc.w	r3, r3, r1
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	f04f 0200 	mov.w	r2, #0
 800869c:	f04f 0300 	mov.w	r3, #0
 80086a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086a4:	4659      	mov	r1, fp
 80086a6:	018b      	lsls	r3, r1, #6
 80086a8:	4651      	mov	r1, sl
 80086aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80086ae:	4651      	mov	r1, sl
 80086b0:	018a      	lsls	r2, r1, #6
 80086b2:	4651      	mov	r1, sl
 80086b4:	ebb2 0801 	subs.w	r8, r2, r1
 80086b8:	4659      	mov	r1, fp
 80086ba:	eb63 0901 	sbc.w	r9, r3, r1
 80086be:	f04f 0200 	mov.w	r2, #0
 80086c2:	f04f 0300 	mov.w	r3, #0
 80086c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086d2:	4690      	mov	r8, r2
 80086d4:	4699      	mov	r9, r3
 80086d6:	4623      	mov	r3, r4
 80086d8:	eb18 0303 	adds.w	r3, r8, r3
 80086dc:	60bb      	str	r3, [r7, #8]
 80086de:	462b      	mov	r3, r5
 80086e0:	eb49 0303 	adc.w	r3, r9, r3
 80086e4:	60fb      	str	r3, [r7, #12]
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	f04f 0300 	mov.w	r3, #0
 80086ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80086f2:	4629      	mov	r1, r5
 80086f4:	024b      	lsls	r3, r1, #9
 80086f6:	4621      	mov	r1, r4
 80086f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80086fc:	4621      	mov	r1, r4
 80086fe:	024a      	lsls	r2, r1, #9
 8008700:	4610      	mov	r0, r2
 8008702:	4619      	mov	r1, r3
 8008704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008706:	2200      	movs	r2, #0
 8008708:	62bb      	str	r3, [r7, #40]	; 0x28
 800870a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800870c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008710:	f7f8 fb12 	bl	8000d38 <__aeabi_uldivmod>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4613      	mov	r3, r2
 800871a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800871c:	e058      	b.n	80087d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800871e:	4b38      	ldr	r3, [pc, #224]	; (8008800 <HAL_RCC_GetSysClockFreq+0x200>)
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	099b      	lsrs	r3, r3, #6
 8008724:	2200      	movs	r2, #0
 8008726:	4618      	mov	r0, r3
 8008728:	4611      	mov	r1, r2
 800872a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800872e:	623b      	str	r3, [r7, #32]
 8008730:	2300      	movs	r3, #0
 8008732:	627b      	str	r3, [r7, #36]	; 0x24
 8008734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008738:	4642      	mov	r2, r8
 800873a:	464b      	mov	r3, r9
 800873c:	f04f 0000 	mov.w	r0, #0
 8008740:	f04f 0100 	mov.w	r1, #0
 8008744:	0159      	lsls	r1, r3, #5
 8008746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800874a:	0150      	lsls	r0, r2, #5
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4641      	mov	r1, r8
 8008752:	ebb2 0a01 	subs.w	sl, r2, r1
 8008756:	4649      	mov	r1, r9
 8008758:	eb63 0b01 	sbc.w	fp, r3, r1
 800875c:	f04f 0200 	mov.w	r2, #0
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800876c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008770:	ebb2 040a 	subs.w	r4, r2, sl
 8008774:	eb63 050b 	sbc.w	r5, r3, fp
 8008778:	f04f 0200 	mov.w	r2, #0
 800877c:	f04f 0300 	mov.w	r3, #0
 8008780:	00eb      	lsls	r3, r5, #3
 8008782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008786:	00e2      	lsls	r2, r4, #3
 8008788:	4614      	mov	r4, r2
 800878a:	461d      	mov	r5, r3
 800878c:	4643      	mov	r3, r8
 800878e:	18e3      	adds	r3, r4, r3
 8008790:	603b      	str	r3, [r7, #0]
 8008792:	464b      	mov	r3, r9
 8008794:	eb45 0303 	adc.w	r3, r5, r3
 8008798:	607b      	str	r3, [r7, #4]
 800879a:	f04f 0200 	mov.w	r2, #0
 800879e:	f04f 0300 	mov.w	r3, #0
 80087a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80087a6:	4629      	mov	r1, r5
 80087a8:	028b      	lsls	r3, r1, #10
 80087aa:	4621      	mov	r1, r4
 80087ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087b0:	4621      	mov	r1, r4
 80087b2:	028a      	lsls	r2, r1, #10
 80087b4:	4610      	mov	r0, r2
 80087b6:	4619      	mov	r1, r3
 80087b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ba:	2200      	movs	r2, #0
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	61fa      	str	r2, [r7, #28]
 80087c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087c4:	f7f8 fab8 	bl	8000d38 <__aeabi_uldivmod>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4613      	mov	r3, r2
 80087ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087d0:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <HAL_RCC_GetSysClockFreq+0x200>)
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	0c1b      	lsrs	r3, r3, #16
 80087d6:	f003 0303 	and.w	r3, r3, #3
 80087da:	3301      	adds	r3, #1
 80087dc:	005b      	lsls	r3, r3, #1
 80087de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80087e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80087ea:	e002      	b.n	80087f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087ec:	4b05      	ldr	r3, [pc, #20]	; (8008804 <HAL_RCC_GetSysClockFreq+0x204>)
 80087ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80087f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3750      	adds	r7, #80	; 0x50
 80087f8:	46bd      	mov	sp, r7
 80087fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087fe:	bf00      	nop
 8008800:	40023800 	.word	0x40023800
 8008804:	00f42400 	.word	0x00f42400
 8008808:	007a1200 	.word	0x007a1200

0800880c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800880c:	b480      	push	{r7}
 800880e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008810:	4b03      	ldr	r3, [pc, #12]	; (8008820 <HAL_RCC_GetHCLKFreq+0x14>)
 8008812:	681b      	ldr	r3, [r3, #0]
}
 8008814:	4618      	mov	r0, r3
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	2000000c 	.word	0x2000000c

08008824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008828:	f7ff fff0 	bl	800880c <HAL_RCC_GetHCLKFreq>
 800882c:	4602      	mov	r2, r0
 800882e:	4b05      	ldr	r3, [pc, #20]	; (8008844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	0a9b      	lsrs	r3, r3, #10
 8008834:	f003 0307 	and.w	r3, r3, #7
 8008838:	4903      	ldr	r1, [pc, #12]	; (8008848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800883a:	5ccb      	ldrb	r3, [r1, r3]
 800883c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008840:	4618      	mov	r0, r3
 8008842:	bd80      	pop	{r7, pc}
 8008844:	40023800 	.word	0x40023800
 8008848:	0800e498 	.word	0x0800e498

0800884c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008850:	f7ff ffdc 	bl	800880c <HAL_RCC_GetHCLKFreq>
 8008854:	4602      	mov	r2, r0
 8008856:	4b05      	ldr	r3, [pc, #20]	; (800886c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	0b5b      	lsrs	r3, r3, #13
 800885c:	f003 0307 	and.w	r3, r3, #7
 8008860:	4903      	ldr	r1, [pc, #12]	; (8008870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008862:	5ccb      	ldrb	r3, [r1, r3]
 8008864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008868:	4618      	mov	r0, r3
 800886a:	bd80      	pop	{r7, pc}
 800886c:	40023800 	.word	0x40023800
 8008870:	0800e498 	.word	0x0800e498

08008874 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	220f      	movs	r2, #15
 8008882:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008884:	4b12      	ldr	r3, [pc, #72]	; (80088d0 <HAL_RCC_GetClockConfig+0x5c>)
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f003 0203 	and.w	r2, r3, #3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008890:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <HAL_RCC_GetClockConfig+0x5c>)
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800889c:	4b0c      	ldr	r3, [pc, #48]	; (80088d0 <HAL_RCC_GetClockConfig+0x5c>)
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80088a8:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <HAL_RCC_GetClockConfig+0x5c>)
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	08db      	lsrs	r3, r3, #3
 80088ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80088b6:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <HAL_RCC_GetClockConfig+0x60>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 020f 	and.w	r2, r3, #15
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	601a      	str	r2, [r3, #0]
}
 80088c2:	bf00      	nop
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	40023800 	.word	0x40023800
 80088d4:	40023c00 	.word	0x40023c00

080088d8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e025      	b.n	8008938 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d106      	bne.n	8008906 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7f8 feb9 	bl	8001678 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2202      	movs	r2, #2
 800890a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	3304      	adds	r3, #4
 8008916:	4619      	mov	r1, r3
 8008918:	4610      	mov	r0, r2
 800891a:	f001 ff4f 	bl	800a7bc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	461a      	mov	r2, r3
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	f001 ffa4 	bl	800a876 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e07b      	b.n	8008a4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	2b00      	cmp	r3, #0
 8008958:	d108      	bne.n	800896c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008962:	d009      	beq.n	8008978 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	61da      	str	r2, [r3, #28]
 800896a:	e005      	b.n	8008978 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7fc fc4a 	bl	800522c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089c0:	431a      	orrs	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	431a      	orrs	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	695b      	ldr	r3, [r3, #20]
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089e8:	431a      	orrs	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089f2:	431a      	orrs	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fc:	ea42 0103 	orr.w	r1, r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	0c1b      	lsrs	r3, r3, #16
 8008a16:	f003 0104 	and.w	r1, r3, #4
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	f003 0210 	and.w	r2, r3, #16
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69da      	ldr	r2, [r3, #28]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b082      	sub	sp, #8
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e041      	b.n	8008ae8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d106      	bne.n	8008a7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7fc ff6d 	bl	8005958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2202      	movs	r2, #2
 8008a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4610      	mov	r0, r2
 8008a92:	f000 fc57 	bl	8009344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d001      	beq.n	8008b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e04e      	b.n	8008ba6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f042 0201 	orr.w	r2, r2, #1
 8008b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a23      	ldr	r2, [pc, #140]	; (8008bb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d022      	beq.n	8008b70 <HAL_TIM_Base_Start_IT+0x80>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b32:	d01d      	beq.n	8008b70 <HAL_TIM_Base_Start_IT+0x80>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a1f      	ldr	r2, [pc, #124]	; (8008bb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d018      	beq.n	8008b70 <HAL_TIM_Base_Start_IT+0x80>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a1e      	ldr	r2, [pc, #120]	; (8008bbc <HAL_TIM_Base_Start_IT+0xcc>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d013      	beq.n	8008b70 <HAL_TIM_Base_Start_IT+0x80>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a1c      	ldr	r2, [pc, #112]	; (8008bc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d00e      	beq.n	8008b70 <HAL_TIM_Base_Start_IT+0x80>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a1b      	ldr	r2, [pc, #108]	; (8008bc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d009      	beq.n	8008b70 <HAL_TIM_Base_Start_IT+0x80>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a19      	ldr	r2, [pc, #100]	; (8008bc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d004      	beq.n	8008b70 <HAL_TIM_Base_Start_IT+0x80>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a18      	ldr	r2, [pc, #96]	; (8008bcc <HAL_TIM_Base_Start_IT+0xdc>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d111      	bne.n	8008b94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b06      	cmp	r3, #6
 8008b80:	d010      	beq.n	8008ba4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f042 0201 	orr.w	r2, r2, #1
 8008b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b92:	e007      	b.n	8008ba4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f042 0201 	orr.w	r2, r2, #1
 8008ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	40010000 	.word	0x40010000
 8008bb8:	40000400 	.word	0x40000400
 8008bbc:	40000800 	.word	0x40000800
 8008bc0:	40000c00 	.word	0x40000c00
 8008bc4:	40010400 	.word	0x40010400
 8008bc8:	40014000 	.word	0x40014000
 8008bcc:	40001800 	.word	0x40001800

08008bd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e041      	b.n	8008c66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d106      	bne.n	8008bfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7fc fee6 	bl	80059c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4610      	mov	r0, r2
 8008c10:	f000 fb98 	bl	8009344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d109      	bne.n	8008c94 <HAL_TIM_PWM_Start+0x24>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	bf14      	ite	ne
 8008c8c:	2301      	movne	r3, #1
 8008c8e:	2300      	moveq	r3, #0
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	e022      	b.n	8008cda <HAL_TIM_PWM_Start+0x6a>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d109      	bne.n	8008cae <HAL_TIM_PWM_Start+0x3e>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	bf14      	ite	ne
 8008ca6:	2301      	movne	r3, #1
 8008ca8:	2300      	moveq	r3, #0
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	e015      	b.n	8008cda <HAL_TIM_PWM_Start+0x6a>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b08      	cmp	r3, #8
 8008cb2:	d109      	bne.n	8008cc8 <HAL_TIM_PWM_Start+0x58>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	bf14      	ite	ne
 8008cc0:	2301      	movne	r3, #1
 8008cc2:	2300      	moveq	r3, #0
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	e008      	b.n	8008cda <HAL_TIM_PWM_Start+0x6a>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	bf14      	ite	ne
 8008cd4:	2301      	movne	r3, #1
 8008cd6:	2300      	moveq	r3, #0
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e07c      	b.n	8008ddc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d104      	bne.n	8008cf2 <HAL_TIM_PWM_Start+0x82>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cf0:	e013      	b.n	8008d1a <HAL_TIM_PWM_Start+0xaa>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b04      	cmp	r3, #4
 8008cf6:	d104      	bne.n	8008d02 <HAL_TIM_PWM_Start+0x92>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d00:	e00b      	b.n	8008d1a <HAL_TIM_PWM_Start+0xaa>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	d104      	bne.n	8008d12 <HAL_TIM_PWM_Start+0xa2>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d10:	e003      	b.n	8008d1a <HAL_TIM_PWM_Start+0xaa>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2202      	movs	r2, #2
 8008d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 fe04 	bl	8009930 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a2d      	ldr	r2, [pc, #180]	; (8008de4 <HAL_TIM_PWM_Start+0x174>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d004      	beq.n	8008d3c <HAL_TIM_PWM_Start+0xcc>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a2c      	ldr	r2, [pc, #176]	; (8008de8 <HAL_TIM_PWM_Start+0x178>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d101      	bne.n	8008d40 <HAL_TIM_PWM_Start+0xd0>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e000      	b.n	8008d42 <HAL_TIM_PWM_Start+0xd2>
 8008d40:	2300      	movs	r3, #0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d007      	beq.n	8008d56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a22      	ldr	r2, [pc, #136]	; (8008de4 <HAL_TIM_PWM_Start+0x174>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d022      	beq.n	8008da6 <HAL_TIM_PWM_Start+0x136>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d68:	d01d      	beq.n	8008da6 <HAL_TIM_PWM_Start+0x136>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a1f      	ldr	r2, [pc, #124]	; (8008dec <HAL_TIM_PWM_Start+0x17c>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d018      	beq.n	8008da6 <HAL_TIM_PWM_Start+0x136>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a1d      	ldr	r2, [pc, #116]	; (8008df0 <HAL_TIM_PWM_Start+0x180>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d013      	beq.n	8008da6 <HAL_TIM_PWM_Start+0x136>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a1c      	ldr	r2, [pc, #112]	; (8008df4 <HAL_TIM_PWM_Start+0x184>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00e      	beq.n	8008da6 <HAL_TIM_PWM_Start+0x136>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a16      	ldr	r2, [pc, #88]	; (8008de8 <HAL_TIM_PWM_Start+0x178>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d009      	beq.n	8008da6 <HAL_TIM_PWM_Start+0x136>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <HAL_TIM_PWM_Start+0x188>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d004      	beq.n	8008da6 <HAL_TIM_PWM_Start+0x136>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a16      	ldr	r2, [pc, #88]	; (8008dfc <HAL_TIM_PWM_Start+0x18c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d111      	bne.n	8008dca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f003 0307 	and.w	r3, r3, #7
 8008db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2b06      	cmp	r3, #6
 8008db6:	d010      	beq.n	8008dda <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f042 0201 	orr.w	r2, r2, #1
 8008dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc8:	e007      	b.n	8008dda <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f042 0201 	orr.w	r2, r2, #1
 8008dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	40010000 	.word	0x40010000
 8008de8:	40010400 	.word	0x40010400
 8008dec:	40000400 	.word	0x40000400
 8008df0:	40000800 	.word	0x40000800
 8008df4:	40000c00 	.word	0x40000c00
 8008df8:	40014000 	.word	0x40014000
 8008dfc:	40001800 	.word	0x40001800

08008e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d020      	beq.n	8008e64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01b      	beq.n	8008e64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f06f 0202 	mvn.w	r2, #2
 8008e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fa5b 	bl	8009306 <HAL_TIM_IC_CaptureCallback>
 8008e50:	e005      	b.n	8008e5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fa4d 	bl	80092f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fa5e 	bl	800931a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f003 0304 	and.w	r3, r3, #4
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d020      	beq.n	8008eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d01b      	beq.n	8008eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f06f 0204 	mvn.w	r2, #4
 8008e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2202      	movs	r2, #2
 8008e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fa35 	bl	8009306 <HAL_TIM_IC_CaptureCallback>
 8008e9c:	e005      	b.n	8008eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa27 	bl	80092f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fa38 	bl	800931a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f003 0308 	and.w	r3, r3, #8
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d020      	beq.n	8008efc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f003 0308 	and.w	r3, r3, #8
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d01b      	beq.n	8008efc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f06f 0208 	mvn.w	r2, #8
 8008ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2204      	movs	r2, #4
 8008ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	f003 0303 	and.w	r3, r3, #3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fa0f 	bl	8009306 <HAL_TIM_IC_CaptureCallback>
 8008ee8:	e005      	b.n	8008ef6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa01 	bl	80092f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fa12 	bl	800931a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f003 0310 	and.w	r3, r3, #16
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d020      	beq.n	8008f48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f003 0310 	and.w	r3, r3, #16
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d01b      	beq.n	8008f48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f06f 0210 	mvn.w	r2, #16
 8008f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2208      	movs	r2, #8
 8008f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f9e9 	bl	8009306 <HAL_TIM_IC_CaptureCallback>
 8008f34:	e005      	b.n	8008f42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f9db 	bl	80092f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f9ec 	bl	800931a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00c      	beq.n	8008f6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d007      	beq.n	8008f6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f06f 0201 	mvn.w	r2, #1
 8008f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7f9 ffbe 	bl	8002ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00c      	beq.n	8008f90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d007      	beq.n	8008f90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fd7c 	bl	8009a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00c      	beq.n	8008fb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d007      	beq.n	8008fb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f9bd 	bl	800932e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f003 0320 	and.w	r3, r3, #32
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00c      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d007      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f06f 0220 	mvn.w	r2, #32
 8008fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fd4e 	bl	8009a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fd8:	bf00      	nop
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d101      	bne.n	8008ffe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ffa:	2302      	movs	r3, #2
 8008ffc:	e0ae      	b.n	800915c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b0c      	cmp	r3, #12
 800900a:	f200 809f 	bhi.w	800914c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800900e:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009014:	08009049 	.word	0x08009049
 8009018:	0800914d 	.word	0x0800914d
 800901c:	0800914d 	.word	0x0800914d
 8009020:	0800914d 	.word	0x0800914d
 8009024:	08009089 	.word	0x08009089
 8009028:	0800914d 	.word	0x0800914d
 800902c:	0800914d 	.word	0x0800914d
 8009030:	0800914d 	.word	0x0800914d
 8009034:	080090cb 	.word	0x080090cb
 8009038:	0800914d 	.word	0x0800914d
 800903c:	0800914d 	.word	0x0800914d
 8009040:	0800914d 	.word	0x0800914d
 8009044:	0800910b 	.word	0x0800910b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68b9      	ldr	r1, [r7, #8]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fa24 	bl	800949c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	699a      	ldr	r2, [r3, #24]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f042 0208 	orr.w	r2, r2, #8
 8009062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	699a      	ldr	r2, [r3, #24]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f022 0204 	bic.w	r2, r2, #4
 8009072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6999      	ldr	r1, [r3, #24]
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	691a      	ldr	r2, [r3, #16]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	430a      	orrs	r2, r1
 8009084:	619a      	str	r2, [r3, #24]
      break;
 8009086:	e064      	b.n	8009152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68b9      	ldr	r1, [r7, #8]
 800908e:	4618      	mov	r0, r3
 8009090:	f000 fa74 	bl	800957c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	699a      	ldr	r2, [r3, #24]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	699a      	ldr	r2, [r3, #24]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6999      	ldr	r1, [r3, #24]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	021a      	lsls	r2, r3, #8
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	430a      	orrs	r2, r1
 80090c6:	619a      	str	r2, [r3, #24]
      break;
 80090c8:	e043      	b.n	8009152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fac9 	bl	8009668 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	69da      	ldr	r2, [r3, #28]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0208 	orr.w	r2, r2, #8
 80090e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	69da      	ldr	r2, [r3, #28]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 0204 	bic.w	r2, r2, #4
 80090f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69d9      	ldr	r1, [r3, #28]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	691a      	ldr	r2, [r3, #16]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	430a      	orrs	r2, r1
 8009106:	61da      	str	r2, [r3, #28]
      break;
 8009108:	e023      	b.n	8009152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 fb1d 	bl	8009750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	69da      	ldr	r2, [r3, #28]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69da      	ldr	r2, [r3, #28]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	69d9      	ldr	r1, [r3, #28]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	021a      	lsls	r2, r3, #8
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	430a      	orrs	r2, r1
 8009148:	61da      	str	r2, [r3, #28]
      break;
 800914a:	e002      	b.n	8009152 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	75fb      	strb	r3, [r7, #23]
      break;
 8009150:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800915a:	7dfb      	ldrb	r3, [r7, #23]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009178:	2b01      	cmp	r3, #1
 800917a:	d101      	bne.n	8009180 <HAL_TIM_ConfigClockSource+0x1c>
 800917c:	2302      	movs	r3, #2
 800917e:	e0b4      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x186>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800919e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091b8:	d03e      	beq.n	8009238 <HAL_TIM_ConfigClockSource+0xd4>
 80091ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091be:	f200 8087 	bhi.w	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091c6:	f000 8086 	beq.w	80092d6 <HAL_TIM_ConfigClockSource+0x172>
 80091ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ce:	d87f      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091d0:	2b70      	cmp	r3, #112	; 0x70
 80091d2:	d01a      	beq.n	800920a <HAL_TIM_ConfigClockSource+0xa6>
 80091d4:	2b70      	cmp	r3, #112	; 0x70
 80091d6:	d87b      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091d8:	2b60      	cmp	r3, #96	; 0x60
 80091da:	d050      	beq.n	800927e <HAL_TIM_ConfigClockSource+0x11a>
 80091dc:	2b60      	cmp	r3, #96	; 0x60
 80091de:	d877      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091e0:	2b50      	cmp	r3, #80	; 0x50
 80091e2:	d03c      	beq.n	800925e <HAL_TIM_ConfigClockSource+0xfa>
 80091e4:	2b50      	cmp	r3, #80	; 0x50
 80091e6:	d873      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091e8:	2b40      	cmp	r3, #64	; 0x40
 80091ea:	d058      	beq.n	800929e <HAL_TIM_ConfigClockSource+0x13a>
 80091ec:	2b40      	cmp	r3, #64	; 0x40
 80091ee:	d86f      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091f0:	2b30      	cmp	r3, #48	; 0x30
 80091f2:	d064      	beq.n	80092be <HAL_TIM_ConfigClockSource+0x15a>
 80091f4:	2b30      	cmp	r3, #48	; 0x30
 80091f6:	d86b      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091f8:	2b20      	cmp	r3, #32
 80091fa:	d060      	beq.n	80092be <HAL_TIM_ConfigClockSource+0x15a>
 80091fc:	2b20      	cmp	r3, #32
 80091fe:	d867      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 8009200:	2b00      	cmp	r3, #0
 8009202:	d05c      	beq.n	80092be <HAL_TIM_ConfigClockSource+0x15a>
 8009204:	2b10      	cmp	r3, #16
 8009206:	d05a      	beq.n	80092be <HAL_TIM_ConfigClockSource+0x15a>
 8009208:	e062      	b.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800921a:	f000 fb69 	bl	80098f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800922c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	609a      	str	r2, [r3, #8]
      break;
 8009236:	e04f      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009248:	f000 fb52 	bl	80098f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800925a:	609a      	str	r2, [r3, #8]
      break;
 800925c:	e03c      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800926a:	461a      	mov	r2, r3
 800926c:	f000 fac6 	bl	80097fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2150      	movs	r1, #80	; 0x50
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fb1f 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 800927c:	e02c      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800928a:	461a      	mov	r2, r3
 800928c:	f000 fae5 	bl	800985a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2160      	movs	r1, #96	; 0x60
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fb0f 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 800929c:	e01c      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092aa:	461a      	mov	r2, r3
 80092ac:	f000 faa6 	bl	80097fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2140      	movs	r1, #64	; 0x40
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 faff 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 80092bc:	e00c      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4619      	mov	r1, r3
 80092c8:	4610      	mov	r0, r2
 80092ca:	f000 faf6 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 80092ce:	e003      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	73fb      	strb	r3, [r7, #15]
      break;
 80092d4:	e000      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092fa:	bf00      	nop
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800930e:	bf00      	nop
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009322:	bf00      	nop
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
	...

08009344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a46      	ldr	r2, [pc, #280]	; (8009470 <TIM_Base_SetConfig+0x12c>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d013      	beq.n	8009384 <TIM_Base_SetConfig+0x40>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009362:	d00f      	beq.n	8009384 <TIM_Base_SetConfig+0x40>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a43      	ldr	r2, [pc, #268]	; (8009474 <TIM_Base_SetConfig+0x130>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00b      	beq.n	8009384 <TIM_Base_SetConfig+0x40>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a42      	ldr	r2, [pc, #264]	; (8009478 <TIM_Base_SetConfig+0x134>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d007      	beq.n	8009384 <TIM_Base_SetConfig+0x40>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a41      	ldr	r2, [pc, #260]	; (800947c <TIM_Base_SetConfig+0x138>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d003      	beq.n	8009384 <TIM_Base_SetConfig+0x40>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a40      	ldr	r2, [pc, #256]	; (8009480 <TIM_Base_SetConfig+0x13c>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d108      	bne.n	8009396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800938a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	4313      	orrs	r3, r2
 8009394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a35      	ldr	r2, [pc, #212]	; (8009470 <TIM_Base_SetConfig+0x12c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d02b      	beq.n	80093f6 <TIM_Base_SetConfig+0xb2>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093a4:	d027      	beq.n	80093f6 <TIM_Base_SetConfig+0xb2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a32      	ldr	r2, [pc, #200]	; (8009474 <TIM_Base_SetConfig+0x130>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d023      	beq.n	80093f6 <TIM_Base_SetConfig+0xb2>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a31      	ldr	r2, [pc, #196]	; (8009478 <TIM_Base_SetConfig+0x134>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d01f      	beq.n	80093f6 <TIM_Base_SetConfig+0xb2>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a30      	ldr	r2, [pc, #192]	; (800947c <TIM_Base_SetConfig+0x138>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d01b      	beq.n	80093f6 <TIM_Base_SetConfig+0xb2>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a2f      	ldr	r2, [pc, #188]	; (8009480 <TIM_Base_SetConfig+0x13c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d017      	beq.n	80093f6 <TIM_Base_SetConfig+0xb2>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a2e      	ldr	r2, [pc, #184]	; (8009484 <TIM_Base_SetConfig+0x140>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d013      	beq.n	80093f6 <TIM_Base_SetConfig+0xb2>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a2d      	ldr	r2, [pc, #180]	; (8009488 <TIM_Base_SetConfig+0x144>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d00f      	beq.n	80093f6 <TIM_Base_SetConfig+0xb2>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a2c      	ldr	r2, [pc, #176]	; (800948c <TIM_Base_SetConfig+0x148>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d00b      	beq.n	80093f6 <TIM_Base_SetConfig+0xb2>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a2b      	ldr	r2, [pc, #172]	; (8009490 <TIM_Base_SetConfig+0x14c>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d007      	beq.n	80093f6 <TIM_Base_SetConfig+0xb2>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a2a      	ldr	r2, [pc, #168]	; (8009494 <TIM_Base_SetConfig+0x150>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d003      	beq.n	80093f6 <TIM_Base_SetConfig+0xb2>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a29      	ldr	r2, [pc, #164]	; (8009498 <TIM_Base_SetConfig+0x154>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d108      	bne.n	8009408 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	4313      	orrs	r3, r2
 8009406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	4313      	orrs	r3, r2
 8009414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a10      	ldr	r2, [pc, #64]	; (8009470 <TIM_Base_SetConfig+0x12c>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d003      	beq.n	800943c <TIM_Base_SetConfig+0xf8>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a12      	ldr	r2, [pc, #72]	; (8009480 <TIM_Base_SetConfig+0x13c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d103      	bne.n	8009444 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	691a      	ldr	r2, [r3, #16]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b01      	cmp	r3, #1
 8009454:	d105      	bne.n	8009462 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	f023 0201 	bic.w	r2, r3, #1
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	611a      	str	r2, [r3, #16]
  }
}
 8009462:	bf00      	nop
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	40010000 	.word	0x40010000
 8009474:	40000400 	.word	0x40000400
 8009478:	40000800 	.word	0x40000800
 800947c:	40000c00 	.word	0x40000c00
 8009480:	40010400 	.word	0x40010400
 8009484:	40014000 	.word	0x40014000
 8009488:	40014400 	.word	0x40014400
 800948c:	40014800 	.word	0x40014800
 8009490:	40001800 	.word	0x40001800
 8009494:	40001c00 	.word	0x40001c00
 8009498:	40002000 	.word	0x40002000

0800949c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	f023 0201 	bic.w	r2, r3, #1
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f023 0303 	bic.w	r3, r3, #3
 80094d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	4313      	orrs	r3, r2
 80094dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f023 0302 	bic.w	r3, r3, #2
 80094e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a20      	ldr	r2, [pc, #128]	; (8009574 <TIM_OC1_SetConfig+0xd8>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d003      	beq.n	8009500 <TIM_OC1_SetConfig+0x64>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a1f      	ldr	r2, [pc, #124]	; (8009578 <TIM_OC1_SetConfig+0xdc>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d10c      	bne.n	800951a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	f023 0308 	bic.w	r3, r3, #8
 8009506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	4313      	orrs	r3, r2
 8009510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	f023 0304 	bic.w	r3, r3, #4
 8009518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a15      	ldr	r2, [pc, #84]	; (8009574 <TIM_OC1_SetConfig+0xd8>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d003      	beq.n	800952a <TIM_OC1_SetConfig+0x8e>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a14      	ldr	r2, [pc, #80]	; (8009578 <TIM_OC1_SetConfig+0xdc>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d111      	bne.n	800954e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	4313      	orrs	r3, r2
 8009542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	4313      	orrs	r3, r2
 800954c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	621a      	str	r2, [r3, #32]
}
 8009568:	bf00      	nop
 800956a:	371c      	adds	r7, #28
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	40010000 	.word	0x40010000
 8009578:	40010400 	.word	0x40010400

0800957c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	f023 0210 	bic.w	r2, r3, #16
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	021b      	lsls	r3, r3, #8
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	f023 0320 	bic.w	r3, r3, #32
 80095c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	011b      	lsls	r3, r3, #4
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a22      	ldr	r2, [pc, #136]	; (8009660 <TIM_OC2_SetConfig+0xe4>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d003      	beq.n	80095e4 <TIM_OC2_SetConfig+0x68>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a21      	ldr	r2, [pc, #132]	; (8009664 <TIM_OC2_SetConfig+0xe8>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d10d      	bne.n	8009600 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	011b      	lsls	r3, r3, #4
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a17      	ldr	r2, [pc, #92]	; (8009660 <TIM_OC2_SetConfig+0xe4>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d003      	beq.n	8009610 <TIM_OC2_SetConfig+0x94>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a16      	ldr	r2, [pc, #88]	; (8009664 <TIM_OC2_SetConfig+0xe8>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d113      	bne.n	8009638 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009616:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800961e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	4313      	orrs	r3, r2
 800962a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4313      	orrs	r3, r2
 8009636:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	621a      	str	r2, [r3, #32]
}
 8009652:	bf00      	nop
 8009654:	371c      	adds	r7, #28
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	40010000 	.word	0x40010000
 8009664:	40010400 	.word	0x40010400

08009668 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009668:	b480      	push	{r7}
 800966a:	b087      	sub	sp, #28
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a1b      	ldr	r3, [r3, #32]
 800967c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f023 0303 	bic.w	r3, r3, #3
 800969e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	021b      	lsls	r3, r3, #8
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a21      	ldr	r2, [pc, #132]	; (8009748 <TIM_OC3_SetConfig+0xe0>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d003      	beq.n	80096ce <TIM_OC3_SetConfig+0x66>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a20      	ldr	r2, [pc, #128]	; (800974c <TIM_OC3_SetConfig+0xe4>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d10d      	bne.n	80096ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	021b      	lsls	r3, r3, #8
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	4313      	orrs	r3, r2
 80096e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a16      	ldr	r2, [pc, #88]	; (8009748 <TIM_OC3_SetConfig+0xe0>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d003      	beq.n	80096fa <TIM_OC3_SetConfig+0x92>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a15      	ldr	r2, [pc, #84]	; (800974c <TIM_OC3_SetConfig+0xe4>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d113      	bne.n	8009722 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	011b      	lsls	r3, r3, #4
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	4313      	orrs	r3, r2
 8009714:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	011b      	lsls	r3, r3, #4
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	4313      	orrs	r3, r2
 8009720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	621a      	str	r2, [r3, #32]
}
 800973c:	bf00      	nop
 800973e:	371c      	adds	r7, #28
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	40010000 	.word	0x40010000
 800974c:	40010400 	.word	0x40010400

08009750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009750:	b480      	push	{r7}
 8009752:	b087      	sub	sp, #28
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a1b      	ldr	r3, [r3, #32]
 8009764:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800977e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	021b      	lsls	r3, r3, #8
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	4313      	orrs	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800979a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	031b      	lsls	r3, r3, #12
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a12      	ldr	r2, [pc, #72]	; (80097f4 <TIM_OC4_SetConfig+0xa4>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d003      	beq.n	80097b8 <TIM_OC4_SetConfig+0x68>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a11      	ldr	r2, [pc, #68]	; (80097f8 <TIM_OC4_SetConfig+0xa8>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d109      	bne.n	80097cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	019b      	lsls	r3, r3, #6
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	621a      	str	r2, [r3, #32]
}
 80097e6:	bf00      	nop
 80097e8:	371c      	adds	r7, #28
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	40010000 	.word	0x40010000
 80097f8:	40010400 	.word	0x40010400

080097fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	f023 0201 	bic.w	r2, r3, #1
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	011b      	lsls	r3, r3, #4
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f023 030a 	bic.w	r3, r3, #10
 8009838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	4313      	orrs	r3, r2
 8009840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	621a      	str	r2, [r3, #32]
}
 800984e:	bf00      	nop
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800985a:	b480      	push	{r7}
 800985c:	b087      	sub	sp, #28
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6a1b      	ldr	r3, [r3, #32]
 8009870:	f023 0210 	bic.w	r2, r3, #16
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	031b      	lsls	r3, r3, #12
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	4313      	orrs	r3, r2
 800988e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009896:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	4313      	orrs	r3, r2
 80098a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	621a      	str	r2, [r3, #32]
}
 80098ae:	bf00      	nop
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b085      	sub	sp, #20
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	f043 0307 	orr.w	r3, r3, #7
 80098dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	609a      	str	r2, [r3, #8]
}
 80098e4:	bf00      	nop
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800990a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	021a      	lsls	r2, r3, #8
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	431a      	orrs	r2, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	4313      	orrs	r3, r2
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	4313      	orrs	r3, r2
 800991c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	609a      	str	r2, [r3, #8]
}
 8009924:	bf00      	nop
 8009926:	371c      	adds	r7, #28
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009930:	b480      	push	{r7}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f003 031f 	and.w	r3, r3, #31
 8009942:	2201      	movs	r2, #1
 8009944:	fa02 f303 	lsl.w	r3, r2, r3
 8009948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6a1a      	ldr	r2, [r3, #32]
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	43db      	mvns	r3, r3
 8009952:	401a      	ands	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6a1a      	ldr	r2, [r3, #32]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f003 031f 	and.w	r3, r3, #31
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	fa01 f303 	lsl.w	r3, r1, r3
 8009968:	431a      	orrs	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	621a      	str	r2, [r3, #32]
}
 800996e:	bf00      	nop
 8009970:	371c      	adds	r7, #28
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
	...

0800997c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800998c:	2b01      	cmp	r3, #1
 800998e:	d101      	bne.n	8009994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009990:	2302      	movs	r3, #2
 8009992:	e05a      	b.n	8009a4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a21      	ldr	r2, [pc, #132]	; (8009a58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d022      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e0:	d01d      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a1d      	ldr	r2, [pc, #116]	; (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d018      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a1b      	ldr	r2, [pc, #108]	; (8009a60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d013      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a1a      	ldr	r2, [pc, #104]	; (8009a64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d00e      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a18      	ldr	r2, [pc, #96]	; (8009a68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d009      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a17      	ldr	r2, [pc, #92]	; (8009a6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d004      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a15      	ldr	r2, [pc, #84]	; (8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d10c      	bne.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	68ba      	ldr	r2, [r7, #8]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	40010000 	.word	0x40010000
 8009a5c:	40000400 	.word	0x40000400
 8009a60:	40000800 	.word	0x40000800
 8009a64:	40000c00 	.word	0x40000c00
 8009a68:	40010400 	.word	0x40010400
 8009a6c:	40014000 	.word	0x40014000
 8009a70:	40001800 	.word	0x40001800

08009a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e042      	b.n	8009b34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d106      	bne.n	8009ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7fc f8e6 	bl	8005c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2224      	movs	r2, #36	; 0x24
 8009acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68da      	ldr	r2, [r3, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fbf7 	bl	800a2d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	691a      	ldr	r2, [r3, #16]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	695a      	ldr	r2, [r3, #20]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68da      	ldr	r2, [r3, #12]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2220      	movs	r2, #32
 8009b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b08a      	sub	sp, #40	; 0x28
 8009b40:	af02      	add	r7, sp, #8
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	603b      	str	r3, [r7, #0]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b20      	cmp	r3, #32
 8009b5a:	d175      	bne.n	8009c48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d002      	beq.n	8009b68 <HAL_UART_Transmit+0x2c>
 8009b62:	88fb      	ldrh	r3, [r7, #6]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e06e      	b.n	8009c4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2221      	movs	r2, #33	; 0x21
 8009b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b7a:	f7fc f9bd 	bl	8005ef8 <HAL_GetTick>
 8009b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	88fa      	ldrh	r2, [r7, #6]
 8009b84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	88fa      	ldrh	r2, [r7, #6]
 8009b8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b94:	d108      	bne.n	8009ba8 <HAL_UART_Transmit+0x6c>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d104      	bne.n	8009ba8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	61bb      	str	r3, [r7, #24]
 8009ba6:	e003      	b.n	8009bb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009bac:	2300      	movs	r3, #0
 8009bae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009bb0:	e02e      	b.n	8009c10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	2180      	movs	r1, #128	; 0x80
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 fa0a 	bl	8009fd6 <UART_WaitOnFlagUntilTimeout>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d005      	beq.n	8009bd4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2220      	movs	r2, #32
 8009bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e03a      	b.n	8009c4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10b      	bne.n	8009bf2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	881b      	ldrh	r3, [r3, #0]
 8009bde:	461a      	mov	r2, r3
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009be8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	3302      	adds	r3, #2
 8009bee:	61bb      	str	r3, [r7, #24]
 8009bf0:	e007      	b.n	8009c02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	781a      	ldrb	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1cb      	bne.n	8009bb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2200      	movs	r2, #0
 8009c22:	2140      	movs	r1, #64	; 0x40
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f000 f9d6 	bl	8009fd6 <UART_WaitOnFlagUntilTimeout>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d005      	beq.n	8009c3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2220      	movs	r2, #32
 8009c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e006      	b.n	8009c4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2220      	movs	r2, #32
 8009c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	e000      	b.n	8009c4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009c48:	2302      	movs	r3, #2
  }
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3720      	adds	r7, #32
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	60f8      	str	r0, [r7, #12]
 8009c5a:	60b9      	str	r1, [r7, #8]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b20      	cmp	r3, #32
 8009c6a:	d112      	bne.n	8009c92 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <HAL_UART_Receive_DMA+0x26>
 8009c72:	88fb      	ldrh	r3, [r7, #6]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e00b      	b.n	8009c94 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009c82:	88fb      	ldrh	r3, [r7, #6]
 8009c84:	461a      	mov	r2, r3
 8009c86:	68b9      	ldr	r1, [r7, #8]
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f000 f9fd 	bl	800a088 <UART_Start_Receive_DMA>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	e000      	b.n	8009c94 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009c92:	2302      	movs	r3, #2
  }
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b090      	sub	sp, #64	; 0x40
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb2:	2b80      	cmp	r3, #128	; 0x80
 8009cb4:	bf0c      	ite	eq
 8009cb6:	2301      	moveq	r3, #1
 8009cb8:	2300      	movne	r3, #0
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b21      	cmp	r3, #33	; 0x21
 8009cc8:	d128      	bne.n	8009d1c <HAL_UART_DMAStop+0x80>
 8009cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d025      	beq.n	8009d1c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3314      	adds	r3, #20
 8009cd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	e853 3f00 	ldrex	r3, [r3]
 8009cde:	623b      	str	r3, [r7, #32]
   return(result);
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
 8009ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	3314      	adds	r3, #20
 8009cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cf0:	633a      	str	r2, [r7, #48]	; 0x30
 8009cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cf8:	e841 2300 	strex	r3, r2, [r1]
 8009cfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1e5      	bne.n	8009cd0 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d004      	beq.n	8009d16 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fc fd97 	bl	8006844 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fa50 	bl	800a1bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d26:	2b40      	cmp	r3, #64	; 0x40
 8009d28:	bf0c      	ite	eq
 8009d2a:	2301      	moveq	r3, #1
 8009d2c:	2300      	movne	r3, #0
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b22      	cmp	r3, #34	; 0x22
 8009d3c:	d128      	bne.n	8009d90 <HAL_UART_DMAStop+0xf4>
 8009d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d025      	beq.n	8009d90 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3314      	adds	r3, #20
 8009d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	e853 3f00 	ldrex	r3, [r3]
 8009d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3314      	adds	r3, #20
 8009d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d64:	61fa      	str	r2, [r7, #28]
 8009d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d68:	69b9      	ldr	r1, [r7, #24]
 8009d6a:	69fa      	ldr	r2, [r7, #28]
 8009d6c:	e841 2300 	strex	r3, r2, [r1]
 8009d70:	617b      	str	r3, [r7, #20]
   return(result);
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e5      	bne.n	8009d44 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d004      	beq.n	8009d8a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fc fd5d 	bl	8006844 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fa3e 	bl	800a20c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3740      	adds	r7, #64	; 0x40
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b083      	sub	sp, #12
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b083      	sub	sp, #12
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009db6:	bf00      	nop
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	460b      	mov	r3, r1
 8009dcc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009dce:	bf00      	nop
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b09c      	sub	sp, #112	; 0x70
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d172      	bne.n	8009edc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009df8:	2200      	movs	r2, #0
 8009dfa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	330c      	adds	r3, #12
 8009e02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e06:	e853 3f00 	ldrex	r3, [r3]
 8009e0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	330c      	adds	r3, #12
 8009e1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009e1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e24:	e841 2300 	strex	r3, r2, [r1]
 8009e28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1e5      	bne.n	8009dfc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3314      	adds	r3, #20
 8009e36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3a:	e853 3f00 	ldrex	r3, [r3]
 8009e3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e42:	f023 0301 	bic.w	r3, r3, #1
 8009e46:	667b      	str	r3, [r7, #100]	; 0x64
 8009e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3314      	adds	r3, #20
 8009e4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e50:	647a      	str	r2, [r7, #68]	; 0x44
 8009e52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e5      	bne.n	8009e30 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3314      	adds	r3, #20
 8009e6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6e:	e853 3f00 	ldrex	r3, [r3]
 8009e72:	623b      	str	r3, [r7, #32]
   return(result);
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8009e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3314      	adds	r3, #20
 8009e82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e84:	633a      	str	r2, [r7, #48]	; 0x30
 8009e86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e8c:	e841 2300 	strex	r3, r2, [r1]
 8009e90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1e5      	bne.n	8009e64 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e9a:	2220      	movs	r2, #32
 8009e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d119      	bne.n	8009edc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	330c      	adds	r3, #12
 8009eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	e853 3f00 	ldrex	r3, [r3]
 8009eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f023 0310 	bic.w	r3, r3, #16
 8009ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	330c      	adds	r3, #12
 8009ec6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ec8:	61fa      	str	r2, [r7, #28]
 8009eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ecc:	69b9      	ldr	r1, [r7, #24]
 8009ece:	69fa      	ldr	r2, [r7, #28]
 8009ed0:	e841 2300 	strex	r3, r2, [r1]
 8009ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1e5      	bne.n	8009ea8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ede:	2200      	movs	r2, #0
 8009ee0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d106      	bne.n	8009ef8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009ef2:	f7ff ff66 	bl	8009dc2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ef6:	e002      	b.n	8009efe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009ef8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009efa:	f7f8 fe43 	bl	8002b84 <HAL_UART_RxCpltCallback>
}
 8009efe:	bf00      	nop
 8009f00:	3770      	adds	r7, #112	; 0x70
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b084      	sub	sp, #16
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2201      	movs	r2, #1
 8009f18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d108      	bne.n	8009f34 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f26:	085b      	lsrs	r3, r3, #1
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f7ff ff48 	bl	8009dc2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f32:	e002      	b.n	8009f3a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f7ff ff30 	bl	8009d9a <HAL_UART_RxHalfCpltCallback>
}
 8009f3a:	bf00      	nop
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b084      	sub	sp, #16
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f52:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	695b      	ldr	r3, [r3, #20]
 8009f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f5e:	2b80      	cmp	r3, #128	; 0x80
 8009f60:	bf0c      	ite	eq
 8009f62:	2301      	moveq	r3, #1
 8009f64:	2300      	movne	r3, #0
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	2b21      	cmp	r3, #33	; 0x21
 8009f74:	d108      	bne.n	8009f88 <UART_DMAError+0x46>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d005      	beq.n	8009f88 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009f82:	68b8      	ldr	r0, [r7, #8]
 8009f84:	f000 f91a 	bl	800a1bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f92:	2b40      	cmp	r3, #64	; 0x40
 8009f94:	bf0c      	ite	eq
 8009f96:	2301      	moveq	r3, #1
 8009f98:	2300      	movne	r3, #0
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	2b22      	cmp	r3, #34	; 0x22
 8009fa8:	d108      	bne.n	8009fbc <UART_DMAError+0x7a>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d005      	beq.n	8009fbc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009fb6:	68b8      	ldr	r0, [r7, #8]
 8009fb8:	f000 f928 	bl	800a20c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc0:	f043 0210 	orr.w	r2, r3, #16
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fc8:	68b8      	ldr	r0, [r7, #8]
 8009fca:	f7ff fef0 	bl	8009dae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fce:	bf00      	nop
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b086      	sub	sp, #24
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	60f8      	str	r0, [r7, #12]
 8009fde:	60b9      	str	r1, [r7, #8]
 8009fe0:	603b      	str	r3, [r7, #0]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fe6:	e03b      	b.n	800a060 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fee:	d037      	beq.n	800a060 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ff0:	f7fb ff82 	bl	8005ef8 <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	6a3a      	ldr	r2, [r7, #32]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d302      	bcc.n	800a006 <UART_WaitOnFlagUntilTimeout+0x30>
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a006:	2303      	movs	r3, #3
 800a008:	e03a      	b.n	800a080 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	2b00      	cmp	r3, #0
 800a016:	d023      	beq.n	800a060 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2b80      	cmp	r3, #128	; 0x80
 800a01c:	d020      	beq.n	800a060 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2b40      	cmp	r3, #64	; 0x40
 800a022:	d01d      	beq.n	800a060 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 0308 	and.w	r3, r3, #8
 800a02e:	2b08      	cmp	r3, #8
 800a030:	d116      	bne.n	800a060 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a032:	2300      	movs	r3, #0
 800a034:	617b      	str	r3, [r7, #20]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	617b      	str	r3, [r7, #20]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 f8df 	bl	800a20c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2208      	movs	r2, #8
 800a052:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e00f      	b.n	800a080 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	4013      	ands	r3, r2
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	bf0c      	ite	eq
 800a070:	2301      	moveq	r3, #1
 800a072:	2300      	movne	r3, #0
 800a074:	b2db      	uxtb	r3, r3
 800a076:	461a      	mov	r2, r3
 800a078:	79fb      	ldrb	r3, [r7, #7]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d0b4      	beq.n	8009fe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b098      	sub	sp, #96	; 0x60
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	4613      	mov	r3, r2
 800a094:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	88fa      	ldrh	r2, [r7, #6]
 800a0a0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2222      	movs	r2, #34	; 0x22
 800a0ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b4:	4a3e      	ldr	r2, [pc, #248]	; (800a1b0 <UART_Start_Receive_DMA+0x128>)
 800a0b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0bc:	4a3d      	ldr	r2, [pc, #244]	; (800a1b4 <UART_Start_Receive_DMA+0x12c>)
 800a0be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c4:	4a3c      	ldr	r2, [pc, #240]	; (800a1b8 <UART_Start_Receive_DMA+0x130>)
 800a0c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a0d0:	f107 0308 	add.w	r3, r7, #8
 800a0d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3304      	adds	r3, #4
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	88fb      	ldrh	r3, [r7, #6]
 800a0e8:	f7fc fb54 	bl	8006794 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	613b      	str	r3, [r7, #16]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	613b      	str	r3, [r7, #16]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	613b      	str	r3, [r7, #16]
 800a100:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d019      	beq.n	800a13e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	330c      	adds	r3, #12
 800a110:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a114:	e853 3f00 	ldrex	r3, [r3]
 800a118:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a11c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a120:	65bb      	str	r3, [r7, #88]	; 0x58
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	330c      	adds	r3, #12
 800a128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a12a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a12c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a132:	e841 2300 	strex	r3, r2, [r1]
 800a136:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1e5      	bne.n	800a10a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3314      	adds	r3, #20
 800a144:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a148:	e853 3f00 	ldrex	r3, [r3]
 800a14c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a150:	f043 0301 	orr.w	r3, r3, #1
 800a154:	657b      	str	r3, [r7, #84]	; 0x54
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3314      	adds	r3, #20
 800a15c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a15e:	63ba      	str	r2, [r7, #56]	; 0x38
 800a160:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a162:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a166:	e841 2300 	strex	r3, r2, [r1]
 800a16a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1e5      	bne.n	800a13e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3314      	adds	r3, #20
 800a178:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	e853 3f00 	ldrex	r3, [r3]
 800a180:	617b      	str	r3, [r7, #20]
   return(result);
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a188:	653b      	str	r3, [r7, #80]	; 0x50
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	3314      	adds	r3, #20
 800a190:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a192:	627a      	str	r2, [r7, #36]	; 0x24
 800a194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a196:	6a39      	ldr	r1, [r7, #32]
 800a198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a19a:	e841 2300 	strex	r3, r2, [r1]
 800a19e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1e5      	bne.n	800a172 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3760      	adds	r7, #96	; 0x60
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	08009ddb 	.word	0x08009ddb
 800a1b4:	08009f07 	.word	0x08009f07
 800a1b8:	08009f43 	.word	0x08009f43

0800a1bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b089      	sub	sp, #36	; 0x24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	330c      	adds	r3, #12
 800a1ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	e853 3f00 	ldrex	r3, [r3]
 800a1d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a1da:	61fb      	str	r3, [r7, #28]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	330c      	adds	r3, #12
 800a1e2:	69fa      	ldr	r2, [r7, #28]
 800a1e4:	61ba      	str	r2, [r7, #24]
 800a1e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e8:	6979      	ldr	r1, [r7, #20]
 800a1ea:	69ba      	ldr	r2, [r7, #24]
 800a1ec:	e841 2300 	strex	r3, r2, [r1]
 800a1f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1e5      	bne.n	800a1c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800a200:	bf00      	nop
 800a202:	3724      	adds	r7, #36	; 0x24
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b095      	sub	sp, #84	; 0x54
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	330c      	adds	r3, #12
 800a21a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a21e:	e853 3f00 	ldrex	r3, [r3]
 800a222:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a22a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	330c      	adds	r3, #12
 800a232:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a234:	643a      	str	r2, [r7, #64]	; 0x40
 800a236:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a23a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a23c:	e841 2300 	strex	r3, r2, [r1]
 800a240:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e5      	bne.n	800a214 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3314      	adds	r3, #20
 800a24e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	e853 3f00 	ldrex	r3, [r3]
 800a256:	61fb      	str	r3, [r7, #28]
   return(result);
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	f023 0301 	bic.w	r3, r3, #1
 800a25e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3314      	adds	r3, #20
 800a266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a268:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a26a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a26e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a270:	e841 2300 	strex	r3, r2, [r1]
 800a274:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1e5      	bne.n	800a248 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a280:	2b01      	cmp	r3, #1
 800a282:	d119      	bne.n	800a2b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	330c      	adds	r3, #12
 800a28a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	e853 3f00 	ldrex	r3, [r3]
 800a292:	60bb      	str	r3, [r7, #8]
   return(result);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	f023 0310 	bic.w	r3, r3, #16
 800a29a:	647b      	str	r3, [r7, #68]	; 0x44
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	330c      	adds	r3, #12
 800a2a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2a4:	61ba      	str	r2, [r7, #24]
 800a2a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a8:	6979      	ldr	r1, [r7, #20]
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	e841 2300 	strex	r3, r2, [r1]
 800a2b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1e5      	bne.n	800a284 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2220      	movs	r2, #32
 800a2bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a2c6:	bf00      	nop
 800a2c8:	3754      	adds	r7, #84	; 0x54
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
	...

0800a2d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2d8:	b0c0      	sub	sp, #256	; 0x100
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a2ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2f0:	68d9      	ldr	r1, [r3, #12]
 800a2f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	ea40 0301 	orr.w	r3, r0, r1
 800a2fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a2fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	431a      	orrs	r2, r3
 800a30c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a310:	695b      	ldr	r3, [r3, #20]
 800a312:	431a      	orrs	r2, r3
 800a314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a32c:	f021 010c 	bic.w	r1, r1, #12
 800a330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a33a:	430b      	orrs	r3, r1
 800a33c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a33e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a34a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a34e:	6999      	ldr	r1, [r3, #24]
 800a350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	ea40 0301 	orr.w	r3, r0, r1
 800a35a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a35c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	4b8f      	ldr	r3, [pc, #572]	; (800a5a0 <UART_SetConfig+0x2cc>)
 800a364:	429a      	cmp	r2, r3
 800a366:	d005      	beq.n	800a374 <UART_SetConfig+0xa0>
 800a368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	4b8d      	ldr	r3, [pc, #564]	; (800a5a4 <UART_SetConfig+0x2d0>)
 800a370:	429a      	cmp	r2, r3
 800a372:	d104      	bne.n	800a37e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a374:	f7fe fa6a 	bl	800884c <HAL_RCC_GetPCLK2Freq>
 800a378:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a37c:	e003      	b.n	800a386 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a37e:	f7fe fa51 	bl	8008824 <HAL_RCC_GetPCLK1Freq>
 800a382:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a38a:	69db      	ldr	r3, [r3, #28]
 800a38c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a390:	f040 810c 	bne.w	800a5ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a398:	2200      	movs	r2, #0
 800a39a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a39e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a3a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	462b      	mov	r3, r5
 800a3aa:	1891      	adds	r1, r2, r2
 800a3ac:	65b9      	str	r1, [r7, #88]	; 0x58
 800a3ae:	415b      	adcs	r3, r3
 800a3b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	eb12 0801 	adds.w	r8, r2, r1
 800a3bc:	4629      	mov	r1, r5
 800a3be:	eb43 0901 	adc.w	r9, r3, r1
 800a3c2:	f04f 0200 	mov.w	r2, #0
 800a3c6:	f04f 0300 	mov.w	r3, #0
 800a3ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a3ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a3d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a3d6:	4690      	mov	r8, r2
 800a3d8:	4699      	mov	r9, r3
 800a3da:	4623      	mov	r3, r4
 800a3dc:	eb18 0303 	adds.w	r3, r8, r3
 800a3e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3e4:	462b      	mov	r3, r5
 800a3e6:	eb49 0303 	adc.w	r3, r9, r3
 800a3ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a3ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a3fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a402:	460b      	mov	r3, r1
 800a404:	18db      	adds	r3, r3, r3
 800a406:	653b      	str	r3, [r7, #80]	; 0x50
 800a408:	4613      	mov	r3, r2
 800a40a:	eb42 0303 	adc.w	r3, r2, r3
 800a40e:	657b      	str	r3, [r7, #84]	; 0x54
 800a410:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a414:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a418:	f7f6 fc8e 	bl	8000d38 <__aeabi_uldivmod>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4b61      	ldr	r3, [pc, #388]	; (800a5a8 <UART_SetConfig+0x2d4>)
 800a422:	fba3 2302 	umull	r2, r3, r3, r2
 800a426:	095b      	lsrs	r3, r3, #5
 800a428:	011c      	lsls	r4, r3, #4
 800a42a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a42e:	2200      	movs	r2, #0
 800a430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a434:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a438:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a43c:	4642      	mov	r2, r8
 800a43e:	464b      	mov	r3, r9
 800a440:	1891      	adds	r1, r2, r2
 800a442:	64b9      	str	r1, [r7, #72]	; 0x48
 800a444:	415b      	adcs	r3, r3
 800a446:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a448:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a44c:	4641      	mov	r1, r8
 800a44e:	eb12 0a01 	adds.w	sl, r2, r1
 800a452:	4649      	mov	r1, r9
 800a454:	eb43 0b01 	adc.w	fp, r3, r1
 800a458:	f04f 0200 	mov.w	r2, #0
 800a45c:	f04f 0300 	mov.w	r3, #0
 800a460:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a464:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a46c:	4692      	mov	sl, r2
 800a46e:	469b      	mov	fp, r3
 800a470:	4643      	mov	r3, r8
 800a472:	eb1a 0303 	adds.w	r3, sl, r3
 800a476:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a47a:	464b      	mov	r3, r9
 800a47c:	eb4b 0303 	adc.w	r3, fp, r3
 800a480:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a490:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a494:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a498:	460b      	mov	r3, r1
 800a49a:	18db      	adds	r3, r3, r3
 800a49c:	643b      	str	r3, [r7, #64]	; 0x40
 800a49e:	4613      	mov	r3, r2
 800a4a0:	eb42 0303 	adc.w	r3, r2, r3
 800a4a4:	647b      	str	r3, [r7, #68]	; 0x44
 800a4a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a4aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a4ae:	f7f6 fc43 	bl	8000d38 <__aeabi_uldivmod>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	4b3b      	ldr	r3, [pc, #236]	; (800a5a8 <UART_SetConfig+0x2d4>)
 800a4ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a4be:	095b      	lsrs	r3, r3, #5
 800a4c0:	2264      	movs	r2, #100	; 0x64
 800a4c2:	fb02 f303 	mul.w	r3, r2, r3
 800a4c6:	1acb      	subs	r3, r1, r3
 800a4c8:	00db      	lsls	r3, r3, #3
 800a4ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a4ce:	4b36      	ldr	r3, [pc, #216]	; (800a5a8 <UART_SetConfig+0x2d4>)
 800a4d0:	fba3 2302 	umull	r2, r3, r3, r2
 800a4d4:	095b      	lsrs	r3, r3, #5
 800a4d6:	005b      	lsls	r3, r3, #1
 800a4d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a4dc:	441c      	add	r4, r3
 800a4de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a4ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a4f0:	4642      	mov	r2, r8
 800a4f2:	464b      	mov	r3, r9
 800a4f4:	1891      	adds	r1, r2, r2
 800a4f6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a4f8:	415b      	adcs	r3, r3
 800a4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a500:	4641      	mov	r1, r8
 800a502:	1851      	adds	r1, r2, r1
 800a504:	6339      	str	r1, [r7, #48]	; 0x30
 800a506:	4649      	mov	r1, r9
 800a508:	414b      	adcs	r3, r1
 800a50a:	637b      	str	r3, [r7, #52]	; 0x34
 800a50c:	f04f 0200 	mov.w	r2, #0
 800a510:	f04f 0300 	mov.w	r3, #0
 800a514:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a518:	4659      	mov	r1, fp
 800a51a:	00cb      	lsls	r3, r1, #3
 800a51c:	4651      	mov	r1, sl
 800a51e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a522:	4651      	mov	r1, sl
 800a524:	00ca      	lsls	r2, r1, #3
 800a526:	4610      	mov	r0, r2
 800a528:	4619      	mov	r1, r3
 800a52a:	4603      	mov	r3, r0
 800a52c:	4642      	mov	r2, r8
 800a52e:	189b      	adds	r3, r3, r2
 800a530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a534:	464b      	mov	r3, r9
 800a536:	460a      	mov	r2, r1
 800a538:	eb42 0303 	adc.w	r3, r2, r3
 800a53c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a54c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a550:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a554:	460b      	mov	r3, r1
 800a556:	18db      	adds	r3, r3, r3
 800a558:	62bb      	str	r3, [r7, #40]	; 0x28
 800a55a:	4613      	mov	r3, r2
 800a55c:	eb42 0303 	adc.w	r3, r2, r3
 800a560:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a562:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a566:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a56a:	f7f6 fbe5 	bl	8000d38 <__aeabi_uldivmod>
 800a56e:	4602      	mov	r2, r0
 800a570:	460b      	mov	r3, r1
 800a572:	4b0d      	ldr	r3, [pc, #52]	; (800a5a8 <UART_SetConfig+0x2d4>)
 800a574:	fba3 1302 	umull	r1, r3, r3, r2
 800a578:	095b      	lsrs	r3, r3, #5
 800a57a:	2164      	movs	r1, #100	; 0x64
 800a57c:	fb01 f303 	mul.w	r3, r1, r3
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	00db      	lsls	r3, r3, #3
 800a584:	3332      	adds	r3, #50	; 0x32
 800a586:	4a08      	ldr	r2, [pc, #32]	; (800a5a8 <UART_SetConfig+0x2d4>)
 800a588:	fba2 2303 	umull	r2, r3, r2, r3
 800a58c:	095b      	lsrs	r3, r3, #5
 800a58e:	f003 0207 	and.w	r2, r3, #7
 800a592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4422      	add	r2, r4
 800a59a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a59c:	e106      	b.n	800a7ac <UART_SetConfig+0x4d8>
 800a59e:	bf00      	nop
 800a5a0:	40011000 	.word	0x40011000
 800a5a4:	40011400 	.word	0x40011400
 800a5a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a5ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a5b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a5ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a5be:	4642      	mov	r2, r8
 800a5c0:	464b      	mov	r3, r9
 800a5c2:	1891      	adds	r1, r2, r2
 800a5c4:	6239      	str	r1, [r7, #32]
 800a5c6:	415b      	adcs	r3, r3
 800a5c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a5ce:	4641      	mov	r1, r8
 800a5d0:	1854      	adds	r4, r2, r1
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	eb43 0501 	adc.w	r5, r3, r1
 800a5d8:	f04f 0200 	mov.w	r2, #0
 800a5dc:	f04f 0300 	mov.w	r3, #0
 800a5e0:	00eb      	lsls	r3, r5, #3
 800a5e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a5e6:	00e2      	lsls	r2, r4, #3
 800a5e8:	4614      	mov	r4, r2
 800a5ea:	461d      	mov	r5, r3
 800a5ec:	4643      	mov	r3, r8
 800a5ee:	18e3      	adds	r3, r4, r3
 800a5f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a5f4:	464b      	mov	r3, r9
 800a5f6:	eb45 0303 	adc.w	r3, r5, r3
 800a5fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a5fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a60a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a60e:	f04f 0200 	mov.w	r2, #0
 800a612:	f04f 0300 	mov.w	r3, #0
 800a616:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a61a:	4629      	mov	r1, r5
 800a61c:	008b      	lsls	r3, r1, #2
 800a61e:	4621      	mov	r1, r4
 800a620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a624:	4621      	mov	r1, r4
 800a626:	008a      	lsls	r2, r1, #2
 800a628:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a62c:	f7f6 fb84 	bl	8000d38 <__aeabi_uldivmod>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4b60      	ldr	r3, [pc, #384]	; (800a7b8 <UART_SetConfig+0x4e4>)
 800a636:	fba3 2302 	umull	r2, r3, r3, r2
 800a63a:	095b      	lsrs	r3, r3, #5
 800a63c:	011c      	lsls	r4, r3, #4
 800a63e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a642:	2200      	movs	r2, #0
 800a644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a648:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a64c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a650:	4642      	mov	r2, r8
 800a652:	464b      	mov	r3, r9
 800a654:	1891      	adds	r1, r2, r2
 800a656:	61b9      	str	r1, [r7, #24]
 800a658:	415b      	adcs	r3, r3
 800a65a:	61fb      	str	r3, [r7, #28]
 800a65c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a660:	4641      	mov	r1, r8
 800a662:	1851      	adds	r1, r2, r1
 800a664:	6139      	str	r1, [r7, #16]
 800a666:	4649      	mov	r1, r9
 800a668:	414b      	adcs	r3, r1
 800a66a:	617b      	str	r3, [r7, #20]
 800a66c:	f04f 0200 	mov.w	r2, #0
 800a670:	f04f 0300 	mov.w	r3, #0
 800a674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a678:	4659      	mov	r1, fp
 800a67a:	00cb      	lsls	r3, r1, #3
 800a67c:	4651      	mov	r1, sl
 800a67e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a682:	4651      	mov	r1, sl
 800a684:	00ca      	lsls	r2, r1, #3
 800a686:	4610      	mov	r0, r2
 800a688:	4619      	mov	r1, r3
 800a68a:	4603      	mov	r3, r0
 800a68c:	4642      	mov	r2, r8
 800a68e:	189b      	adds	r3, r3, r2
 800a690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a694:	464b      	mov	r3, r9
 800a696:	460a      	mov	r2, r1
 800a698:	eb42 0303 	adc.w	r3, r2, r3
 800a69c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a6a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a6aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a6ac:	f04f 0200 	mov.w	r2, #0
 800a6b0:	f04f 0300 	mov.w	r3, #0
 800a6b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	008b      	lsls	r3, r1, #2
 800a6bc:	4641      	mov	r1, r8
 800a6be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6c2:	4641      	mov	r1, r8
 800a6c4:	008a      	lsls	r2, r1, #2
 800a6c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a6ca:	f7f6 fb35 	bl	8000d38 <__aeabi_uldivmod>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	4b38      	ldr	r3, [pc, #224]	; (800a7b8 <UART_SetConfig+0x4e4>)
 800a6d6:	fba3 2301 	umull	r2, r3, r3, r1
 800a6da:	095b      	lsrs	r3, r3, #5
 800a6dc:	2264      	movs	r2, #100	; 0x64
 800a6de:	fb02 f303 	mul.w	r3, r2, r3
 800a6e2:	1acb      	subs	r3, r1, r3
 800a6e4:	011b      	lsls	r3, r3, #4
 800a6e6:	3332      	adds	r3, #50	; 0x32
 800a6e8:	4a33      	ldr	r2, [pc, #204]	; (800a7b8 <UART_SetConfig+0x4e4>)
 800a6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ee:	095b      	lsrs	r3, r3, #5
 800a6f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6f4:	441c      	add	r4, r3
 800a6f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	673b      	str	r3, [r7, #112]	; 0x70
 800a6fe:	677a      	str	r2, [r7, #116]	; 0x74
 800a700:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a704:	4642      	mov	r2, r8
 800a706:	464b      	mov	r3, r9
 800a708:	1891      	adds	r1, r2, r2
 800a70a:	60b9      	str	r1, [r7, #8]
 800a70c:	415b      	adcs	r3, r3
 800a70e:	60fb      	str	r3, [r7, #12]
 800a710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a714:	4641      	mov	r1, r8
 800a716:	1851      	adds	r1, r2, r1
 800a718:	6039      	str	r1, [r7, #0]
 800a71a:	4649      	mov	r1, r9
 800a71c:	414b      	adcs	r3, r1
 800a71e:	607b      	str	r3, [r7, #4]
 800a720:	f04f 0200 	mov.w	r2, #0
 800a724:	f04f 0300 	mov.w	r3, #0
 800a728:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a72c:	4659      	mov	r1, fp
 800a72e:	00cb      	lsls	r3, r1, #3
 800a730:	4651      	mov	r1, sl
 800a732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a736:	4651      	mov	r1, sl
 800a738:	00ca      	lsls	r2, r1, #3
 800a73a:	4610      	mov	r0, r2
 800a73c:	4619      	mov	r1, r3
 800a73e:	4603      	mov	r3, r0
 800a740:	4642      	mov	r2, r8
 800a742:	189b      	adds	r3, r3, r2
 800a744:	66bb      	str	r3, [r7, #104]	; 0x68
 800a746:	464b      	mov	r3, r9
 800a748:	460a      	mov	r2, r1
 800a74a:	eb42 0303 	adc.w	r3, r2, r3
 800a74e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	663b      	str	r3, [r7, #96]	; 0x60
 800a75a:	667a      	str	r2, [r7, #100]	; 0x64
 800a75c:	f04f 0200 	mov.w	r2, #0
 800a760:	f04f 0300 	mov.w	r3, #0
 800a764:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a768:	4649      	mov	r1, r9
 800a76a:	008b      	lsls	r3, r1, #2
 800a76c:	4641      	mov	r1, r8
 800a76e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a772:	4641      	mov	r1, r8
 800a774:	008a      	lsls	r2, r1, #2
 800a776:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a77a:	f7f6 fadd 	bl	8000d38 <__aeabi_uldivmod>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	4b0d      	ldr	r3, [pc, #52]	; (800a7b8 <UART_SetConfig+0x4e4>)
 800a784:	fba3 1302 	umull	r1, r3, r3, r2
 800a788:	095b      	lsrs	r3, r3, #5
 800a78a:	2164      	movs	r1, #100	; 0x64
 800a78c:	fb01 f303 	mul.w	r3, r1, r3
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	011b      	lsls	r3, r3, #4
 800a794:	3332      	adds	r3, #50	; 0x32
 800a796:	4a08      	ldr	r2, [pc, #32]	; (800a7b8 <UART_SetConfig+0x4e4>)
 800a798:	fba2 2303 	umull	r2, r3, r2, r3
 800a79c:	095b      	lsrs	r3, r3, #5
 800a79e:	f003 020f 	and.w	r2, r3, #15
 800a7a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4422      	add	r2, r4
 800a7aa:	609a      	str	r2, [r3, #8]
}
 800a7ac:	bf00      	nop
 800a7ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7b8:	51eb851f 	.word	0x51eb851f

0800a7bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d123      	bne.n	800a816 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a7d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	6851      	ldr	r1, [r2, #4]
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	6892      	ldr	r2, [r2, #8]
 800a7e2:	4311      	orrs	r1, r2
 800a7e4:	683a      	ldr	r2, [r7, #0]
 800a7e6:	68d2      	ldr	r2, [r2, #12]
 800a7e8:	4311      	orrs	r1, r2
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	6912      	ldr	r2, [r2, #16]
 800a7ee:	4311      	orrs	r1, r2
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	6952      	ldr	r2, [r2, #20]
 800a7f4:	4311      	orrs	r1, r2
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	6992      	ldr	r2, [r2, #24]
 800a7fa:	4311      	orrs	r1, r2
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	69d2      	ldr	r2, [r2, #28]
 800a800:	4311      	orrs	r1, r2
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	6a12      	ldr	r2, [r2, #32]
 800a806:	4311      	orrs	r1, r2
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a80c:	430a      	orrs	r2, r1
 800a80e:	431a      	orrs	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	e028      	b.n	800a868 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	69d9      	ldr	r1, [r3, #28]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	6a1b      	ldr	r3, [r3, #32]
 800a826:	4319      	orrs	r1, r3
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82c:	430b      	orrs	r3, r1
 800a82e:	431a      	orrs	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a83c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a840:	683a      	ldr	r2, [r7, #0]
 800a842:	6851      	ldr	r1, [r2, #4]
 800a844:	683a      	ldr	r2, [r7, #0]
 800a846:	6892      	ldr	r2, [r2, #8]
 800a848:	4311      	orrs	r1, r2
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	68d2      	ldr	r2, [r2, #12]
 800a84e:	4311      	orrs	r1, r2
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	6912      	ldr	r2, [r2, #16]
 800a854:	4311      	orrs	r1, r2
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	6952      	ldr	r2, [r2, #20]
 800a85a:	4311      	orrs	r1, r2
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	6992      	ldr	r2, [r2, #24]
 800a860:	430a      	orrs	r2, r1
 800a862:	431a      	orrs	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a876:	b480      	push	{r7}
 800a878:	b085      	sub	sp, #20
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	60f8      	str	r0, [r7, #12]
 800a87e:	60b9      	str	r1, [r7, #8]
 800a880:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d128      	bne.n	800a8da <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	1e59      	subs	r1, r3, #1
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	3b01      	subs	r3, #1
 800a89c:	011b      	lsls	r3, r3, #4
 800a89e:	4319      	orrs	r1, r3
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	021b      	lsls	r3, r3, #8
 800a8a8:	4319      	orrs	r1, r3
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	031b      	lsls	r3, r3, #12
 800a8b2:	4319      	orrs	r1, r3
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	041b      	lsls	r3, r3, #16
 800a8bc:	4319      	orrs	r1, r3
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	695b      	ldr	r3, [r3, #20]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	051b      	lsls	r3, r3, #20
 800a8c6:	4319      	orrs	r1, r3
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	061b      	lsls	r3, r3, #24
 800a8d0:	430b      	orrs	r3, r1
 800a8d2:	431a      	orrs	r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	609a      	str	r2, [r3, #8]
 800a8d8:	e02f      	b.n	800a93a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a8e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	68d2      	ldr	r2, [r2, #12]
 800a8ea:	3a01      	subs	r2, #1
 800a8ec:	0311      	lsls	r1, r2, #12
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	6952      	ldr	r2, [r2, #20]
 800a8f2:	3a01      	subs	r2, #1
 800a8f4:	0512      	lsls	r2, r2, #20
 800a8f6:	430a      	orrs	r2, r1
 800a8f8:	431a      	orrs	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	1e59      	subs	r1, r3, #1
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	3b01      	subs	r3, #1
 800a912:	011b      	lsls	r3, r3, #4
 800a914:	4319      	orrs	r1, r3
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	021b      	lsls	r3, r3, #8
 800a91e:	4319      	orrs	r1, r3
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	3b01      	subs	r3, #1
 800a926:	041b      	lsls	r3, r3, #16
 800a928:	4319      	orrs	r1, r3
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	3b01      	subs	r3, #1
 800a930:	061b      	lsls	r3, r3, #24
 800a932:	430b      	orrs	r3, r1
 800a934:	431a      	orrs	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <std>:
 800a948:	2300      	movs	r3, #0
 800a94a:	b510      	push	{r4, lr}
 800a94c:	4604      	mov	r4, r0
 800a94e:	e9c0 3300 	strd	r3, r3, [r0]
 800a952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a956:	6083      	str	r3, [r0, #8]
 800a958:	8181      	strh	r1, [r0, #12]
 800a95a:	6643      	str	r3, [r0, #100]	; 0x64
 800a95c:	81c2      	strh	r2, [r0, #14]
 800a95e:	6183      	str	r3, [r0, #24]
 800a960:	4619      	mov	r1, r3
 800a962:	2208      	movs	r2, #8
 800a964:	305c      	adds	r0, #92	; 0x5c
 800a966:	f000 ff35 	bl	800b7d4 <memset>
 800a96a:	4b0d      	ldr	r3, [pc, #52]	; (800a9a0 <std+0x58>)
 800a96c:	6263      	str	r3, [r4, #36]	; 0x24
 800a96e:	4b0d      	ldr	r3, [pc, #52]	; (800a9a4 <std+0x5c>)
 800a970:	62a3      	str	r3, [r4, #40]	; 0x28
 800a972:	4b0d      	ldr	r3, [pc, #52]	; (800a9a8 <std+0x60>)
 800a974:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a976:	4b0d      	ldr	r3, [pc, #52]	; (800a9ac <std+0x64>)
 800a978:	6323      	str	r3, [r4, #48]	; 0x30
 800a97a:	4b0d      	ldr	r3, [pc, #52]	; (800a9b0 <std+0x68>)
 800a97c:	6224      	str	r4, [r4, #32]
 800a97e:	429c      	cmp	r4, r3
 800a980:	d006      	beq.n	800a990 <std+0x48>
 800a982:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a986:	4294      	cmp	r4, r2
 800a988:	d002      	beq.n	800a990 <std+0x48>
 800a98a:	33d0      	adds	r3, #208	; 0xd0
 800a98c:	429c      	cmp	r4, r3
 800a98e:	d105      	bne.n	800a99c <std+0x54>
 800a990:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a998:	f000 bf4e 	b.w	800b838 <__retarget_lock_init_recursive>
 800a99c:	bd10      	pop	{r4, pc}
 800a99e:	bf00      	nop
 800a9a0:	0800cb5f 	.word	0x0800cb5f
 800a9a4:	0800cb81 	.word	0x0800cb81
 800a9a8:	0800cbb9 	.word	0x0800cbb9
 800a9ac:	0800cbdd 	.word	0x0800cbdd
 800a9b0:	20000618 	.word	0x20000618

0800a9b4 <stdio_exit_handler>:
 800a9b4:	4a02      	ldr	r2, [pc, #8]	; (800a9c0 <stdio_exit_handler+0xc>)
 800a9b6:	4903      	ldr	r1, [pc, #12]	; (800a9c4 <stdio_exit_handler+0x10>)
 800a9b8:	4803      	ldr	r0, [pc, #12]	; (800a9c8 <stdio_exit_handler+0x14>)
 800a9ba:	f000 bedb 	b.w	800b774 <_fwalk_sglue>
 800a9be:	bf00      	nop
 800a9c0:	20000018 	.word	0x20000018
 800a9c4:	0800c19d 	.word	0x0800c19d
 800a9c8:	20000190 	.word	0x20000190

0800a9cc <cleanup_stdio>:
 800a9cc:	6841      	ldr	r1, [r0, #4]
 800a9ce:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <cleanup_stdio+0x34>)
 800a9d0:	4299      	cmp	r1, r3
 800a9d2:	b510      	push	{r4, lr}
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	d001      	beq.n	800a9dc <cleanup_stdio+0x10>
 800a9d8:	f001 fbe0 	bl	800c19c <_fflush_r>
 800a9dc:	68a1      	ldr	r1, [r4, #8]
 800a9de:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <cleanup_stdio+0x38>)
 800a9e0:	4299      	cmp	r1, r3
 800a9e2:	d002      	beq.n	800a9ea <cleanup_stdio+0x1e>
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f001 fbd9 	bl	800c19c <_fflush_r>
 800a9ea:	68e1      	ldr	r1, [r4, #12]
 800a9ec:	4b06      	ldr	r3, [pc, #24]	; (800aa08 <cleanup_stdio+0x3c>)
 800a9ee:	4299      	cmp	r1, r3
 800a9f0:	d004      	beq.n	800a9fc <cleanup_stdio+0x30>
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f8:	f001 bbd0 	b.w	800c19c <_fflush_r>
 800a9fc:	bd10      	pop	{r4, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000618 	.word	0x20000618
 800aa04:	20000680 	.word	0x20000680
 800aa08:	200006e8 	.word	0x200006e8

0800aa0c <global_stdio_init.part.0>:
 800aa0c:	b510      	push	{r4, lr}
 800aa0e:	4b0b      	ldr	r3, [pc, #44]	; (800aa3c <global_stdio_init.part.0+0x30>)
 800aa10:	4c0b      	ldr	r4, [pc, #44]	; (800aa40 <global_stdio_init.part.0+0x34>)
 800aa12:	4a0c      	ldr	r2, [pc, #48]	; (800aa44 <global_stdio_init.part.0+0x38>)
 800aa14:	601a      	str	r2, [r3, #0]
 800aa16:	4620      	mov	r0, r4
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2104      	movs	r1, #4
 800aa1c:	f7ff ff94 	bl	800a948 <std>
 800aa20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aa24:	2201      	movs	r2, #1
 800aa26:	2109      	movs	r1, #9
 800aa28:	f7ff ff8e 	bl	800a948 <std>
 800aa2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aa30:	2202      	movs	r2, #2
 800aa32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa36:	2112      	movs	r1, #18
 800aa38:	f7ff bf86 	b.w	800a948 <std>
 800aa3c:	20000750 	.word	0x20000750
 800aa40:	20000618 	.word	0x20000618
 800aa44:	0800a9b5 	.word	0x0800a9b5

0800aa48 <__sfp_lock_acquire>:
 800aa48:	4801      	ldr	r0, [pc, #4]	; (800aa50 <__sfp_lock_acquire+0x8>)
 800aa4a:	f000 bef6 	b.w	800b83a <__retarget_lock_acquire_recursive>
 800aa4e:	bf00      	nop
 800aa50:	20000755 	.word	0x20000755

0800aa54 <__sfp_lock_release>:
 800aa54:	4801      	ldr	r0, [pc, #4]	; (800aa5c <__sfp_lock_release+0x8>)
 800aa56:	f000 bef1 	b.w	800b83c <__retarget_lock_release_recursive>
 800aa5a:	bf00      	nop
 800aa5c:	20000755 	.word	0x20000755

0800aa60 <__sinit>:
 800aa60:	b510      	push	{r4, lr}
 800aa62:	4604      	mov	r4, r0
 800aa64:	f7ff fff0 	bl	800aa48 <__sfp_lock_acquire>
 800aa68:	6a23      	ldr	r3, [r4, #32]
 800aa6a:	b11b      	cbz	r3, 800aa74 <__sinit+0x14>
 800aa6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa70:	f7ff bff0 	b.w	800aa54 <__sfp_lock_release>
 800aa74:	4b04      	ldr	r3, [pc, #16]	; (800aa88 <__sinit+0x28>)
 800aa76:	6223      	str	r3, [r4, #32]
 800aa78:	4b04      	ldr	r3, [pc, #16]	; (800aa8c <__sinit+0x2c>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1f5      	bne.n	800aa6c <__sinit+0xc>
 800aa80:	f7ff ffc4 	bl	800aa0c <global_stdio_init.part.0>
 800aa84:	e7f2      	b.n	800aa6c <__sinit+0xc>
 800aa86:	bf00      	nop
 800aa88:	0800a9cd 	.word	0x0800a9cd
 800aa8c:	20000750 	.word	0x20000750

0800aa90 <sulp>:
 800aa90:	b570      	push	{r4, r5, r6, lr}
 800aa92:	4604      	mov	r4, r0
 800aa94:	460d      	mov	r5, r1
 800aa96:	ec45 4b10 	vmov	d0, r4, r5
 800aa9a:	4616      	mov	r6, r2
 800aa9c:	f001 ff1e 	bl	800c8dc <__ulp>
 800aaa0:	ec51 0b10 	vmov	r0, r1, d0
 800aaa4:	b17e      	cbz	r6, 800aac6 <sulp+0x36>
 800aaa6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aaaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	dd09      	ble.n	800aac6 <sulp+0x36>
 800aab2:	051b      	lsls	r3, r3, #20
 800aab4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aab8:	2400      	movs	r4, #0
 800aaba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aabe:	4622      	mov	r2, r4
 800aac0:	462b      	mov	r3, r5
 800aac2:	f7f5 fda1 	bl	8000608 <__aeabi_dmul>
 800aac6:	bd70      	pop	{r4, r5, r6, pc}

0800aac8 <_strtod_l>:
 800aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	ed2d 8b02 	vpush	{d8}
 800aad0:	b09b      	sub	sp, #108	; 0x6c
 800aad2:	4604      	mov	r4, r0
 800aad4:	9213      	str	r2, [sp, #76]	; 0x4c
 800aad6:	2200      	movs	r2, #0
 800aad8:	9216      	str	r2, [sp, #88]	; 0x58
 800aada:	460d      	mov	r5, r1
 800aadc:	f04f 0800 	mov.w	r8, #0
 800aae0:	f04f 0900 	mov.w	r9, #0
 800aae4:	460a      	mov	r2, r1
 800aae6:	9215      	str	r2, [sp, #84]	; 0x54
 800aae8:	7811      	ldrb	r1, [r2, #0]
 800aaea:	292b      	cmp	r1, #43	; 0x2b
 800aaec:	d04c      	beq.n	800ab88 <_strtod_l+0xc0>
 800aaee:	d83a      	bhi.n	800ab66 <_strtod_l+0x9e>
 800aaf0:	290d      	cmp	r1, #13
 800aaf2:	d834      	bhi.n	800ab5e <_strtod_l+0x96>
 800aaf4:	2908      	cmp	r1, #8
 800aaf6:	d834      	bhi.n	800ab62 <_strtod_l+0x9a>
 800aaf8:	2900      	cmp	r1, #0
 800aafa:	d03d      	beq.n	800ab78 <_strtod_l+0xb0>
 800aafc:	2200      	movs	r2, #0
 800aafe:	920a      	str	r2, [sp, #40]	; 0x28
 800ab00:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ab02:	7832      	ldrb	r2, [r6, #0]
 800ab04:	2a30      	cmp	r2, #48	; 0x30
 800ab06:	f040 80b4 	bne.w	800ac72 <_strtod_l+0x1aa>
 800ab0a:	7872      	ldrb	r2, [r6, #1]
 800ab0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ab10:	2a58      	cmp	r2, #88	; 0x58
 800ab12:	d170      	bne.n	800abf6 <_strtod_l+0x12e>
 800ab14:	9302      	str	r3, [sp, #8]
 800ab16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	ab16      	add	r3, sp, #88	; 0x58
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	4a8e      	ldr	r2, [pc, #568]	; (800ad58 <_strtod_l+0x290>)
 800ab20:	ab17      	add	r3, sp, #92	; 0x5c
 800ab22:	a915      	add	r1, sp, #84	; 0x54
 800ab24:	4620      	mov	r0, r4
 800ab26:	f000 ff11 	bl	800b94c <__gethex>
 800ab2a:	f010 070f 	ands.w	r7, r0, #15
 800ab2e:	4605      	mov	r5, r0
 800ab30:	d005      	beq.n	800ab3e <_strtod_l+0x76>
 800ab32:	2f06      	cmp	r7, #6
 800ab34:	d12a      	bne.n	800ab8c <_strtod_l+0xc4>
 800ab36:	3601      	adds	r6, #1
 800ab38:	2300      	movs	r3, #0
 800ab3a:	9615      	str	r6, [sp, #84]	; 0x54
 800ab3c:	930a      	str	r3, [sp, #40]	; 0x28
 800ab3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f040 857f 	bne.w	800b644 <_strtod_l+0xb7c>
 800ab46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab48:	b1db      	cbz	r3, 800ab82 <_strtod_l+0xba>
 800ab4a:	4642      	mov	r2, r8
 800ab4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab50:	ec43 2b10 	vmov	d0, r2, r3
 800ab54:	b01b      	add	sp, #108	; 0x6c
 800ab56:	ecbd 8b02 	vpop	{d8}
 800ab5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5e:	2920      	cmp	r1, #32
 800ab60:	d1cc      	bne.n	800aafc <_strtod_l+0x34>
 800ab62:	3201      	adds	r2, #1
 800ab64:	e7bf      	b.n	800aae6 <_strtod_l+0x1e>
 800ab66:	292d      	cmp	r1, #45	; 0x2d
 800ab68:	d1c8      	bne.n	800aafc <_strtod_l+0x34>
 800ab6a:	2101      	movs	r1, #1
 800ab6c:	910a      	str	r1, [sp, #40]	; 0x28
 800ab6e:	1c51      	adds	r1, r2, #1
 800ab70:	9115      	str	r1, [sp, #84]	; 0x54
 800ab72:	7852      	ldrb	r2, [r2, #1]
 800ab74:	2a00      	cmp	r2, #0
 800ab76:	d1c3      	bne.n	800ab00 <_strtod_l+0x38>
 800ab78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab7a:	9515      	str	r5, [sp, #84]	; 0x54
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f040 855f 	bne.w	800b640 <_strtod_l+0xb78>
 800ab82:	4642      	mov	r2, r8
 800ab84:	464b      	mov	r3, r9
 800ab86:	e7e3      	b.n	800ab50 <_strtod_l+0x88>
 800ab88:	2100      	movs	r1, #0
 800ab8a:	e7ef      	b.n	800ab6c <_strtod_l+0xa4>
 800ab8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab8e:	b13a      	cbz	r2, 800aba0 <_strtod_l+0xd8>
 800ab90:	2135      	movs	r1, #53	; 0x35
 800ab92:	a818      	add	r0, sp, #96	; 0x60
 800ab94:	f001 ff9f 	bl	800cad6 <__copybits>
 800ab98:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f001 fb72 	bl	800c284 <_Bfree>
 800aba0:	3f01      	subs	r7, #1
 800aba2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aba4:	2f04      	cmp	r7, #4
 800aba6:	d806      	bhi.n	800abb6 <_strtod_l+0xee>
 800aba8:	e8df f007 	tbb	[pc, r7]
 800abac:	201d0314 	.word	0x201d0314
 800abb0:	14          	.byte	0x14
 800abb1:	00          	.byte	0x00
 800abb2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800abb6:	05e9      	lsls	r1, r5, #23
 800abb8:	bf48      	it	mi
 800abba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800abbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800abc2:	0d1b      	lsrs	r3, r3, #20
 800abc4:	051b      	lsls	r3, r3, #20
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1b9      	bne.n	800ab3e <_strtod_l+0x76>
 800abca:	f000 fe0b 	bl	800b7e4 <__errno>
 800abce:	2322      	movs	r3, #34	; 0x22
 800abd0:	6003      	str	r3, [r0, #0]
 800abd2:	e7b4      	b.n	800ab3e <_strtod_l+0x76>
 800abd4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800abd8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800abdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800abe0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800abe4:	e7e7      	b.n	800abb6 <_strtod_l+0xee>
 800abe6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ad60 <_strtod_l+0x298>
 800abea:	e7e4      	b.n	800abb6 <_strtod_l+0xee>
 800abec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800abf0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800abf4:	e7df      	b.n	800abb6 <_strtod_l+0xee>
 800abf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abf8:	1c5a      	adds	r2, r3, #1
 800abfa:	9215      	str	r2, [sp, #84]	; 0x54
 800abfc:	785b      	ldrb	r3, [r3, #1]
 800abfe:	2b30      	cmp	r3, #48	; 0x30
 800ac00:	d0f9      	beq.n	800abf6 <_strtod_l+0x12e>
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d09b      	beq.n	800ab3e <_strtod_l+0x76>
 800ac06:	2301      	movs	r3, #1
 800ac08:	f04f 0a00 	mov.w	sl, #0
 800ac0c:	9304      	str	r3, [sp, #16]
 800ac0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac10:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac12:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ac16:	46d3      	mov	fp, sl
 800ac18:	220a      	movs	r2, #10
 800ac1a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ac1c:	7806      	ldrb	r6, [r0, #0]
 800ac1e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ac22:	b2d9      	uxtb	r1, r3
 800ac24:	2909      	cmp	r1, #9
 800ac26:	d926      	bls.n	800ac76 <_strtod_l+0x1ae>
 800ac28:	494c      	ldr	r1, [pc, #304]	; (800ad5c <_strtod_l+0x294>)
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f000 fdc0 	bl	800b7b0 <strncmp>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d030      	beq.n	800ac96 <_strtod_l+0x1ce>
 800ac34:	2000      	movs	r0, #0
 800ac36:	4632      	mov	r2, r6
 800ac38:	9005      	str	r0, [sp, #20]
 800ac3a:	465e      	mov	r6, fp
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2a65      	cmp	r2, #101	; 0x65
 800ac40:	d001      	beq.n	800ac46 <_strtod_l+0x17e>
 800ac42:	2a45      	cmp	r2, #69	; 0x45
 800ac44:	d113      	bne.n	800ac6e <_strtod_l+0x1a6>
 800ac46:	b91e      	cbnz	r6, 800ac50 <_strtod_l+0x188>
 800ac48:	9a04      	ldr	r2, [sp, #16]
 800ac4a:	4302      	orrs	r2, r0
 800ac4c:	d094      	beq.n	800ab78 <_strtod_l+0xb0>
 800ac4e:	2600      	movs	r6, #0
 800ac50:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ac52:	1c6a      	adds	r2, r5, #1
 800ac54:	9215      	str	r2, [sp, #84]	; 0x54
 800ac56:	786a      	ldrb	r2, [r5, #1]
 800ac58:	2a2b      	cmp	r2, #43	; 0x2b
 800ac5a:	d074      	beq.n	800ad46 <_strtod_l+0x27e>
 800ac5c:	2a2d      	cmp	r2, #45	; 0x2d
 800ac5e:	d078      	beq.n	800ad52 <_strtod_l+0x28a>
 800ac60:	f04f 0c00 	mov.w	ip, #0
 800ac64:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ac68:	2909      	cmp	r1, #9
 800ac6a:	d97f      	bls.n	800ad6c <_strtod_l+0x2a4>
 800ac6c:	9515      	str	r5, [sp, #84]	; 0x54
 800ac6e:	2700      	movs	r7, #0
 800ac70:	e09e      	b.n	800adb0 <_strtod_l+0x2e8>
 800ac72:	2300      	movs	r3, #0
 800ac74:	e7c8      	b.n	800ac08 <_strtod_l+0x140>
 800ac76:	f1bb 0f08 	cmp.w	fp, #8
 800ac7a:	bfd8      	it	le
 800ac7c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ac7e:	f100 0001 	add.w	r0, r0, #1
 800ac82:	bfda      	itte	le
 800ac84:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac88:	9309      	strle	r3, [sp, #36]	; 0x24
 800ac8a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ac8e:	f10b 0b01 	add.w	fp, fp, #1
 800ac92:	9015      	str	r0, [sp, #84]	; 0x54
 800ac94:	e7c1      	b.n	800ac1a <_strtod_l+0x152>
 800ac96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	9215      	str	r2, [sp, #84]	; 0x54
 800ac9c:	785a      	ldrb	r2, [r3, #1]
 800ac9e:	f1bb 0f00 	cmp.w	fp, #0
 800aca2:	d037      	beq.n	800ad14 <_strtod_l+0x24c>
 800aca4:	9005      	str	r0, [sp, #20]
 800aca6:	465e      	mov	r6, fp
 800aca8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800acac:	2b09      	cmp	r3, #9
 800acae:	d912      	bls.n	800acd6 <_strtod_l+0x20e>
 800acb0:	2301      	movs	r3, #1
 800acb2:	e7c4      	b.n	800ac3e <_strtod_l+0x176>
 800acb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acb6:	1c5a      	adds	r2, r3, #1
 800acb8:	9215      	str	r2, [sp, #84]	; 0x54
 800acba:	785a      	ldrb	r2, [r3, #1]
 800acbc:	3001      	adds	r0, #1
 800acbe:	2a30      	cmp	r2, #48	; 0x30
 800acc0:	d0f8      	beq.n	800acb4 <_strtod_l+0x1ec>
 800acc2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800acc6:	2b08      	cmp	r3, #8
 800acc8:	f200 84c1 	bhi.w	800b64e <_strtod_l+0xb86>
 800accc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acce:	9005      	str	r0, [sp, #20]
 800acd0:	2000      	movs	r0, #0
 800acd2:	930b      	str	r3, [sp, #44]	; 0x2c
 800acd4:	4606      	mov	r6, r0
 800acd6:	3a30      	subs	r2, #48	; 0x30
 800acd8:	f100 0301 	add.w	r3, r0, #1
 800acdc:	d014      	beq.n	800ad08 <_strtod_l+0x240>
 800acde:	9905      	ldr	r1, [sp, #20]
 800ace0:	4419      	add	r1, r3
 800ace2:	9105      	str	r1, [sp, #20]
 800ace4:	4633      	mov	r3, r6
 800ace6:	eb00 0c06 	add.w	ip, r0, r6
 800acea:	210a      	movs	r1, #10
 800acec:	4563      	cmp	r3, ip
 800acee:	d113      	bne.n	800ad18 <_strtod_l+0x250>
 800acf0:	1833      	adds	r3, r6, r0
 800acf2:	2b08      	cmp	r3, #8
 800acf4:	f106 0601 	add.w	r6, r6, #1
 800acf8:	4406      	add	r6, r0
 800acfa:	dc1a      	bgt.n	800ad32 <_strtod_l+0x26a>
 800acfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acfe:	230a      	movs	r3, #10
 800ad00:	fb03 2301 	mla	r3, r3, r1, r2
 800ad04:	9309      	str	r3, [sp, #36]	; 0x24
 800ad06:	2300      	movs	r3, #0
 800ad08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad0a:	1c51      	adds	r1, r2, #1
 800ad0c:	9115      	str	r1, [sp, #84]	; 0x54
 800ad0e:	7852      	ldrb	r2, [r2, #1]
 800ad10:	4618      	mov	r0, r3
 800ad12:	e7c9      	b.n	800aca8 <_strtod_l+0x1e0>
 800ad14:	4658      	mov	r0, fp
 800ad16:	e7d2      	b.n	800acbe <_strtod_l+0x1f6>
 800ad18:	2b08      	cmp	r3, #8
 800ad1a:	f103 0301 	add.w	r3, r3, #1
 800ad1e:	dc03      	bgt.n	800ad28 <_strtod_l+0x260>
 800ad20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ad22:	434f      	muls	r7, r1
 800ad24:	9709      	str	r7, [sp, #36]	; 0x24
 800ad26:	e7e1      	b.n	800acec <_strtod_l+0x224>
 800ad28:	2b10      	cmp	r3, #16
 800ad2a:	bfd8      	it	le
 800ad2c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ad30:	e7dc      	b.n	800acec <_strtod_l+0x224>
 800ad32:	2e10      	cmp	r6, #16
 800ad34:	bfdc      	itt	le
 800ad36:	230a      	movle	r3, #10
 800ad38:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ad3c:	e7e3      	b.n	800ad06 <_strtod_l+0x23e>
 800ad3e:	2300      	movs	r3, #0
 800ad40:	9305      	str	r3, [sp, #20]
 800ad42:	2301      	movs	r3, #1
 800ad44:	e780      	b.n	800ac48 <_strtod_l+0x180>
 800ad46:	f04f 0c00 	mov.w	ip, #0
 800ad4a:	1caa      	adds	r2, r5, #2
 800ad4c:	9215      	str	r2, [sp, #84]	; 0x54
 800ad4e:	78aa      	ldrb	r2, [r5, #2]
 800ad50:	e788      	b.n	800ac64 <_strtod_l+0x19c>
 800ad52:	f04f 0c01 	mov.w	ip, #1
 800ad56:	e7f8      	b.n	800ad4a <_strtod_l+0x282>
 800ad58:	0800e4b8 	.word	0x0800e4b8
 800ad5c:	0800e4a8 	.word	0x0800e4a8
 800ad60:	7ff00000 	.word	0x7ff00000
 800ad64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad66:	1c51      	adds	r1, r2, #1
 800ad68:	9115      	str	r1, [sp, #84]	; 0x54
 800ad6a:	7852      	ldrb	r2, [r2, #1]
 800ad6c:	2a30      	cmp	r2, #48	; 0x30
 800ad6e:	d0f9      	beq.n	800ad64 <_strtod_l+0x29c>
 800ad70:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ad74:	2908      	cmp	r1, #8
 800ad76:	f63f af7a 	bhi.w	800ac6e <_strtod_l+0x1a6>
 800ad7a:	3a30      	subs	r2, #48	; 0x30
 800ad7c:	9208      	str	r2, [sp, #32]
 800ad7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad80:	920c      	str	r2, [sp, #48]	; 0x30
 800ad82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad84:	1c57      	adds	r7, r2, #1
 800ad86:	9715      	str	r7, [sp, #84]	; 0x54
 800ad88:	7852      	ldrb	r2, [r2, #1]
 800ad8a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ad8e:	f1be 0f09 	cmp.w	lr, #9
 800ad92:	d938      	bls.n	800ae06 <_strtod_l+0x33e>
 800ad94:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad96:	1a7f      	subs	r7, r7, r1
 800ad98:	2f08      	cmp	r7, #8
 800ad9a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ad9e:	dc03      	bgt.n	800ada8 <_strtod_l+0x2e0>
 800ada0:	9908      	ldr	r1, [sp, #32]
 800ada2:	428f      	cmp	r7, r1
 800ada4:	bfa8      	it	ge
 800ada6:	460f      	movge	r7, r1
 800ada8:	f1bc 0f00 	cmp.w	ip, #0
 800adac:	d000      	beq.n	800adb0 <_strtod_l+0x2e8>
 800adae:	427f      	negs	r7, r7
 800adb0:	2e00      	cmp	r6, #0
 800adb2:	d14f      	bne.n	800ae54 <_strtod_l+0x38c>
 800adb4:	9904      	ldr	r1, [sp, #16]
 800adb6:	4301      	orrs	r1, r0
 800adb8:	f47f aec1 	bne.w	800ab3e <_strtod_l+0x76>
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f47f aedb 	bne.w	800ab78 <_strtod_l+0xb0>
 800adc2:	2a69      	cmp	r2, #105	; 0x69
 800adc4:	d029      	beq.n	800ae1a <_strtod_l+0x352>
 800adc6:	dc26      	bgt.n	800ae16 <_strtod_l+0x34e>
 800adc8:	2a49      	cmp	r2, #73	; 0x49
 800adca:	d026      	beq.n	800ae1a <_strtod_l+0x352>
 800adcc:	2a4e      	cmp	r2, #78	; 0x4e
 800adce:	f47f aed3 	bne.w	800ab78 <_strtod_l+0xb0>
 800add2:	499b      	ldr	r1, [pc, #620]	; (800b040 <_strtod_l+0x578>)
 800add4:	a815      	add	r0, sp, #84	; 0x54
 800add6:	f000 fff9 	bl	800bdcc <__match>
 800adda:	2800      	cmp	r0, #0
 800addc:	f43f aecc 	beq.w	800ab78 <_strtod_l+0xb0>
 800ade0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	2b28      	cmp	r3, #40	; 0x28
 800ade6:	d12f      	bne.n	800ae48 <_strtod_l+0x380>
 800ade8:	4996      	ldr	r1, [pc, #600]	; (800b044 <_strtod_l+0x57c>)
 800adea:	aa18      	add	r2, sp, #96	; 0x60
 800adec:	a815      	add	r0, sp, #84	; 0x54
 800adee:	f001 f801 	bl	800bdf4 <__hexnan>
 800adf2:	2805      	cmp	r0, #5
 800adf4:	d128      	bne.n	800ae48 <_strtod_l+0x380>
 800adf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adf8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800adfc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ae00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ae04:	e69b      	b.n	800ab3e <_strtod_l+0x76>
 800ae06:	9f08      	ldr	r7, [sp, #32]
 800ae08:	210a      	movs	r1, #10
 800ae0a:	fb01 2107 	mla	r1, r1, r7, r2
 800ae0e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ae12:	9208      	str	r2, [sp, #32]
 800ae14:	e7b5      	b.n	800ad82 <_strtod_l+0x2ba>
 800ae16:	2a6e      	cmp	r2, #110	; 0x6e
 800ae18:	e7d9      	b.n	800adce <_strtod_l+0x306>
 800ae1a:	498b      	ldr	r1, [pc, #556]	; (800b048 <_strtod_l+0x580>)
 800ae1c:	a815      	add	r0, sp, #84	; 0x54
 800ae1e:	f000 ffd5 	bl	800bdcc <__match>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	f43f aea8 	beq.w	800ab78 <_strtod_l+0xb0>
 800ae28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae2a:	4988      	ldr	r1, [pc, #544]	; (800b04c <_strtod_l+0x584>)
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	a815      	add	r0, sp, #84	; 0x54
 800ae30:	9315      	str	r3, [sp, #84]	; 0x54
 800ae32:	f000 ffcb 	bl	800bdcc <__match>
 800ae36:	b910      	cbnz	r0, 800ae3e <_strtod_l+0x376>
 800ae38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	9315      	str	r3, [sp, #84]	; 0x54
 800ae3e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b05c <_strtod_l+0x594>
 800ae42:	f04f 0800 	mov.w	r8, #0
 800ae46:	e67a      	b.n	800ab3e <_strtod_l+0x76>
 800ae48:	4881      	ldr	r0, [pc, #516]	; (800b050 <_strtod_l+0x588>)
 800ae4a:	f000 fd09 	bl	800b860 <nan>
 800ae4e:	ec59 8b10 	vmov	r8, r9, d0
 800ae52:	e674      	b.n	800ab3e <_strtod_l+0x76>
 800ae54:	9b05      	ldr	r3, [sp, #20]
 800ae56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae58:	1afb      	subs	r3, r7, r3
 800ae5a:	f1bb 0f00 	cmp.w	fp, #0
 800ae5e:	bf08      	it	eq
 800ae60:	46b3      	moveq	fp, r6
 800ae62:	2e10      	cmp	r6, #16
 800ae64:	9308      	str	r3, [sp, #32]
 800ae66:	4635      	mov	r5, r6
 800ae68:	bfa8      	it	ge
 800ae6a:	2510      	movge	r5, #16
 800ae6c:	f7f5 fb52 	bl	8000514 <__aeabi_ui2d>
 800ae70:	2e09      	cmp	r6, #9
 800ae72:	4680      	mov	r8, r0
 800ae74:	4689      	mov	r9, r1
 800ae76:	dd13      	ble.n	800aea0 <_strtod_l+0x3d8>
 800ae78:	4b76      	ldr	r3, [pc, #472]	; (800b054 <_strtod_l+0x58c>)
 800ae7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ae82:	f7f5 fbc1 	bl	8000608 <__aeabi_dmul>
 800ae86:	4680      	mov	r8, r0
 800ae88:	4650      	mov	r0, sl
 800ae8a:	4689      	mov	r9, r1
 800ae8c:	f7f5 fb42 	bl	8000514 <__aeabi_ui2d>
 800ae90:	4602      	mov	r2, r0
 800ae92:	460b      	mov	r3, r1
 800ae94:	4640      	mov	r0, r8
 800ae96:	4649      	mov	r1, r9
 800ae98:	f7f5 fa00 	bl	800029c <__adddf3>
 800ae9c:	4680      	mov	r8, r0
 800ae9e:	4689      	mov	r9, r1
 800aea0:	2e0f      	cmp	r6, #15
 800aea2:	dc38      	bgt.n	800af16 <_strtod_l+0x44e>
 800aea4:	9b08      	ldr	r3, [sp, #32]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f43f ae49 	beq.w	800ab3e <_strtod_l+0x76>
 800aeac:	dd24      	ble.n	800aef8 <_strtod_l+0x430>
 800aeae:	2b16      	cmp	r3, #22
 800aeb0:	dc0b      	bgt.n	800aeca <_strtod_l+0x402>
 800aeb2:	4968      	ldr	r1, [pc, #416]	; (800b054 <_strtod_l+0x58c>)
 800aeb4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aeb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aebc:	4642      	mov	r2, r8
 800aebe:	464b      	mov	r3, r9
 800aec0:	f7f5 fba2 	bl	8000608 <__aeabi_dmul>
 800aec4:	4680      	mov	r8, r0
 800aec6:	4689      	mov	r9, r1
 800aec8:	e639      	b.n	800ab3e <_strtod_l+0x76>
 800aeca:	9a08      	ldr	r2, [sp, #32]
 800aecc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800aed0:	4293      	cmp	r3, r2
 800aed2:	db20      	blt.n	800af16 <_strtod_l+0x44e>
 800aed4:	4c5f      	ldr	r4, [pc, #380]	; (800b054 <_strtod_l+0x58c>)
 800aed6:	f1c6 060f 	rsb	r6, r6, #15
 800aeda:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800aede:	4642      	mov	r2, r8
 800aee0:	464b      	mov	r3, r9
 800aee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aee6:	f7f5 fb8f 	bl	8000608 <__aeabi_dmul>
 800aeea:	9b08      	ldr	r3, [sp, #32]
 800aeec:	1b9e      	subs	r6, r3, r6
 800aeee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800aef2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aef6:	e7e3      	b.n	800aec0 <_strtod_l+0x3f8>
 800aef8:	9b08      	ldr	r3, [sp, #32]
 800aefa:	3316      	adds	r3, #22
 800aefc:	db0b      	blt.n	800af16 <_strtod_l+0x44e>
 800aefe:	9b05      	ldr	r3, [sp, #20]
 800af00:	1bdf      	subs	r7, r3, r7
 800af02:	4b54      	ldr	r3, [pc, #336]	; (800b054 <_strtod_l+0x58c>)
 800af04:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800af08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af0c:	4640      	mov	r0, r8
 800af0e:	4649      	mov	r1, r9
 800af10:	f7f5 fca4 	bl	800085c <__aeabi_ddiv>
 800af14:	e7d6      	b.n	800aec4 <_strtod_l+0x3fc>
 800af16:	9b08      	ldr	r3, [sp, #32]
 800af18:	1b75      	subs	r5, r6, r5
 800af1a:	441d      	add	r5, r3
 800af1c:	2d00      	cmp	r5, #0
 800af1e:	dd70      	ble.n	800b002 <_strtod_l+0x53a>
 800af20:	f015 030f 	ands.w	r3, r5, #15
 800af24:	d00a      	beq.n	800af3c <_strtod_l+0x474>
 800af26:	494b      	ldr	r1, [pc, #300]	; (800b054 <_strtod_l+0x58c>)
 800af28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af2c:	4642      	mov	r2, r8
 800af2e:	464b      	mov	r3, r9
 800af30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af34:	f7f5 fb68 	bl	8000608 <__aeabi_dmul>
 800af38:	4680      	mov	r8, r0
 800af3a:	4689      	mov	r9, r1
 800af3c:	f035 050f 	bics.w	r5, r5, #15
 800af40:	d04d      	beq.n	800afde <_strtod_l+0x516>
 800af42:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800af46:	dd22      	ble.n	800af8e <_strtod_l+0x4c6>
 800af48:	2500      	movs	r5, #0
 800af4a:	46ab      	mov	fp, r5
 800af4c:	9509      	str	r5, [sp, #36]	; 0x24
 800af4e:	9505      	str	r5, [sp, #20]
 800af50:	2322      	movs	r3, #34	; 0x22
 800af52:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b05c <_strtod_l+0x594>
 800af56:	6023      	str	r3, [r4, #0]
 800af58:	f04f 0800 	mov.w	r8, #0
 800af5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f43f aded 	beq.w	800ab3e <_strtod_l+0x76>
 800af64:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af66:	4620      	mov	r0, r4
 800af68:	f001 f98c 	bl	800c284 <_Bfree>
 800af6c:	9905      	ldr	r1, [sp, #20]
 800af6e:	4620      	mov	r0, r4
 800af70:	f001 f988 	bl	800c284 <_Bfree>
 800af74:	4659      	mov	r1, fp
 800af76:	4620      	mov	r0, r4
 800af78:	f001 f984 	bl	800c284 <_Bfree>
 800af7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af7e:	4620      	mov	r0, r4
 800af80:	f001 f980 	bl	800c284 <_Bfree>
 800af84:	4629      	mov	r1, r5
 800af86:	4620      	mov	r0, r4
 800af88:	f001 f97c 	bl	800c284 <_Bfree>
 800af8c:	e5d7      	b.n	800ab3e <_strtod_l+0x76>
 800af8e:	4b32      	ldr	r3, [pc, #200]	; (800b058 <_strtod_l+0x590>)
 800af90:	9304      	str	r3, [sp, #16]
 800af92:	2300      	movs	r3, #0
 800af94:	112d      	asrs	r5, r5, #4
 800af96:	4640      	mov	r0, r8
 800af98:	4649      	mov	r1, r9
 800af9a:	469a      	mov	sl, r3
 800af9c:	2d01      	cmp	r5, #1
 800af9e:	dc21      	bgt.n	800afe4 <_strtod_l+0x51c>
 800afa0:	b10b      	cbz	r3, 800afa6 <_strtod_l+0x4de>
 800afa2:	4680      	mov	r8, r0
 800afa4:	4689      	mov	r9, r1
 800afa6:	492c      	ldr	r1, [pc, #176]	; (800b058 <_strtod_l+0x590>)
 800afa8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800afac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800afb0:	4642      	mov	r2, r8
 800afb2:	464b      	mov	r3, r9
 800afb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afb8:	f7f5 fb26 	bl	8000608 <__aeabi_dmul>
 800afbc:	4b27      	ldr	r3, [pc, #156]	; (800b05c <_strtod_l+0x594>)
 800afbe:	460a      	mov	r2, r1
 800afc0:	400b      	ands	r3, r1
 800afc2:	4927      	ldr	r1, [pc, #156]	; (800b060 <_strtod_l+0x598>)
 800afc4:	428b      	cmp	r3, r1
 800afc6:	4680      	mov	r8, r0
 800afc8:	d8be      	bhi.n	800af48 <_strtod_l+0x480>
 800afca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800afce:	428b      	cmp	r3, r1
 800afd0:	bf86      	itte	hi
 800afd2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b064 <_strtod_l+0x59c>
 800afd6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800afda:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800afde:	2300      	movs	r3, #0
 800afe0:	9304      	str	r3, [sp, #16]
 800afe2:	e07b      	b.n	800b0dc <_strtod_l+0x614>
 800afe4:	07ea      	lsls	r2, r5, #31
 800afe6:	d505      	bpl.n	800aff4 <_strtod_l+0x52c>
 800afe8:	9b04      	ldr	r3, [sp, #16]
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	f7f5 fb0b 	bl	8000608 <__aeabi_dmul>
 800aff2:	2301      	movs	r3, #1
 800aff4:	9a04      	ldr	r2, [sp, #16]
 800aff6:	3208      	adds	r2, #8
 800aff8:	f10a 0a01 	add.w	sl, sl, #1
 800affc:	106d      	asrs	r5, r5, #1
 800affe:	9204      	str	r2, [sp, #16]
 800b000:	e7cc      	b.n	800af9c <_strtod_l+0x4d4>
 800b002:	d0ec      	beq.n	800afde <_strtod_l+0x516>
 800b004:	426d      	negs	r5, r5
 800b006:	f015 020f 	ands.w	r2, r5, #15
 800b00a:	d00a      	beq.n	800b022 <_strtod_l+0x55a>
 800b00c:	4b11      	ldr	r3, [pc, #68]	; (800b054 <_strtod_l+0x58c>)
 800b00e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b012:	4640      	mov	r0, r8
 800b014:	4649      	mov	r1, r9
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	f7f5 fc1f 	bl	800085c <__aeabi_ddiv>
 800b01e:	4680      	mov	r8, r0
 800b020:	4689      	mov	r9, r1
 800b022:	112d      	asrs	r5, r5, #4
 800b024:	d0db      	beq.n	800afde <_strtod_l+0x516>
 800b026:	2d1f      	cmp	r5, #31
 800b028:	dd1e      	ble.n	800b068 <_strtod_l+0x5a0>
 800b02a:	2500      	movs	r5, #0
 800b02c:	46ab      	mov	fp, r5
 800b02e:	9509      	str	r5, [sp, #36]	; 0x24
 800b030:	9505      	str	r5, [sp, #20]
 800b032:	2322      	movs	r3, #34	; 0x22
 800b034:	f04f 0800 	mov.w	r8, #0
 800b038:	f04f 0900 	mov.w	r9, #0
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	e78d      	b.n	800af5c <_strtod_l+0x494>
 800b040:	0800e4b3 	.word	0x0800e4b3
 800b044:	0800e4cc 	.word	0x0800e4cc
 800b048:	0800e4aa 	.word	0x0800e4aa
 800b04c:	0800e4ad 	.word	0x0800e4ad
 800b050:	0800e82f 	.word	0x0800e82f
 800b054:	0800e720 	.word	0x0800e720
 800b058:	0800e6f8 	.word	0x0800e6f8
 800b05c:	7ff00000 	.word	0x7ff00000
 800b060:	7ca00000 	.word	0x7ca00000
 800b064:	7fefffff 	.word	0x7fefffff
 800b068:	f015 0310 	ands.w	r3, r5, #16
 800b06c:	bf18      	it	ne
 800b06e:	236a      	movne	r3, #106	; 0x6a
 800b070:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b414 <_strtod_l+0x94c>
 800b074:	9304      	str	r3, [sp, #16]
 800b076:	4640      	mov	r0, r8
 800b078:	4649      	mov	r1, r9
 800b07a:	2300      	movs	r3, #0
 800b07c:	07ea      	lsls	r2, r5, #31
 800b07e:	d504      	bpl.n	800b08a <_strtod_l+0x5c2>
 800b080:	e9da 2300 	ldrd	r2, r3, [sl]
 800b084:	f7f5 fac0 	bl	8000608 <__aeabi_dmul>
 800b088:	2301      	movs	r3, #1
 800b08a:	106d      	asrs	r5, r5, #1
 800b08c:	f10a 0a08 	add.w	sl, sl, #8
 800b090:	d1f4      	bne.n	800b07c <_strtod_l+0x5b4>
 800b092:	b10b      	cbz	r3, 800b098 <_strtod_l+0x5d0>
 800b094:	4680      	mov	r8, r0
 800b096:	4689      	mov	r9, r1
 800b098:	9b04      	ldr	r3, [sp, #16]
 800b09a:	b1bb      	cbz	r3, 800b0cc <_strtod_l+0x604>
 800b09c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b0a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	4649      	mov	r1, r9
 800b0a8:	dd10      	ble.n	800b0cc <_strtod_l+0x604>
 800b0aa:	2b1f      	cmp	r3, #31
 800b0ac:	f340 811e 	ble.w	800b2ec <_strtod_l+0x824>
 800b0b0:	2b34      	cmp	r3, #52	; 0x34
 800b0b2:	bfde      	ittt	le
 800b0b4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b0b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b0bc:	4093      	lslle	r3, r2
 800b0be:	f04f 0800 	mov.w	r8, #0
 800b0c2:	bfcc      	ite	gt
 800b0c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b0c8:	ea03 0901 	andle.w	r9, r3, r1
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	4640      	mov	r0, r8
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	f7f5 fd00 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d1a6      	bne.n	800b02a <_strtod_l+0x562>
 800b0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0e2:	4633      	mov	r3, r6
 800b0e4:	465a      	mov	r2, fp
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f001 f934 	bl	800c354 <__s2b>
 800b0ec:	9009      	str	r0, [sp, #36]	; 0x24
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f43f af2a 	beq.w	800af48 <_strtod_l+0x480>
 800b0f4:	9a08      	ldr	r2, [sp, #32]
 800b0f6:	9b05      	ldr	r3, [sp, #20]
 800b0f8:	2a00      	cmp	r2, #0
 800b0fa:	eba3 0307 	sub.w	r3, r3, r7
 800b0fe:	bfa8      	it	ge
 800b100:	2300      	movge	r3, #0
 800b102:	930c      	str	r3, [sp, #48]	; 0x30
 800b104:	2500      	movs	r5, #0
 800b106:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b10a:	9312      	str	r3, [sp, #72]	; 0x48
 800b10c:	46ab      	mov	fp, r5
 800b10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b110:	4620      	mov	r0, r4
 800b112:	6859      	ldr	r1, [r3, #4]
 800b114:	f001 f876 	bl	800c204 <_Balloc>
 800b118:	9005      	str	r0, [sp, #20]
 800b11a:	2800      	cmp	r0, #0
 800b11c:	f43f af18 	beq.w	800af50 <_strtod_l+0x488>
 800b120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b122:	691a      	ldr	r2, [r3, #16]
 800b124:	3202      	adds	r2, #2
 800b126:	f103 010c 	add.w	r1, r3, #12
 800b12a:	0092      	lsls	r2, r2, #2
 800b12c:	300c      	adds	r0, #12
 800b12e:	f000 fb86 	bl	800b83e <memcpy>
 800b132:	ec49 8b10 	vmov	d0, r8, r9
 800b136:	aa18      	add	r2, sp, #96	; 0x60
 800b138:	a917      	add	r1, sp, #92	; 0x5c
 800b13a:	4620      	mov	r0, r4
 800b13c:	f001 fc3e 	bl	800c9bc <__d2b>
 800b140:	ec49 8b18 	vmov	d8, r8, r9
 800b144:	9016      	str	r0, [sp, #88]	; 0x58
 800b146:	2800      	cmp	r0, #0
 800b148:	f43f af02 	beq.w	800af50 <_strtod_l+0x488>
 800b14c:	2101      	movs	r1, #1
 800b14e:	4620      	mov	r0, r4
 800b150:	f001 f998 	bl	800c484 <__i2b>
 800b154:	4683      	mov	fp, r0
 800b156:	2800      	cmp	r0, #0
 800b158:	f43f aefa 	beq.w	800af50 <_strtod_l+0x488>
 800b15c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b15e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b160:	2e00      	cmp	r6, #0
 800b162:	bfab      	itete	ge
 800b164:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b166:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b168:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b16a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b16e:	bfac      	ite	ge
 800b170:	eb06 0a03 	addge.w	sl, r6, r3
 800b174:	1b9f      	sublt	r7, r3, r6
 800b176:	9b04      	ldr	r3, [sp, #16]
 800b178:	1af6      	subs	r6, r6, r3
 800b17a:	4416      	add	r6, r2
 800b17c:	4ba0      	ldr	r3, [pc, #640]	; (800b400 <_strtod_l+0x938>)
 800b17e:	3e01      	subs	r6, #1
 800b180:	429e      	cmp	r6, r3
 800b182:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b186:	f280 80c4 	bge.w	800b312 <_strtod_l+0x84a>
 800b18a:	1b9b      	subs	r3, r3, r6
 800b18c:	2b1f      	cmp	r3, #31
 800b18e:	eba2 0203 	sub.w	r2, r2, r3
 800b192:	f04f 0101 	mov.w	r1, #1
 800b196:	f300 80b0 	bgt.w	800b2fa <_strtod_l+0x832>
 800b19a:	fa01 f303 	lsl.w	r3, r1, r3
 800b19e:	930e      	str	r3, [sp, #56]	; 0x38
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	930d      	str	r3, [sp, #52]	; 0x34
 800b1a4:	eb0a 0602 	add.w	r6, sl, r2
 800b1a8:	9b04      	ldr	r3, [sp, #16]
 800b1aa:	45b2      	cmp	sl, r6
 800b1ac:	4417      	add	r7, r2
 800b1ae:	441f      	add	r7, r3
 800b1b0:	4653      	mov	r3, sl
 800b1b2:	bfa8      	it	ge
 800b1b4:	4633      	movge	r3, r6
 800b1b6:	42bb      	cmp	r3, r7
 800b1b8:	bfa8      	it	ge
 800b1ba:	463b      	movge	r3, r7
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	bfc2      	ittt	gt
 800b1c0:	1af6      	subgt	r6, r6, r3
 800b1c2:	1aff      	subgt	r7, r7, r3
 800b1c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b1c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	dd17      	ble.n	800b1fe <_strtod_l+0x736>
 800b1ce:	4659      	mov	r1, fp
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f001 fa16 	bl	800c604 <__pow5mult>
 800b1d8:	4683      	mov	fp, r0
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	f43f aeb8 	beq.w	800af50 <_strtod_l+0x488>
 800b1e0:	4601      	mov	r1, r0
 800b1e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f001 f963 	bl	800c4b0 <__multiply>
 800b1ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f43f aeaf 	beq.w	800af50 <_strtod_l+0x488>
 800b1f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	f001 f845 	bl	800c284 <_Bfree>
 800b1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1fc:	9316      	str	r3, [sp, #88]	; 0x58
 800b1fe:	2e00      	cmp	r6, #0
 800b200:	f300 808c 	bgt.w	800b31c <_strtod_l+0x854>
 800b204:	9b08      	ldr	r3, [sp, #32]
 800b206:	2b00      	cmp	r3, #0
 800b208:	dd08      	ble.n	800b21c <_strtod_l+0x754>
 800b20a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b20c:	9905      	ldr	r1, [sp, #20]
 800b20e:	4620      	mov	r0, r4
 800b210:	f001 f9f8 	bl	800c604 <__pow5mult>
 800b214:	9005      	str	r0, [sp, #20]
 800b216:	2800      	cmp	r0, #0
 800b218:	f43f ae9a 	beq.w	800af50 <_strtod_l+0x488>
 800b21c:	2f00      	cmp	r7, #0
 800b21e:	dd08      	ble.n	800b232 <_strtod_l+0x76a>
 800b220:	9905      	ldr	r1, [sp, #20]
 800b222:	463a      	mov	r2, r7
 800b224:	4620      	mov	r0, r4
 800b226:	f001 fa47 	bl	800c6b8 <__lshift>
 800b22a:	9005      	str	r0, [sp, #20]
 800b22c:	2800      	cmp	r0, #0
 800b22e:	f43f ae8f 	beq.w	800af50 <_strtod_l+0x488>
 800b232:	f1ba 0f00 	cmp.w	sl, #0
 800b236:	dd08      	ble.n	800b24a <_strtod_l+0x782>
 800b238:	4659      	mov	r1, fp
 800b23a:	4652      	mov	r2, sl
 800b23c:	4620      	mov	r0, r4
 800b23e:	f001 fa3b 	bl	800c6b8 <__lshift>
 800b242:	4683      	mov	fp, r0
 800b244:	2800      	cmp	r0, #0
 800b246:	f43f ae83 	beq.w	800af50 <_strtod_l+0x488>
 800b24a:	9a05      	ldr	r2, [sp, #20]
 800b24c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b24e:	4620      	mov	r0, r4
 800b250:	f001 faba 	bl	800c7c8 <__mdiff>
 800b254:	4605      	mov	r5, r0
 800b256:	2800      	cmp	r0, #0
 800b258:	f43f ae7a 	beq.w	800af50 <_strtod_l+0x488>
 800b25c:	68c3      	ldr	r3, [r0, #12]
 800b25e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b260:	2300      	movs	r3, #0
 800b262:	60c3      	str	r3, [r0, #12]
 800b264:	4659      	mov	r1, fp
 800b266:	f001 fa93 	bl	800c790 <__mcmp>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	da60      	bge.n	800b330 <_strtod_l+0x868>
 800b26e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b270:	ea53 0308 	orrs.w	r3, r3, r8
 800b274:	f040 8084 	bne.w	800b380 <_strtod_l+0x8b8>
 800b278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d17f      	bne.n	800b380 <_strtod_l+0x8b8>
 800b280:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b284:	0d1b      	lsrs	r3, r3, #20
 800b286:	051b      	lsls	r3, r3, #20
 800b288:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b28c:	d978      	bls.n	800b380 <_strtod_l+0x8b8>
 800b28e:	696b      	ldr	r3, [r5, #20]
 800b290:	b913      	cbnz	r3, 800b298 <_strtod_l+0x7d0>
 800b292:	692b      	ldr	r3, [r5, #16]
 800b294:	2b01      	cmp	r3, #1
 800b296:	dd73      	ble.n	800b380 <_strtod_l+0x8b8>
 800b298:	4629      	mov	r1, r5
 800b29a:	2201      	movs	r2, #1
 800b29c:	4620      	mov	r0, r4
 800b29e:	f001 fa0b 	bl	800c6b8 <__lshift>
 800b2a2:	4659      	mov	r1, fp
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	f001 fa73 	bl	800c790 <__mcmp>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	dd68      	ble.n	800b380 <_strtod_l+0x8b8>
 800b2ae:	9904      	ldr	r1, [sp, #16]
 800b2b0:	4a54      	ldr	r2, [pc, #336]	; (800b404 <_strtod_l+0x93c>)
 800b2b2:	464b      	mov	r3, r9
 800b2b4:	2900      	cmp	r1, #0
 800b2b6:	f000 8084 	beq.w	800b3c2 <_strtod_l+0x8fa>
 800b2ba:	ea02 0109 	and.w	r1, r2, r9
 800b2be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b2c2:	dc7e      	bgt.n	800b3c2 <_strtod_l+0x8fa>
 800b2c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b2c8:	f77f aeb3 	ble.w	800b032 <_strtod_l+0x56a>
 800b2cc:	4b4e      	ldr	r3, [pc, #312]	; (800b408 <_strtod_l+0x940>)
 800b2ce:	4640      	mov	r0, r8
 800b2d0:	4649      	mov	r1, r9
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f7f5 f998 	bl	8000608 <__aeabi_dmul>
 800b2d8:	4b4a      	ldr	r3, [pc, #296]	; (800b404 <_strtod_l+0x93c>)
 800b2da:	400b      	ands	r3, r1
 800b2dc:	4680      	mov	r8, r0
 800b2de:	4689      	mov	r9, r1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f47f ae3f 	bne.w	800af64 <_strtod_l+0x49c>
 800b2e6:	2322      	movs	r3, #34	; 0x22
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	e63b      	b.n	800af64 <_strtod_l+0x49c>
 800b2ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f4:	ea03 0808 	and.w	r8, r3, r8
 800b2f8:	e6e8      	b.n	800b0cc <_strtod_l+0x604>
 800b2fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b2fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b302:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b306:	36e2      	adds	r6, #226	; 0xe2
 800b308:	fa01 f306 	lsl.w	r3, r1, r6
 800b30c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b310:	e748      	b.n	800b1a4 <_strtod_l+0x6dc>
 800b312:	2100      	movs	r1, #0
 800b314:	2301      	movs	r3, #1
 800b316:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b31a:	e743      	b.n	800b1a4 <_strtod_l+0x6dc>
 800b31c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b31e:	4632      	mov	r2, r6
 800b320:	4620      	mov	r0, r4
 800b322:	f001 f9c9 	bl	800c6b8 <__lshift>
 800b326:	9016      	str	r0, [sp, #88]	; 0x58
 800b328:	2800      	cmp	r0, #0
 800b32a:	f47f af6b 	bne.w	800b204 <_strtod_l+0x73c>
 800b32e:	e60f      	b.n	800af50 <_strtod_l+0x488>
 800b330:	46ca      	mov	sl, r9
 800b332:	d171      	bne.n	800b418 <_strtod_l+0x950>
 800b334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b336:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b33a:	b352      	cbz	r2, 800b392 <_strtod_l+0x8ca>
 800b33c:	4a33      	ldr	r2, [pc, #204]	; (800b40c <_strtod_l+0x944>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d12a      	bne.n	800b398 <_strtod_l+0x8d0>
 800b342:	9b04      	ldr	r3, [sp, #16]
 800b344:	4641      	mov	r1, r8
 800b346:	b1fb      	cbz	r3, 800b388 <_strtod_l+0x8c0>
 800b348:	4b2e      	ldr	r3, [pc, #184]	; (800b404 <_strtod_l+0x93c>)
 800b34a:	ea09 0303 	and.w	r3, r9, r3
 800b34e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b356:	d81a      	bhi.n	800b38e <_strtod_l+0x8c6>
 800b358:	0d1b      	lsrs	r3, r3, #20
 800b35a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b35e:	fa02 f303 	lsl.w	r3, r2, r3
 800b362:	4299      	cmp	r1, r3
 800b364:	d118      	bne.n	800b398 <_strtod_l+0x8d0>
 800b366:	4b2a      	ldr	r3, [pc, #168]	; (800b410 <_strtod_l+0x948>)
 800b368:	459a      	cmp	sl, r3
 800b36a:	d102      	bne.n	800b372 <_strtod_l+0x8aa>
 800b36c:	3101      	adds	r1, #1
 800b36e:	f43f adef 	beq.w	800af50 <_strtod_l+0x488>
 800b372:	4b24      	ldr	r3, [pc, #144]	; (800b404 <_strtod_l+0x93c>)
 800b374:	ea0a 0303 	and.w	r3, sl, r3
 800b378:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b37c:	f04f 0800 	mov.w	r8, #0
 800b380:	9b04      	ldr	r3, [sp, #16]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1a2      	bne.n	800b2cc <_strtod_l+0x804>
 800b386:	e5ed      	b.n	800af64 <_strtod_l+0x49c>
 800b388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b38c:	e7e9      	b.n	800b362 <_strtod_l+0x89a>
 800b38e:	4613      	mov	r3, r2
 800b390:	e7e7      	b.n	800b362 <_strtod_l+0x89a>
 800b392:	ea53 0308 	orrs.w	r3, r3, r8
 800b396:	d08a      	beq.n	800b2ae <_strtod_l+0x7e6>
 800b398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b39a:	b1e3      	cbz	r3, 800b3d6 <_strtod_l+0x90e>
 800b39c:	ea13 0f0a 	tst.w	r3, sl
 800b3a0:	d0ee      	beq.n	800b380 <_strtod_l+0x8b8>
 800b3a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3a4:	9a04      	ldr	r2, [sp, #16]
 800b3a6:	4640      	mov	r0, r8
 800b3a8:	4649      	mov	r1, r9
 800b3aa:	b1c3      	cbz	r3, 800b3de <_strtod_l+0x916>
 800b3ac:	f7ff fb70 	bl	800aa90 <sulp>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	ec51 0b18 	vmov	r0, r1, d8
 800b3b8:	f7f4 ff70 	bl	800029c <__adddf3>
 800b3bc:	4680      	mov	r8, r0
 800b3be:	4689      	mov	r9, r1
 800b3c0:	e7de      	b.n	800b380 <_strtod_l+0x8b8>
 800b3c2:	4013      	ands	r3, r2
 800b3c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b3c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b3cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b3d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b3d4:	e7d4      	b.n	800b380 <_strtod_l+0x8b8>
 800b3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3d8:	ea13 0f08 	tst.w	r3, r8
 800b3dc:	e7e0      	b.n	800b3a0 <_strtod_l+0x8d8>
 800b3de:	f7ff fb57 	bl	800aa90 <sulp>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	ec51 0b18 	vmov	r0, r1, d8
 800b3ea:	f7f4 ff55 	bl	8000298 <__aeabi_dsub>
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4680      	mov	r8, r0
 800b3f4:	4689      	mov	r9, r1
 800b3f6:	f7f5 fb6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d0c0      	beq.n	800b380 <_strtod_l+0x8b8>
 800b3fe:	e618      	b.n	800b032 <_strtod_l+0x56a>
 800b400:	fffffc02 	.word	0xfffffc02
 800b404:	7ff00000 	.word	0x7ff00000
 800b408:	39500000 	.word	0x39500000
 800b40c:	000fffff 	.word	0x000fffff
 800b410:	7fefffff 	.word	0x7fefffff
 800b414:	0800e4e0 	.word	0x0800e4e0
 800b418:	4659      	mov	r1, fp
 800b41a:	4628      	mov	r0, r5
 800b41c:	f001 fb28 	bl	800ca70 <__ratio>
 800b420:	ec57 6b10 	vmov	r6, r7, d0
 800b424:	ee10 0a10 	vmov	r0, s0
 800b428:	2200      	movs	r2, #0
 800b42a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b42e:	4639      	mov	r1, r7
 800b430:	f7f5 fb66 	bl	8000b00 <__aeabi_dcmple>
 800b434:	2800      	cmp	r0, #0
 800b436:	d071      	beq.n	800b51c <_strtod_l+0xa54>
 800b438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d17c      	bne.n	800b538 <_strtod_l+0xa70>
 800b43e:	f1b8 0f00 	cmp.w	r8, #0
 800b442:	d15a      	bne.n	800b4fa <_strtod_l+0xa32>
 800b444:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d15d      	bne.n	800b508 <_strtod_l+0xa40>
 800b44c:	4b90      	ldr	r3, [pc, #576]	; (800b690 <_strtod_l+0xbc8>)
 800b44e:	2200      	movs	r2, #0
 800b450:	4630      	mov	r0, r6
 800b452:	4639      	mov	r1, r7
 800b454:	f7f5 fb4a 	bl	8000aec <__aeabi_dcmplt>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d15c      	bne.n	800b516 <_strtod_l+0xa4e>
 800b45c:	4630      	mov	r0, r6
 800b45e:	4639      	mov	r1, r7
 800b460:	4b8c      	ldr	r3, [pc, #560]	; (800b694 <_strtod_l+0xbcc>)
 800b462:	2200      	movs	r2, #0
 800b464:	f7f5 f8d0 	bl	8000608 <__aeabi_dmul>
 800b468:	4606      	mov	r6, r0
 800b46a:	460f      	mov	r7, r1
 800b46c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b470:	9606      	str	r6, [sp, #24]
 800b472:	9307      	str	r3, [sp, #28]
 800b474:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b478:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b47c:	4b86      	ldr	r3, [pc, #536]	; (800b698 <_strtod_l+0xbd0>)
 800b47e:	ea0a 0303 	and.w	r3, sl, r3
 800b482:	930d      	str	r3, [sp, #52]	; 0x34
 800b484:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b486:	4b85      	ldr	r3, [pc, #532]	; (800b69c <_strtod_l+0xbd4>)
 800b488:	429a      	cmp	r2, r3
 800b48a:	f040 8090 	bne.w	800b5ae <_strtod_l+0xae6>
 800b48e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b492:	ec49 8b10 	vmov	d0, r8, r9
 800b496:	f001 fa21 	bl	800c8dc <__ulp>
 800b49a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b49e:	ec51 0b10 	vmov	r0, r1, d0
 800b4a2:	f7f5 f8b1 	bl	8000608 <__aeabi_dmul>
 800b4a6:	4642      	mov	r2, r8
 800b4a8:	464b      	mov	r3, r9
 800b4aa:	f7f4 fef7 	bl	800029c <__adddf3>
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4979      	ldr	r1, [pc, #484]	; (800b698 <_strtod_l+0xbd0>)
 800b4b2:	4a7b      	ldr	r2, [pc, #492]	; (800b6a0 <_strtod_l+0xbd8>)
 800b4b4:	4019      	ands	r1, r3
 800b4b6:	4291      	cmp	r1, r2
 800b4b8:	4680      	mov	r8, r0
 800b4ba:	d944      	bls.n	800b546 <_strtod_l+0xa7e>
 800b4bc:	ee18 2a90 	vmov	r2, s17
 800b4c0:	4b78      	ldr	r3, [pc, #480]	; (800b6a4 <_strtod_l+0xbdc>)
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d104      	bne.n	800b4d0 <_strtod_l+0xa08>
 800b4c6:	ee18 3a10 	vmov	r3, s16
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	f43f ad40 	beq.w	800af50 <_strtod_l+0x488>
 800b4d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b6a4 <_strtod_l+0xbdc>
 800b4d4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b4d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 fed2 	bl	800c284 <_Bfree>
 800b4e0:	9905      	ldr	r1, [sp, #20]
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 fece 	bl	800c284 <_Bfree>
 800b4e8:	4659      	mov	r1, fp
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f000 feca 	bl	800c284 <_Bfree>
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f000 fec6 	bl	800c284 <_Bfree>
 800b4f8:	e609      	b.n	800b10e <_strtod_l+0x646>
 800b4fa:	f1b8 0f01 	cmp.w	r8, #1
 800b4fe:	d103      	bne.n	800b508 <_strtod_l+0xa40>
 800b500:	f1b9 0f00 	cmp.w	r9, #0
 800b504:	f43f ad95 	beq.w	800b032 <_strtod_l+0x56a>
 800b508:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b660 <_strtod_l+0xb98>
 800b50c:	4f60      	ldr	r7, [pc, #384]	; (800b690 <_strtod_l+0xbc8>)
 800b50e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b512:	2600      	movs	r6, #0
 800b514:	e7ae      	b.n	800b474 <_strtod_l+0x9ac>
 800b516:	4f5f      	ldr	r7, [pc, #380]	; (800b694 <_strtod_l+0xbcc>)
 800b518:	2600      	movs	r6, #0
 800b51a:	e7a7      	b.n	800b46c <_strtod_l+0x9a4>
 800b51c:	4b5d      	ldr	r3, [pc, #372]	; (800b694 <_strtod_l+0xbcc>)
 800b51e:	4630      	mov	r0, r6
 800b520:	4639      	mov	r1, r7
 800b522:	2200      	movs	r2, #0
 800b524:	f7f5 f870 	bl	8000608 <__aeabi_dmul>
 800b528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b52a:	4606      	mov	r6, r0
 800b52c:	460f      	mov	r7, r1
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d09c      	beq.n	800b46c <_strtod_l+0x9a4>
 800b532:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b536:	e79d      	b.n	800b474 <_strtod_l+0x9ac>
 800b538:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b668 <_strtod_l+0xba0>
 800b53c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b540:	ec57 6b17 	vmov	r6, r7, d7
 800b544:	e796      	b.n	800b474 <_strtod_l+0x9ac>
 800b546:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b54a:	9b04      	ldr	r3, [sp, #16]
 800b54c:	46ca      	mov	sl, r9
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1c2      	bne.n	800b4d8 <_strtod_l+0xa10>
 800b552:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b558:	0d1b      	lsrs	r3, r3, #20
 800b55a:	051b      	lsls	r3, r3, #20
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d1bb      	bne.n	800b4d8 <_strtod_l+0xa10>
 800b560:	4630      	mov	r0, r6
 800b562:	4639      	mov	r1, r7
 800b564:	f7f5 fc00 	bl	8000d68 <__aeabi_d2lz>
 800b568:	f7f5 f820 	bl	80005ac <__aeabi_l2d>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4630      	mov	r0, r6
 800b572:	4639      	mov	r1, r7
 800b574:	f7f4 fe90 	bl	8000298 <__aeabi_dsub>
 800b578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b57a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b57e:	ea43 0308 	orr.w	r3, r3, r8
 800b582:	4313      	orrs	r3, r2
 800b584:	4606      	mov	r6, r0
 800b586:	460f      	mov	r7, r1
 800b588:	d054      	beq.n	800b634 <_strtod_l+0xb6c>
 800b58a:	a339      	add	r3, pc, #228	; (adr r3, 800b670 <_strtod_l+0xba8>)
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	f7f5 faac 	bl	8000aec <__aeabi_dcmplt>
 800b594:	2800      	cmp	r0, #0
 800b596:	f47f ace5 	bne.w	800af64 <_strtod_l+0x49c>
 800b59a:	a337      	add	r3, pc, #220	; (adr r3, 800b678 <_strtod_l+0xbb0>)
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	4639      	mov	r1, r7
 800b5a4:	f7f5 fac0 	bl	8000b28 <__aeabi_dcmpgt>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d095      	beq.n	800b4d8 <_strtod_l+0xa10>
 800b5ac:	e4da      	b.n	800af64 <_strtod_l+0x49c>
 800b5ae:	9b04      	ldr	r3, [sp, #16]
 800b5b0:	b333      	cbz	r3, 800b600 <_strtod_l+0xb38>
 800b5b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b5b8:	d822      	bhi.n	800b600 <_strtod_l+0xb38>
 800b5ba:	a331      	add	r3, pc, #196	; (adr r3, 800b680 <_strtod_l+0xbb8>)
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	f7f5 fa9c 	bl	8000b00 <__aeabi_dcmple>
 800b5c8:	b1a0      	cbz	r0, 800b5f4 <_strtod_l+0xb2c>
 800b5ca:	4639      	mov	r1, r7
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	f7f5 faf3 	bl	8000bb8 <__aeabi_d2uiz>
 800b5d2:	2801      	cmp	r0, #1
 800b5d4:	bf38      	it	cc
 800b5d6:	2001      	movcc	r0, #1
 800b5d8:	f7f4 ff9c 	bl	8000514 <__aeabi_ui2d>
 800b5dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5de:	4606      	mov	r6, r0
 800b5e0:	460f      	mov	r7, r1
 800b5e2:	bb23      	cbnz	r3, 800b62e <_strtod_l+0xb66>
 800b5e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5e8:	9010      	str	r0, [sp, #64]	; 0x40
 800b5ea:	9311      	str	r3, [sp, #68]	; 0x44
 800b5ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b5f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b5f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b5fc:	1a9b      	subs	r3, r3, r2
 800b5fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800b600:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b604:	eeb0 0a48 	vmov.f32	s0, s16
 800b608:	eef0 0a68 	vmov.f32	s1, s17
 800b60c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b610:	f001 f964 	bl	800c8dc <__ulp>
 800b614:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b618:	ec53 2b10 	vmov	r2, r3, d0
 800b61c:	f7f4 fff4 	bl	8000608 <__aeabi_dmul>
 800b620:	ec53 2b18 	vmov	r2, r3, d8
 800b624:	f7f4 fe3a 	bl	800029c <__adddf3>
 800b628:	4680      	mov	r8, r0
 800b62a:	4689      	mov	r9, r1
 800b62c:	e78d      	b.n	800b54a <_strtod_l+0xa82>
 800b62e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b632:	e7db      	b.n	800b5ec <_strtod_l+0xb24>
 800b634:	a314      	add	r3, pc, #80	; (adr r3, 800b688 <_strtod_l+0xbc0>)
 800b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63a:	f7f5 fa57 	bl	8000aec <__aeabi_dcmplt>
 800b63e:	e7b3      	b.n	800b5a8 <_strtod_l+0xae0>
 800b640:	2300      	movs	r3, #0
 800b642:	930a      	str	r3, [sp, #40]	; 0x28
 800b644:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b648:	6013      	str	r3, [r2, #0]
 800b64a:	f7ff ba7c 	b.w	800ab46 <_strtod_l+0x7e>
 800b64e:	2a65      	cmp	r2, #101	; 0x65
 800b650:	f43f ab75 	beq.w	800ad3e <_strtod_l+0x276>
 800b654:	2a45      	cmp	r2, #69	; 0x45
 800b656:	f43f ab72 	beq.w	800ad3e <_strtod_l+0x276>
 800b65a:	2301      	movs	r3, #1
 800b65c:	f7ff bbaa 	b.w	800adb4 <_strtod_l+0x2ec>
 800b660:	00000000 	.word	0x00000000
 800b664:	bff00000 	.word	0xbff00000
 800b668:	00000000 	.word	0x00000000
 800b66c:	3ff00000 	.word	0x3ff00000
 800b670:	94a03595 	.word	0x94a03595
 800b674:	3fdfffff 	.word	0x3fdfffff
 800b678:	35afe535 	.word	0x35afe535
 800b67c:	3fe00000 	.word	0x3fe00000
 800b680:	ffc00000 	.word	0xffc00000
 800b684:	41dfffff 	.word	0x41dfffff
 800b688:	94a03595 	.word	0x94a03595
 800b68c:	3fcfffff 	.word	0x3fcfffff
 800b690:	3ff00000 	.word	0x3ff00000
 800b694:	3fe00000 	.word	0x3fe00000
 800b698:	7ff00000 	.word	0x7ff00000
 800b69c:	7fe00000 	.word	0x7fe00000
 800b6a0:	7c9fffff 	.word	0x7c9fffff
 800b6a4:	7fefffff 	.word	0x7fefffff

0800b6a8 <strtof>:
 800b6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ac:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800b770 <strtof+0xc8>
 800b6b0:	4b2a      	ldr	r3, [pc, #168]	; (800b75c <strtof+0xb4>)
 800b6b2:	460a      	mov	r2, r1
 800b6b4:	ed2d 8b02 	vpush	{d8}
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	f8d8 0000 	ldr.w	r0, [r8]
 800b6be:	f7ff fa03 	bl	800aac8 <_strtod_l>
 800b6c2:	ec55 4b10 	vmov	r4, r5, d0
 800b6c6:	ee10 2a10 	vmov	r2, s0
 800b6ca:	ee10 0a10 	vmov	r0, s0
 800b6ce:	462b      	mov	r3, r5
 800b6d0:	4629      	mov	r1, r5
 800b6d2:	f7f5 fa33 	bl	8000b3c <__aeabi_dcmpun>
 800b6d6:	b190      	cbz	r0, 800b6fe <strtof+0x56>
 800b6d8:	2d00      	cmp	r5, #0
 800b6da:	4821      	ldr	r0, [pc, #132]	; (800b760 <strtof+0xb8>)
 800b6dc:	da09      	bge.n	800b6f2 <strtof+0x4a>
 800b6de:	f000 f8c7 	bl	800b870 <nanf>
 800b6e2:	eeb1 8a40 	vneg.f32	s16, s0
 800b6e6:	eeb0 0a48 	vmov.f32	s0, s16
 800b6ea:	ecbd 8b02 	vpop	{d8}
 800b6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f2:	ecbd 8b02 	vpop	{d8}
 800b6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fa:	f000 b8b9 	b.w	800b870 <nanf>
 800b6fe:	4620      	mov	r0, r4
 800b700:	4629      	mov	r1, r5
 800b702:	f7f5 fa79 	bl	8000bf8 <__aeabi_d2f>
 800b706:	ee08 0a10 	vmov	s16, r0
 800b70a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800b764 <strtof+0xbc>
 800b70e:	eeb0 7ac8 	vabs.f32	s14, s16
 800b712:	eeb4 7a67 	vcmp.f32	s14, s15
 800b716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b71a:	dd11      	ble.n	800b740 <strtof+0x98>
 800b71c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800b720:	4b11      	ldr	r3, [pc, #68]	; (800b768 <strtof+0xc0>)
 800b722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b726:	4620      	mov	r0, r4
 800b728:	4639      	mov	r1, r7
 800b72a:	f7f5 fa07 	bl	8000b3c <__aeabi_dcmpun>
 800b72e:	b980      	cbnz	r0, 800b752 <strtof+0xaa>
 800b730:	4b0d      	ldr	r3, [pc, #52]	; (800b768 <strtof+0xc0>)
 800b732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b736:	4620      	mov	r0, r4
 800b738:	4639      	mov	r1, r7
 800b73a:	f7f5 f9e1 	bl	8000b00 <__aeabi_dcmple>
 800b73e:	b940      	cbnz	r0, 800b752 <strtof+0xaa>
 800b740:	ee18 3a10 	vmov	r3, s16
 800b744:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b748:	d1cd      	bne.n	800b6e6 <strtof+0x3e>
 800b74a:	4b08      	ldr	r3, [pc, #32]	; (800b76c <strtof+0xc4>)
 800b74c:	402b      	ands	r3, r5
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0c9      	beq.n	800b6e6 <strtof+0x3e>
 800b752:	f8d8 3000 	ldr.w	r3, [r8]
 800b756:	2222      	movs	r2, #34	; 0x22
 800b758:	601a      	str	r2, [r3, #0]
 800b75a:	e7c4      	b.n	800b6e6 <strtof+0x3e>
 800b75c:	20000024 	.word	0x20000024
 800b760:	0800e82f 	.word	0x0800e82f
 800b764:	7f7fffff 	.word	0x7f7fffff
 800b768:	7fefffff 	.word	0x7fefffff
 800b76c:	7ff00000 	.word	0x7ff00000
 800b770:	200001dc 	.word	0x200001dc

0800b774 <_fwalk_sglue>:
 800b774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b778:	4607      	mov	r7, r0
 800b77a:	4688      	mov	r8, r1
 800b77c:	4614      	mov	r4, r2
 800b77e:	2600      	movs	r6, #0
 800b780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b784:	f1b9 0901 	subs.w	r9, r9, #1
 800b788:	d505      	bpl.n	800b796 <_fwalk_sglue+0x22>
 800b78a:	6824      	ldr	r4, [r4, #0]
 800b78c:	2c00      	cmp	r4, #0
 800b78e:	d1f7      	bne.n	800b780 <_fwalk_sglue+0xc>
 800b790:	4630      	mov	r0, r6
 800b792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b796:	89ab      	ldrh	r3, [r5, #12]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d907      	bls.n	800b7ac <_fwalk_sglue+0x38>
 800b79c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	d003      	beq.n	800b7ac <_fwalk_sglue+0x38>
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	47c0      	blx	r8
 800b7aa:	4306      	orrs	r6, r0
 800b7ac:	3568      	adds	r5, #104	; 0x68
 800b7ae:	e7e9      	b.n	800b784 <_fwalk_sglue+0x10>

0800b7b0 <strncmp>:
 800b7b0:	b510      	push	{r4, lr}
 800b7b2:	b16a      	cbz	r2, 800b7d0 <strncmp+0x20>
 800b7b4:	3901      	subs	r1, #1
 800b7b6:	1884      	adds	r4, r0, r2
 800b7b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d103      	bne.n	800b7cc <strncmp+0x1c>
 800b7c4:	42a0      	cmp	r0, r4
 800b7c6:	d001      	beq.n	800b7cc <strncmp+0x1c>
 800b7c8:	2a00      	cmp	r2, #0
 800b7ca:	d1f5      	bne.n	800b7b8 <strncmp+0x8>
 800b7cc:	1ad0      	subs	r0, r2, r3
 800b7ce:	bd10      	pop	{r4, pc}
 800b7d0:	4610      	mov	r0, r2
 800b7d2:	e7fc      	b.n	800b7ce <strncmp+0x1e>

0800b7d4 <memset>:
 800b7d4:	4402      	add	r2, r0
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d100      	bne.n	800b7de <memset+0xa>
 800b7dc:	4770      	bx	lr
 800b7de:	f803 1b01 	strb.w	r1, [r3], #1
 800b7e2:	e7f9      	b.n	800b7d8 <memset+0x4>

0800b7e4 <__errno>:
 800b7e4:	4b01      	ldr	r3, [pc, #4]	; (800b7ec <__errno+0x8>)
 800b7e6:	6818      	ldr	r0, [r3, #0]
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	200001dc 	.word	0x200001dc

0800b7f0 <__libc_init_array>:
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	4d0d      	ldr	r5, [pc, #52]	; (800b828 <__libc_init_array+0x38>)
 800b7f4:	4c0d      	ldr	r4, [pc, #52]	; (800b82c <__libc_init_array+0x3c>)
 800b7f6:	1b64      	subs	r4, r4, r5
 800b7f8:	10a4      	asrs	r4, r4, #2
 800b7fa:	2600      	movs	r6, #0
 800b7fc:	42a6      	cmp	r6, r4
 800b7fe:	d109      	bne.n	800b814 <__libc_init_array+0x24>
 800b800:	4d0b      	ldr	r5, [pc, #44]	; (800b830 <__libc_init_array+0x40>)
 800b802:	4c0c      	ldr	r4, [pc, #48]	; (800b834 <__libc_init_array+0x44>)
 800b804:	f002 fd34 	bl	800e270 <_init>
 800b808:	1b64      	subs	r4, r4, r5
 800b80a:	10a4      	asrs	r4, r4, #2
 800b80c:	2600      	movs	r6, #0
 800b80e:	42a6      	cmp	r6, r4
 800b810:	d105      	bne.n	800b81e <__libc_init_array+0x2e>
 800b812:	bd70      	pop	{r4, r5, r6, pc}
 800b814:	f855 3b04 	ldr.w	r3, [r5], #4
 800b818:	4798      	blx	r3
 800b81a:	3601      	adds	r6, #1
 800b81c:	e7ee      	b.n	800b7fc <__libc_init_array+0xc>
 800b81e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b822:	4798      	blx	r3
 800b824:	3601      	adds	r6, #1
 800b826:	e7f2      	b.n	800b80e <__libc_init_array+0x1e>
 800b828:	0800e8e0 	.word	0x0800e8e0
 800b82c:	0800e8e0 	.word	0x0800e8e0
 800b830:	0800e8e0 	.word	0x0800e8e0
 800b834:	0800e8e4 	.word	0x0800e8e4

0800b838 <__retarget_lock_init_recursive>:
 800b838:	4770      	bx	lr

0800b83a <__retarget_lock_acquire_recursive>:
 800b83a:	4770      	bx	lr

0800b83c <__retarget_lock_release_recursive>:
 800b83c:	4770      	bx	lr

0800b83e <memcpy>:
 800b83e:	440a      	add	r2, r1
 800b840:	4291      	cmp	r1, r2
 800b842:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b846:	d100      	bne.n	800b84a <memcpy+0xc>
 800b848:	4770      	bx	lr
 800b84a:	b510      	push	{r4, lr}
 800b84c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b850:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b854:	4291      	cmp	r1, r2
 800b856:	d1f9      	bne.n	800b84c <memcpy+0xe>
 800b858:	bd10      	pop	{r4, pc}
 800b85a:	0000      	movs	r0, r0
 800b85c:	0000      	movs	r0, r0
	...

0800b860 <nan>:
 800b860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b868 <nan+0x8>
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	00000000 	.word	0x00000000
 800b86c:	7ff80000 	.word	0x7ff80000

0800b870 <nanf>:
 800b870:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b878 <nanf+0x8>
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	7fc00000 	.word	0x7fc00000

0800b87c <rshift>:
 800b87c:	6903      	ldr	r3, [r0, #16]
 800b87e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b882:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b886:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b88a:	f100 0414 	add.w	r4, r0, #20
 800b88e:	dd45      	ble.n	800b91c <rshift+0xa0>
 800b890:	f011 011f 	ands.w	r1, r1, #31
 800b894:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b898:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b89c:	d10c      	bne.n	800b8b8 <rshift+0x3c>
 800b89e:	f100 0710 	add.w	r7, r0, #16
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	42b1      	cmp	r1, r6
 800b8a6:	d334      	bcc.n	800b912 <rshift+0x96>
 800b8a8:	1a9b      	subs	r3, r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	1eea      	subs	r2, r5, #3
 800b8ae:	4296      	cmp	r6, r2
 800b8b0:	bf38      	it	cc
 800b8b2:	2300      	movcc	r3, #0
 800b8b4:	4423      	add	r3, r4
 800b8b6:	e015      	b.n	800b8e4 <rshift+0x68>
 800b8b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b8bc:	f1c1 0820 	rsb	r8, r1, #32
 800b8c0:	40cf      	lsrs	r7, r1
 800b8c2:	f105 0e04 	add.w	lr, r5, #4
 800b8c6:	46a1      	mov	r9, r4
 800b8c8:	4576      	cmp	r6, lr
 800b8ca:	46f4      	mov	ip, lr
 800b8cc:	d815      	bhi.n	800b8fa <rshift+0x7e>
 800b8ce:	1a9a      	subs	r2, r3, r2
 800b8d0:	0092      	lsls	r2, r2, #2
 800b8d2:	3a04      	subs	r2, #4
 800b8d4:	3501      	adds	r5, #1
 800b8d6:	42ae      	cmp	r6, r5
 800b8d8:	bf38      	it	cc
 800b8da:	2200      	movcc	r2, #0
 800b8dc:	18a3      	adds	r3, r4, r2
 800b8de:	50a7      	str	r7, [r4, r2]
 800b8e0:	b107      	cbz	r7, 800b8e4 <rshift+0x68>
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	1b1a      	subs	r2, r3, r4
 800b8e6:	42a3      	cmp	r3, r4
 800b8e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b8ec:	bf08      	it	eq
 800b8ee:	2300      	moveq	r3, #0
 800b8f0:	6102      	str	r2, [r0, #16]
 800b8f2:	bf08      	it	eq
 800b8f4:	6143      	streq	r3, [r0, #20]
 800b8f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8fa:	f8dc c000 	ldr.w	ip, [ip]
 800b8fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800b902:	ea4c 0707 	orr.w	r7, ip, r7
 800b906:	f849 7b04 	str.w	r7, [r9], #4
 800b90a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b90e:	40cf      	lsrs	r7, r1
 800b910:	e7da      	b.n	800b8c8 <rshift+0x4c>
 800b912:	f851 cb04 	ldr.w	ip, [r1], #4
 800b916:	f847 cf04 	str.w	ip, [r7, #4]!
 800b91a:	e7c3      	b.n	800b8a4 <rshift+0x28>
 800b91c:	4623      	mov	r3, r4
 800b91e:	e7e1      	b.n	800b8e4 <rshift+0x68>

0800b920 <__hexdig_fun>:
 800b920:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b924:	2b09      	cmp	r3, #9
 800b926:	d802      	bhi.n	800b92e <__hexdig_fun+0xe>
 800b928:	3820      	subs	r0, #32
 800b92a:	b2c0      	uxtb	r0, r0
 800b92c:	4770      	bx	lr
 800b92e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b932:	2b05      	cmp	r3, #5
 800b934:	d801      	bhi.n	800b93a <__hexdig_fun+0x1a>
 800b936:	3847      	subs	r0, #71	; 0x47
 800b938:	e7f7      	b.n	800b92a <__hexdig_fun+0xa>
 800b93a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b93e:	2b05      	cmp	r3, #5
 800b940:	d801      	bhi.n	800b946 <__hexdig_fun+0x26>
 800b942:	3827      	subs	r0, #39	; 0x27
 800b944:	e7f1      	b.n	800b92a <__hexdig_fun+0xa>
 800b946:	2000      	movs	r0, #0
 800b948:	4770      	bx	lr
	...

0800b94c <__gethex>:
 800b94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b950:	4617      	mov	r7, r2
 800b952:	680a      	ldr	r2, [r1, #0]
 800b954:	b085      	sub	sp, #20
 800b956:	f102 0b02 	add.w	fp, r2, #2
 800b95a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b95e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b962:	4681      	mov	r9, r0
 800b964:	468a      	mov	sl, r1
 800b966:	9302      	str	r3, [sp, #8]
 800b968:	32fe      	adds	r2, #254	; 0xfe
 800b96a:	eb02 030b 	add.w	r3, r2, fp
 800b96e:	46d8      	mov	r8, fp
 800b970:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b974:	9301      	str	r3, [sp, #4]
 800b976:	2830      	cmp	r0, #48	; 0x30
 800b978:	d0f7      	beq.n	800b96a <__gethex+0x1e>
 800b97a:	f7ff ffd1 	bl	800b920 <__hexdig_fun>
 800b97e:	4604      	mov	r4, r0
 800b980:	2800      	cmp	r0, #0
 800b982:	d138      	bne.n	800b9f6 <__gethex+0xaa>
 800b984:	49a7      	ldr	r1, [pc, #668]	; (800bc24 <__gethex+0x2d8>)
 800b986:	2201      	movs	r2, #1
 800b988:	4640      	mov	r0, r8
 800b98a:	f7ff ff11 	bl	800b7b0 <strncmp>
 800b98e:	4606      	mov	r6, r0
 800b990:	2800      	cmp	r0, #0
 800b992:	d169      	bne.n	800ba68 <__gethex+0x11c>
 800b994:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b998:	465d      	mov	r5, fp
 800b99a:	f7ff ffc1 	bl	800b920 <__hexdig_fun>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d064      	beq.n	800ba6c <__gethex+0x120>
 800b9a2:	465a      	mov	r2, fp
 800b9a4:	7810      	ldrb	r0, [r2, #0]
 800b9a6:	2830      	cmp	r0, #48	; 0x30
 800b9a8:	4690      	mov	r8, r2
 800b9aa:	f102 0201 	add.w	r2, r2, #1
 800b9ae:	d0f9      	beq.n	800b9a4 <__gethex+0x58>
 800b9b0:	f7ff ffb6 	bl	800b920 <__hexdig_fun>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	fab0 f480 	clz	r4, r0
 800b9ba:	0964      	lsrs	r4, r4, #5
 800b9bc:	465e      	mov	r6, fp
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	4642      	mov	r2, r8
 800b9c2:	4615      	mov	r5, r2
 800b9c4:	3201      	adds	r2, #1
 800b9c6:	7828      	ldrb	r0, [r5, #0]
 800b9c8:	f7ff ffaa 	bl	800b920 <__hexdig_fun>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d1f8      	bne.n	800b9c2 <__gethex+0x76>
 800b9d0:	4994      	ldr	r1, [pc, #592]	; (800bc24 <__gethex+0x2d8>)
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	f7ff feeb 	bl	800b7b0 <strncmp>
 800b9da:	b978      	cbnz	r0, 800b9fc <__gethex+0xb0>
 800b9dc:	b946      	cbnz	r6, 800b9f0 <__gethex+0xa4>
 800b9de:	1c6e      	adds	r6, r5, #1
 800b9e0:	4632      	mov	r2, r6
 800b9e2:	4615      	mov	r5, r2
 800b9e4:	3201      	adds	r2, #1
 800b9e6:	7828      	ldrb	r0, [r5, #0]
 800b9e8:	f7ff ff9a 	bl	800b920 <__hexdig_fun>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d1f8      	bne.n	800b9e2 <__gethex+0x96>
 800b9f0:	1b73      	subs	r3, r6, r5
 800b9f2:	009e      	lsls	r6, r3, #2
 800b9f4:	e004      	b.n	800ba00 <__gethex+0xb4>
 800b9f6:	2400      	movs	r4, #0
 800b9f8:	4626      	mov	r6, r4
 800b9fa:	e7e1      	b.n	800b9c0 <__gethex+0x74>
 800b9fc:	2e00      	cmp	r6, #0
 800b9fe:	d1f7      	bne.n	800b9f0 <__gethex+0xa4>
 800ba00:	782b      	ldrb	r3, [r5, #0]
 800ba02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba06:	2b50      	cmp	r3, #80	; 0x50
 800ba08:	d13d      	bne.n	800ba86 <__gethex+0x13a>
 800ba0a:	786b      	ldrb	r3, [r5, #1]
 800ba0c:	2b2b      	cmp	r3, #43	; 0x2b
 800ba0e:	d02f      	beq.n	800ba70 <__gethex+0x124>
 800ba10:	2b2d      	cmp	r3, #45	; 0x2d
 800ba12:	d031      	beq.n	800ba78 <__gethex+0x12c>
 800ba14:	1c69      	adds	r1, r5, #1
 800ba16:	f04f 0b00 	mov.w	fp, #0
 800ba1a:	7808      	ldrb	r0, [r1, #0]
 800ba1c:	f7ff ff80 	bl	800b920 <__hexdig_fun>
 800ba20:	1e42      	subs	r2, r0, #1
 800ba22:	b2d2      	uxtb	r2, r2
 800ba24:	2a18      	cmp	r2, #24
 800ba26:	d82e      	bhi.n	800ba86 <__gethex+0x13a>
 800ba28:	f1a0 0210 	sub.w	r2, r0, #16
 800ba2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ba30:	f7ff ff76 	bl	800b920 <__hexdig_fun>
 800ba34:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800ba38:	fa5f fc8c 	uxtb.w	ip, ip
 800ba3c:	f1bc 0f18 	cmp.w	ip, #24
 800ba40:	d91d      	bls.n	800ba7e <__gethex+0x132>
 800ba42:	f1bb 0f00 	cmp.w	fp, #0
 800ba46:	d000      	beq.n	800ba4a <__gethex+0xfe>
 800ba48:	4252      	negs	r2, r2
 800ba4a:	4416      	add	r6, r2
 800ba4c:	f8ca 1000 	str.w	r1, [sl]
 800ba50:	b1dc      	cbz	r4, 800ba8a <__gethex+0x13e>
 800ba52:	9b01      	ldr	r3, [sp, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	bf14      	ite	ne
 800ba58:	f04f 0800 	movne.w	r8, #0
 800ba5c:	f04f 0806 	moveq.w	r8, #6
 800ba60:	4640      	mov	r0, r8
 800ba62:	b005      	add	sp, #20
 800ba64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba68:	4645      	mov	r5, r8
 800ba6a:	4626      	mov	r6, r4
 800ba6c:	2401      	movs	r4, #1
 800ba6e:	e7c7      	b.n	800ba00 <__gethex+0xb4>
 800ba70:	f04f 0b00 	mov.w	fp, #0
 800ba74:	1ca9      	adds	r1, r5, #2
 800ba76:	e7d0      	b.n	800ba1a <__gethex+0xce>
 800ba78:	f04f 0b01 	mov.w	fp, #1
 800ba7c:	e7fa      	b.n	800ba74 <__gethex+0x128>
 800ba7e:	230a      	movs	r3, #10
 800ba80:	fb03 0002 	mla	r0, r3, r2, r0
 800ba84:	e7d0      	b.n	800ba28 <__gethex+0xdc>
 800ba86:	4629      	mov	r1, r5
 800ba88:	e7e0      	b.n	800ba4c <__gethex+0x100>
 800ba8a:	eba5 0308 	sub.w	r3, r5, r8
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	4621      	mov	r1, r4
 800ba92:	2b07      	cmp	r3, #7
 800ba94:	dc0a      	bgt.n	800baac <__gethex+0x160>
 800ba96:	4648      	mov	r0, r9
 800ba98:	f000 fbb4 	bl	800c204 <_Balloc>
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	b940      	cbnz	r0, 800bab2 <__gethex+0x166>
 800baa0:	4b61      	ldr	r3, [pc, #388]	; (800bc28 <__gethex+0x2dc>)
 800baa2:	4602      	mov	r2, r0
 800baa4:	21e4      	movs	r1, #228	; 0xe4
 800baa6:	4861      	ldr	r0, [pc, #388]	; (800bc2c <__gethex+0x2e0>)
 800baa8:	f001 f900 	bl	800ccac <__assert_func>
 800baac:	3101      	adds	r1, #1
 800baae:	105b      	asrs	r3, r3, #1
 800bab0:	e7ef      	b.n	800ba92 <__gethex+0x146>
 800bab2:	f100 0a14 	add.w	sl, r0, #20
 800bab6:	2300      	movs	r3, #0
 800bab8:	495a      	ldr	r1, [pc, #360]	; (800bc24 <__gethex+0x2d8>)
 800baba:	f8cd a004 	str.w	sl, [sp, #4]
 800babe:	469b      	mov	fp, r3
 800bac0:	45a8      	cmp	r8, r5
 800bac2:	d342      	bcc.n	800bb4a <__gethex+0x1fe>
 800bac4:	9801      	ldr	r0, [sp, #4]
 800bac6:	f840 bb04 	str.w	fp, [r0], #4
 800baca:	eba0 000a 	sub.w	r0, r0, sl
 800bace:	1080      	asrs	r0, r0, #2
 800bad0:	6120      	str	r0, [r4, #16]
 800bad2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bad6:	4658      	mov	r0, fp
 800bad8:	f000 fc86 	bl	800c3e8 <__hi0bits>
 800badc:	683d      	ldr	r5, [r7, #0]
 800bade:	eba8 0000 	sub.w	r0, r8, r0
 800bae2:	42a8      	cmp	r0, r5
 800bae4:	dd59      	ble.n	800bb9a <__gethex+0x24e>
 800bae6:	eba0 0805 	sub.w	r8, r0, r5
 800baea:	4641      	mov	r1, r8
 800baec:	4620      	mov	r0, r4
 800baee:	f001 f815 	bl	800cb1c <__any_on>
 800baf2:	4683      	mov	fp, r0
 800baf4:	b1b8      	cbz	r0, 800bb26 <__gethex+0x1da>
 800baf6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800bafa:	1159      	asrs	r1, r3, #5
 800bafc:	f003 021f 	and.w	r2, r3, #31
 800bb00:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bb04:	f04f 0b01 	mov.w	fp, #1
 800bb08:	fa0b f202 	lsl.w	r2, fp, r2
 800bb0c:	420a      	tst	r2, r1
 800bb0e:	d00a      	beq.n	800bb26 <__gethex+0x1da>
 800bb10:	455b      	cmp	r3, fp
 800bb12:	dd06      	ble.n	800bb22 <__gethex+0x1d6>
 800bb14:	f1a8 0102 	sub.w	r1, r8, #2
 800bb18:	4620      	mov	r0, r4
 800bb1a:	f000 ffff 	bl	800cb1c <__any_on>
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d138      	bne.n	800bb94 <__gethex+0x248>
 800bb22:	f04f 0b02 	mov.w	fp, #2
 800bb26:	4641      	mov	r1, r8
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f7ff fea7 	bl	800b87c <rshift>
 800bb2e:	4446      	add	r6, r8
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	42b3      	cmp	r3, r6
 800bb34:	da41      	bge.n	800bbba <__gethex+0x26e>
 800bb36:	4621      	mov	r1, r4
 800bb38:	4648      	mov	r0, r9
 800bb3a:	f000 fba3 	bl	800c284 <_Bfree>
 800bb3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb40:	2300      	movs	r3, #0
 800bb42:	6013      	str	r3, [r2, #0]
 800bb44:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bb48:	e78a      	b.n	800ba60 <__gethex+0x114>
 800bb4a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bb4e:	2a2e      	cmp	r2, #46	; 0x2e
 800bb50:	d014      	beq.n	800bb7c <__gethex+0x230>
 800bb52:	2b20      	cmp	r3, #32
 800bb54:	d106      	bne.n	800bb64 <__gethex+0x218>
 800bb56:	9b01      	ldr	r3, [sp, #4]
 800bb58:	f843 bb04 	str.w	fp, [r3], #4
 800bb5c:	f04f 0b00 	mov.w	fp, #0
 800bb60:	9301      	str	r3, [sp, #4]
 800bb62:	465b      	mov	r3, fp
 800bb64:	7828      	ldrb	r0, [r5, #0]
 800bb66:	9303      	str	r3, [sp, #12]
 800bb68:	f7ff feda 	bl	800b920 <__hexdig_fun>
 800bb6c:	9b03      	ldr	r3, [sp, #12]
 800bb6e:	f000 000f 	and.w	r0, r0, #15
 800bb72:	4098      	lsls	r0, r3
 800bb74:	ea4b 0b00 	orr.w	fp, fp, r0
 800bb78:	3304      	adds	r3, #4
 800bb7a:	e7a1      	b.n	800bac0 <__gethex+0x174>
 800bb7c:	45a8      	cmp	r8, r5
 800bb7e:	d8e8      	bhi.n	800bb52 <__gethex+0x206>
 800bb80:	2201      	movs	r2, #1
 800bb82:	4628      	mov	r0, r5
 800bb84:	9303      	str	r3, [sp, #12]
 800bb86:	f7ff fe13 	bl	800b7b0 <strncmp>
 800bb8a:	4926      	ldr	r1, [pc, #152]	; (800bc24 <__gethex+0x2d8>)
 800bb8c:	9b03      	ldr	r3, [sp, #12]
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d1df      	bne.n	800bb52 <__gethex+0x206>
 800bb92:	e795      	b.n	800bac0 <__gethex+0x174>
 800bb94:	f04f 0b03 	mov.w	fp, #3
 800bb98:	e7c5      	b.n	800bb26 <__gethex+0x1da>
 800bb9a:	da0b      	bge.n	800bbb4 <__gethex+0x268>
 800bb9c:	eba5 0800 	sub.w	r8, r5, r0
 800bba0:	4621      	mov	r1, r4
 800bba2:	4642      	mov	r2, r8
 800bba4:	4648      	mov	r0, r9
 800bba6:	f000 fd87 	bl	800c6b8 <__lshift>
 800bbaa:	eba6 0608 	sub.w	r6, r6, r8
 800bbae:	4604      	mov	r4, r0
 800bbb0:	f100 0a14 	add.w	sl, r0, #20
 800bbb4:	f04f 0b00 	mov.w	fp, #0
 800bbb8:	e7ba      	b.n	800bb30 <__gethex+0x1e4>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	42b3      	cmp	r3, r6
 800bbbe:	dd73      	ble.n	800bca8 <__gethex+0x35c>
 800bbc0:	1b9e      	subs	r6, r3, r6
 800bbc2:	42b5      	cmp	r5, r6
 800bbc4:	dc34      	bgt.n	800bc30 <__gethex+0x2e4>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d023      	beq.n	800bc14 <__gethex+0x2c8>
 800bbcc:	2b03      	cmp	r3, #3
 800bbce:	d025      	beq.n	800bc1c <__gethex+0x2d0>
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d115      	bne.n	800bc00 <__gethex+0x2b4>
 800bbd4:	42b5      	cmp	r5, r6
 800bbd6:	d113      	bne.n	800bc00 <__gethex+0x2b4>
 800bbd8:	2d01      	cmp	r5, #1
 800bbda:	d10b      	bne.n	800bbf4 <__gethex+0x2a8>
 800bbdc:	9a02      	ldr	r2, [sp, #8]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6013      	str	r3, [r2, #0]
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	6123      	str	r3, [r4, #16]
 800bbe6:	f8ca 3000 	str.w	r3, [sl]
 800bbea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbec:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bbf0:	601c      	str	r4, [r3, #0]
 800bbf2:	e735      	b.n	800ba60 <__gethex+0x114>
 800bbf4:	1e69      	subs	r1, r5, #1
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f000 ff90 	bl	800cb1c <__any_on>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d1ed      	bne.n	800bbdc <__gethex+0x290>
 800bc00:	4621      	mov	r1, r4
 800bc02:	4648      	mov	r0, r9
 800bc04:	f000 fb3e 	bl	800c284 <_Bfree>
 800bc08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	6013      	str	r3, [r2, #0]
 800bc0e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bc12:	e725      	b.n	800ba60 <__gethex+0x114>
 800bc14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1f2      	bne.n	800bc00 <__gethex+0x2b4>
 800bc1a:	e7df      	b.n	800bbdc <__gethex+0x290>
 800bc1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1dc      	bne.n	800bbdc <__gethex+0x290>
 800bc22:	e7ed      	b.n	800bc00 <__gethex+0x2b4>
 800bc24:	0800e4a8 	.word	0x0800e4a8
 800bc28:	0800e611 	.word	0x0800e611
 800bc2c:	0800e622 	.word	0x0800e622
 800bc30:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800bc34:	f1bb 0f00 	cmp.w	fp, #0
 800bc38:	d133      	bne.n	800bca2 <__gethex+0x356>
 800bc3a:	f1b8 0f00 	cmp.w	r8, #0
 800bc3e:	d004      	beq.n	800bc4a <__gethex+0x2fe>
 800bc40:	4641      	mov	r1, r8
 800bc42:	4620      	mov	r0, r4
 800bc44:	f000 ff6a 	bl	800cb1c <__any_on>
 800bc48:	4683      	mov	fp, r0
 800bc4a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bc4e:	2301      	movs	r3, #1
 800bc50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bc54:	f008 081f 	and.w	r8, r8, #31
 800bc58:	fa03 f308 	lsl.w	r3, r3, r8
 800bc5c:	4213      	tst	r3, r2
 800bc5e:	4631      	mov	r1, r6
 800bc60:	4620      	mov	r0, r4
 800bc62:	bf18      	it	ne
 800bc64:	f04b 0b02 	orrne.w	fp, fp, #2
 800bc68:	1bad      	subs	r5, r5, r6
 800bc6a:	f7ff fe07 	bl	800b87c <rshift>
 800bc6e:	687e      	ldr	r6, [r7, #4]
 800bc70:	f04f 0802 	mov.w	r8, #2
 800bc74:	f1bb 0f00 	cmp.w	fp, #0
 800bc78:	d04a      	beq.n	800bd10 <__gethex+0x3c4>
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d016      	beq.n	800bcae <__gethex+0x362>
 800bc80:	2b03      	cmp	r3, #3
 800bc82:	d018      	beq.n	800bcb6 <__gethex+0x36a>
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d109      	bne.n	800bc9c <__gethex+0x350>
 800bc88:	f01b 0f02 	tst.w	fp, #2
 800bc8c:	d006      	beq.n	800bc9c <__gethex+0x350>
 800bc8e:	f8da 3000 	ldr.w	r3, [sl]
 800bc92:	ea4b 0b03 	orr.w	fp, fp, r3
 800bc96:	f01b 0f01 	tst.w	fp, #1
 800bc9a:	d10f      	bne.n	800bcbc <__gethex+0x370>
 800bc9c:	f048 0810 	orr.w	r8, r8, #16
 800bca0:	e036      	b.n	800bd10 <__gethex+0x3c4>
 800bca2:	f04f 0b01 	mov.w	fp, #1
 800bca6:	e7d0      	b.n	800bc4a <__gethex+0x2fe>
 800bca8:	f04f 0801 	mov.w	r8, #1
 800bcac:	e7e2      	b.n	800bc74 <__gethex+0x328>
 800bcae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcb0:	f1c3 0301 	rsb	r3, r3, #1
 800bcb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d0ef      	beq.n	800bc9c <__gethex+0x350>
 800bcbc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bcc0:	f104 0214 	add.w	r2, r4, #20
 800bcc4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bcc8:	9301      	str	r3, [sp, #4]
 800bcca:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bcce:	2300      	movs	r3, #0
 800bcd0:	4694      	mov	ip, r2
 800bcd2:	f852 1b04 	ldr.w	r1, [r2], #4
 800bcd6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800bcda:	d01e      	beq.n	800bd1a <__gethex+0x3ce>
 800bcdc:	3101      	adds	r1, #1
 800bcde:	f8cc 1000 	str.w	r1, [ip]
 800bce2:	f1b8 0f02 	cmp.w	r8, #2
 800bce6:	f104 0214 	add.w	r2, r4, #20
 800bcea:	d13d      	bne.n	800bd68 <__gethex+0x41c>
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	42ab      	cmp	r3, r5
 800bcf2:	d10b      	bne.n	800bd0c <__gethex+0x3c0>
 800bcf4:	1169      	asrs	r1, r5, #5
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	f005 051f 	and.w	r5, r5, #31
 800bcfc:	fa03 f505 	lsl.w	r5, r3, r5
 800bd00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd04:	421d      	tst	r5, r3
 800bd06:	bf18      	it	ne
 800bd08:	f04f 0801 	movne.w	r8, #1
 800bd0c:	f048 0820 	orr.w	r8, r8, #32
 800bd10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd12:	601c      	str	r4, [r3, #0]
 800bd14:	9b02      	ldr	r3, [sp, #8]
 800bd16:	601e      	str	r6, [r3, #0]
 800bd18:	e6a2      	b.n	800ba60 <__gethex+0x114>
 800bd1a:	4290      	cmp	r0, r2
 800bd1c:	f842 3c04 	str.w	r3, [r2, #-4]
 800bd20:	d8d6      	bhi.n	800bcd0 <__gethex+0x384>
 800bd22:	68a2      	ldr	r2, [r4, #8]
 800bd24:	4593      	cmp	fp, r2
 800bd26:	db17      	blt.n	800bd58 <__gethex+0x40c>
 800bd28:	6861      	ldr	r1, [r4, #4]
 800bd2a:	4648      	mov	r0, r9
 800bd2c:	3101      	adds	r1, #1
 800bd2e:	f000 fa69 	bl	800c204 <_Balloc>
 800bd32:	4682      	mov	sl, r0
 800bd34:	b918      	cbnz	r0, 800bd3e <__gethex+0x3f2>
 800bd36:	4b1b      	ldr	r3, [pc, #108]	; (800bda4 <__gethex+0x458>)
 800bd38:	4602      	mov	r2, r0
 800bd3a:	2184      	movs	r1, #132	; 0x84
 800bd3c:	e6b3      	b.n	800baa6 <__gethex+0x15a>
 800bd3e:	6922      	ldr	r2, [r4, #16]
 800bd40:	3202      	adds	r2, #2
 800bd42:	f104 010c 	add.w	r1, r4, #12
 800bd46:	0092      	lsls	r2, r2, #2
 800bd48:	300c      	adds	r0, #12
 800bd4a:	f7ff fd78 	bl	800b83e <memcpy>
 800bd4e:	4621      	mov	r1, r4
 800bd50:	4648      	mov	r0, r9
 800bd52:	f000 fa97 	bl	800c284 <_Bfree>
 800bd56:	4654      	mov	r4, sl
 800bd58:	6922      	ldr	r2, [r4, #16]
 800bd5a:	1c51      	adds	r1, r2, #1
 800bd5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bd60:	6121      	str	r1, [r4, #16]
 800bd62:	2101      	movs	r1, #1
 800bd64:	6151      	str	r1, [r2, #20]
 800bd66:	e7bc      	b.n	800bce2 <__gethex+0x396>
 800bd68:	6921      	ldr	r1, [r4, #16]
 800bd6a:	4559      	cmp	r1, fp
 800bd6c:	dd0b      	ble.n	800bd86 <__gethex+0x43a>
 800bd6e:	2101      	movs	r1, #1
 800bd70:	4620      	mov	r0, r4
 800bd72:	f7ff fd83 	bl	800b87c <rshift>
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	3601      	adds	r6, #1
 800bd7a:	42b3      	cmp	r3, r6
 800bd7c:	f6ff aedb 	blt.w	800bb36 <__gethex+0x1ea>
 800bd80:	f04f 0801 	mov.w	r8, #1
 800bd84:	e7c2      	b.n	800bd0c <__gethex+0x3c0>
 800bd86:	f015 051f 	ands.w	r5, r5, #31
 800bd8a:	d0f9      	beq.n	800bd80 <__gethex+0x434>
 800bd8c:	9b01      	ldr	r3, [sp, #4]
 800bd8e:	441a      	add	r2, r3
 800bd90:	f1c5 0520 	rsb	r5, r5, #32
 800bd94:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bd98:	f000 fb26 	bl	800c3e8 <__hi0bits>
 800bd9c:	42a8      	cmp	r0, r5
 800bd9e:	dbe6      	blt.n	800bd6e <__gethex+0x422>
 800bda0:	e7ee      	b.n	800bd80 <__gethex+0x434>
 800bda2:	bf00      	nop
 800bda4:	0800e611 	.word	0x0800e611

0800bda8 <L_shift>:
 800bda8:	f1c2 0208 	rsb	r2, r2, #8
 800bdac:	0092      	lsls	r2, r2, #2
 800bdae:	b570      	push	{r4, r5, r6, lr}
 800bdb0:	f1c2 0620 	rsb	r6, r2, #32
 800bdb4:	6843      	ldr	r3, [r0, #4]
 800bdb6:	6804      	ldr	r4, [r0, #0]
 800bdb8:	fa03 f506 	lsl.w	r5, r3, r6
 800bdbc:	432c      	orrs	r4, r5
 800bdbe:	40d3      	lsrs	r3, r2
 800bdc0:	6004      	str	r4, [r0, #0]
 800bdc2:	f840 3f04 	str.w	r3, [r0, #4]!
 800bdc6:	4288      	cmp	r0, r1
 800bdc8:	d3f4      	bcc.n	800bdb4 <L_shift+0xc>
 800bdca:	bd70      	pop	{r4, r5, r6, pc}

0800bdcc <__match>:
 800bdcc:	b530      	push	{r4, r5, lr}
 800bdce:	6803      	ldr	r3, [r0, #0]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdd6:	b914      	cbnz	r4, 800bdde <__match+0x12>
 800bdd8:	6003      	str	r3, [r0, #0]
 800bdda:	2001      	movs	r0, #1
 800bddc:	bd30      	pop	{r4, r5, pc}
 800bdde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bde2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bde6:	2d19      	cmp	r5, #25
 800bde8:	bf98      	it	ls
 800bdea:	3220      	addls	r2, #32
 800bdec:	42a2      	cmp	r2, r4
 800bdee:	d0f0      	beq.n	800bdd2 <__match+0x6>
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	e7f3      	b.n	800bddc <__match+0x10>

0800bdf4 <__hexnan>:
 800bdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf8:	680b      	ldr	r3, [r1, #0]
 800bdfa:	6801      	ldr	r1, [r0, #0]
 800bdfc:	115e      	asrs	r6, r3, #5
 800bdfe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800be02:	f013 031f 	ands.w	r3, r3, #31
 800be06:	b087      	sub	sp, #28
 800be08:	bf18      	it	ne
 800be0a:	3604      	addne	r6, #4
 800be0c:	2500      	movs	r5, #0
 800be0e:	1f37      	subs	r7, r6, #4
 800be10:	4682      	mov	sl, r0
 800be12:	4690      	mov	r8, r2
 800be14:	9301      	str	r3, [sp, #4]
 800be16:	f846 5c04 	str.w	r5, [r6, #-4]
 800be1a:	46b9      	mov	r9, r7
 800be1c:	463c      	mov	r4, r7
 800be1e:	9502      	str	r5, [sp, #8]
 800be20:	46ab      	mov	fp, r5
 800be22:	784a      	ldrb	r2, [r1, #1]
 800be24:	1c4b      	adds	r3, r1, #1
 800be26:	9303      	str	r3, [sp, #12]
 800be28:	b342      	cbz	r2, 800be7c <__hexnan+0x88>
 800be2a:	4610      	mov	r0, r2
 800be2c:	9105      	str	r1, [sp, #20]
 800be2e:	9204      	str	r2, [sp, #16]
 800be30:	f7ff fd76 	bl	800b920 <__hexdig_fun>
 800be34:	2800      	cmp	r0, #0
 800be36:	d14f      	bne.n	800bed8 <__hexnan+0xe4>
 800be38:	9a04      	ldr	r2, [sp, #16]
 800be3a:	9905      	ldr	r1, [sp, #20]
 800be3c:	2a20      	cmp	r2, #32
 800be3e:	d818      	bhi.n	800be72 <__hexnan+0x7e>
 800be40:	9b02      	ldr	r3, [sp, #8]
 800be42:	459b      	cmp	fp, r3
 800be44:	dd13      	ble.n	800be6e <__hexnan+0x7a>
 800be46:	454c      	cmp	r4, r9
 800be48:	d206      	bcs.n	800be58 <__hexnan+0x64>
 800be4a:	2d07      	cmp	r5, #7
 800be4c:	dc04      	bgt.n	800be58 <__hexnan+0x64>
 800be4e:	462a      	mov	r2, r5
 800be50:	4649      	mov	r1, r9
 800be52:	4620      	mov	r0, r4
 800be54:	f7ff ffa8 	bl	800bda8 <L_shift>
 800be58:	4544      	cmp	r4, r8
 800be5a:	d950      	bls.n	800befe <__hexnan+0x10a>
 800be5c:	2300      	movs	r3, #0
 800be5e:	f1a4 0904 	sub.w	r9, r4, #4
 800be62:	f844 3c04 	str.w	r3, [r4, #-4]
 800be66:	f8cd b008 	str.w	fp, [sp, #8]
 800be6a:	464c      	mov	r4, r9
 800be6c:	461d      	mov	r5, r3
 800be6e:	9903      	ldr	r1, [sp, #12]
 800be70:	e7d7      	b.n	800be22 <__hexnan+0x2e>
 800be72:	2a29      	cmp	r2, #41	; 0x29
 800be74:	d155      	bne.n	800bf22 <__hexnan+0x12e>
 800be76:	3102      	adds	r1, #2
 800be78:	f8ca 1000 	str.w	r1, [sl]
 800be7c:	f1bb 0f00 	cmp.w	fp, #0
 800be80:	d04f      	beq.n	800bf22 <__hexnan+0x12e>
 800be82:	454c      	cmp	r4, r9
 800be84:	d206      	bcs.n	800be94 <__hexnan+0xa0>
 800be86:	2d07      	cmp	r5, #7
 800be88:	dc04      	bgt.n	800be94 <__hexnan+0xa0>
 800be8a:	462a      	mov	r2, r5
 800be8c:	4649      	mov	r1, r9
 800be8e:	4620      	mov	r0, r4
 800be90:	f7ff ff8a 	bl	800bda8 <L_shift>
 800be94:	4544      	cmp	r4, r8
 800be96:	d934      	bls.n	800bf02 <__hexnan+0x10e>
 800be98:	f1a8 0204 	sub.w	r2, r8, #4
 800be9c:	4623      	mov	r3, r4
 800be9e:	f853 1b04 	ldr.w	r1, [r3], #4
 800bea2:	f842 1f04 	str.w	r1, [r2, #4]!
 800bea6:	429f      	cmp	r7, r3
 800bea8:	d2f9      	bcs.n	800be9e <__hexnan+0xaa>
 800beaa:	1b3b      	subs	r3, r7, r4
 800beac:	f023 0303 	bic.w	r3, r3, #3
 800beb0:	3304      	adds	r3, #4
 800beb2:	3e03      	subs	r6, #3
 800beb4:	3401      	adds	r4, #1
 800beb6:	42a6      	cmp	r6, r4
 800beb8:	bf38      	it	cc
 800beba:	2304      	movcc	r3, #4
 800bebc:	4443      	add	r3, r8
 800bebe:	2200      	movs	r2, #0
 800bec0:	f843 2b04 	str.w	r2, [r3], #4
 800bec4:	429f      	cmp	r7, r3
 800bec6:	d2fb      	bcs.n	800bec0 <__hexnan+0xcc>
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	b91b      	cbnz	r3, 800bed4 <__hexnan+0xe0>
 800becc:	4547      	cmp	r7, r8
 800bece:	d126      	bne.n	800bf1e <__hexnan+0x12a>
 800bed0:	2301      	movs	r3, #1
 800bed2:	603b      	str	r3, [r7, #0]
 800bed4:	2005      	movs	r0, #5
 800bed6:	e025      	b.n	800bf24 <__hexnan+0x130>
 800bed8:	3501      	adds	r5, #1
 800beda:	2d08      	cmp	r5, #8
 800bedc:	f10b 0b01 	add.w	fp, fp, #1
 800bee0:	dd06      	ble.n	800bef0 <__hexnan+0xfc>
 800bee2:	4544      	cmp	r4, r8
 800bee4:	d9c3      	bls.n	800be6e <__hexnan+0x7a>
 800bee6:	2300      	movs	r3, #0
 800bee8:	f844 3c04 	str.w	r3, [r4, #-4]
 800beec:	2501      	movs	r5, #1
 800beee:	3c04      	subs	r4, #4
 800bef0:	6822      	ldr	r2, [r4, #0]
 800bef2:	f000 000f 	and.w	r0, r0, #15
 800bef6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800befa:	6020      	str	r0, [r4, #0]
 800befc:	e7b7      	b.n	800be6e <__hexnan+0x7a>
 800befe:	2508      	movs	r5, #8
 800bf00:	e7b5      	b.n	800be6e <__hexnan+0x7a>
 800bf02:	9b01      	ldr	r3, [sp, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d0df      	beq.n	800bec8 <__hexnan+0xd4>
 800bf08:	f1c3 0320 	rsb	r3, r3, #32
 800bf0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf10:	40da      	lsrs	r2, r3
 800bf12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bf16:	4013      	ands	r3, r2
 800bf18:	f846 3c04 	str.w	r3, [r6, #-4]
 800bf1c:	e7d4      	b.n	800bec8 <__hexnan+0xd4>
 800bf1e:	3f04      	subs	r7, #4
 800bf20:	e7d2      	b.n	800bec8 <__hexnan+0xd4>
 800bf22:	2004      	movs	r0, #4
 800bf24:	b007      	add	sp, #28
 800bf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800bf2c <sbrk_aligned>:
 800bf2c:	b570      	push	{r4, r5, r6, lr}
 800bf2e:	4e0e      	ldr	r6, [pc, #56]	; (800bf68 <sbrk_aligned+0x3c>)
 800bf30:	460c      	mov	r4, r1
 800bf32:	6831      	ldr	r1, [r6, #0]
 800bf34:	4605      	mov	r5, r0
 800bf36:	b911      	cbnz	r1, 800bf3e <sbrk_aligned+0x12>
 800bf38:	f000 fe96 	bl	800cc68 <_sbrk_r>
 800bf3c:	6030      	str	r0, [r6, #0]
 800bf3e:	4621      	mov	r1, r4
 800bf40:	4628      	mov	r0, r5
 800bf42:	f000 fe91 	bl	800cc68 <_sbrk_r>
 800bf46:	1c43      	adds	r3, r0, #1
 800bf48:	d00a      	beq.n	800bf60 <sbrk_aligned+0x34>
 800bf4a:	1cc4      	adds	r4, r0, #3
 800bf4c:	f024 0403 	bic.w	r4, r4, #3
 800bf50:	42a0      	cmp	r0, r4
 800bf52:	d007      	beq.n	800bf64 <sbrk_aligned+0x38>
 800bf54:	1a21      	subs	r1, r4, r0
 800bf56:	4628      	mov	r0, r5
 800bf58:	f000 fe86 	bl	800cc68 <_sbrk_r>
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	d101      	bne.n	800bf64 <sbrk_aligned+0x38>
 800bf60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bf64:	4620      	mov	r0, r4
 800bf66:	bd70      	pop	{r4, r5, r6, pc}
 800bf68:	2000075c 	.word	0x2000075c

0800bf6c <_malloc_r>:
 800bf6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf70:	1ccd      	adds	r5, r1, #3
 800bf72:	f025 0503 	bic.w	r5, r5, #3
 800bf76:	3508      	adds	r5, #8
 800bf78:	2d0c      	cmp	r5, #12
 800bf7a:	bf38      	it	cc
 800bf7c:	250c      	movcc	r5, #12
 800bf7e:	2d00      	cmp	r5, #0
 800bf80:	4607      	mov	r7, r0
 800bf82:	db01      	blt.n	800bf88 <_malloc_r+0x1c>
 800bf84:	42a9      	cmp	r1, r5
 800bf86:	d905      	bls.n	800bf94 <_malloc_r+0x28>
 800bf88:	230c      	movs	r3, #12
 800bf8a:	603b      	str	r3, [r7, #0]
 800bf8c:	2600      	movs	r6, #0
 800bf8e:	4630      	mov	r0, r6
 800bf90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c068 <_malloc_r+0xfc>
 800bf98:	f000 f928 	bl	800c1ec <__malloc_lock>
 800bf9c:	f8d8 3000 	ldr.w	r3, [r8]
 800bfa0:	461c      	mov	r4, r3
 800bfa2:	bb5c      	cbnz	r4, 800bffc <_malloc_r+0x90>
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	4638      	mov	r0, r7
 800bfa8:	f7ff ffc0 	bl	800bf2c <sbrk_aligned>
 800bfac:	1c43      	adds	r3, r0, #1
 800bfae:	4604      	mov	r4, r0
 800bfb0:	d155      	bne.n	800c05e <_malloc_r+0xf2>
 800bfb2:	f8d8 4000 	ldr.w	r4, [r8]
 800bfb6:	4626      	mov	r6, r4
 800bfb8:	2e00      	cmp	r6, #0
 800bfba:	d145      	bne.n	800c048 <_malloc_r+0xdc>
 800bfbc:	2c00      	cmp	r4, #0
 800bfbe:	d048      	beq.n	800c052 <_malloc_r+0xe6>
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	4638      	mov	r0, r7
 800bfc6:	eb04 0903 	add.w	r9, r4, r3
 800bfca:	f000 fe4d 	bl	800cc68 <_sbrk_r>
 800bfce:	4581      	cmp	r9, r0
 800bfd0:	d13f      	bne.n	800c052 <_malloc_r+0xe6>
 800bfd2:	6821      	ldr	r1, [r4, #0]
 800bfd4:	1a6d      	subs	r5, r5, r1
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	4638      	mov	r0, r7
 800bfda:	f7ff ffa7 	bl	800bf2c <sbrk_aligned>
 800bfde:	3001      	adds	r0, #1
 800bfe0:	d037      	beq.n	800c052 <_malloc_r+0xe6>
 800bfe2:	6823      	ldr	r3, [r4, #0]
 800bfe4:	442b      	add	r3, r5
 800bfe6:	6023      	str	r3, [r4, #0]
 800bfe8:	f8d8 3000 	ldr.w	r3, [r8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d038      	beq.n	800c062 <_malloc_r+0xf6>
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	42a2      	cmp	r2, r4
 800bff4:	d12b      	bne.n	800c04e <_malloc_r+0xe2>
 800bff6:	2200      	movs	r2, #0
 800bff8:	605a      	str	r2, [r3, #4]
 800bffa:	e00f      	b.n	800c01c <_malloc_r+0xb0>
 800bffc:	6822      	ldr	r2, [r4, #0]
 800bffe:	1b52      	subs	r2, r2, r5
 800c000:	d41f      	bmi.n	800c042 <_malloc_r+0xd6>
 800c002:	2a0b      	cmp	r2, #11
 800c004:	d917      	bls.n	800c036 <_malloc_r+0xca>
 800c006:	1961      	adds	r1, r4, r5
 800c008:	42a3      	cmp	r3, r4
 800c00a:	6025      	str	r5, [r4, #0]
 800c00c:	bf18      	it	ne
 800c00e:	6059      	strne	r1, [r3, #4]
 800c010:	6863      	ldr	r3, [r4, #4]
 800c012:	bf08      	it	eq
 800c014:	f8c8 1000 	streq.w	r1, [r8]
 800c018:	5162      	str	r2, [r4, r5]
 800c01a:	604b      	str	r3, [r1, #4]
 800c01c:	4638      	mov	r0, r7
 800c01e:	f104 060b 	add.w	r6, r4, #11
 800c022:	f000 f8e9 	bl	800c1f8 <__malloc_unlock>
 800c026:	f026 0607 	bic.w	r6, r6, #7
 800c02a:	1d23      	adds	r3, r4, #4
 800c02c:	1af2      	subs	r2, r6, r3
 800c02e:	d0ae      	beq.n	800bf8e <_malloc_r+0x22>
 800c030:	1b9b      	subs	r3, r3, r6
 800c032:	50a3      	str	r3, [r4, r2]
 800c034:	e7ab      	b.n	800bf8e <_malloc_r+0x22>
 800c036:	42a3      	cmp	r3, r4
 800c038:	6862      	ldr	r2, [r4, #4]
 800c03a:	d1dd      	bne.n	800bff8 <_malloc_r+0x8c>
 800c03c:	f8c8 2000 	str.w	r2, [r8]
 800c040:	e7ec      	b.n	800c01c <_malloc_r+0xb0>
 800c042:	4623      	mov	r3, r4
 800c044:	6864      	ldr	r4, [r4, #4]
 800c046:	e7ac      	b.n	800bfa2 <_malloc_r+0x36>
 800c048:	4634      	mov	r4, r6
 800c04a:	6876      	ldr	r6, [r6, #4]
 800c04c:	e7b4      	b.n	800bfb8 <_malloc_r+0x4c>
 800c04e:	4613      	mov	r3, r2
 800c050:	e7cc      	b.n	800bfec <_malloc_r+0x80>
 800c052:	230c      	movs	r3, #12
 800c054:	603b      	str	r3, [r7, #0]
 800c056:	4638      	mov	r0, r7
 800c058:	f000 f8ce 	bl	800c1f8 <__malloc_unlock>
 800c05c:	e797      	b.n	800bf8e <_malloc_r+0x22>
 800c05e:	6025      	str	r5, [r4, #0]
 800c060:	e7dc      	b.n	800c01c <_malloc_r+0xb0>
 800c062:	605b      	str	r3, [r3, #4]
 800c064:	deff      	udf	#255	; 0xff
 800c066:	bf00      	nop
 800c068:	20000758 	.word	0x20000758

0800c06c <__ascii_mbtowc>:
 800c06c:	b082      	sub	sp, #8
 800c06e:	b901      	cbnz	r1, 800c072 <__ascii_mbtowc+0x6>
 800c070:	a901      	add	r1, sp, #4
 800c072:	b142      	cbz	r2, 800c086 <__ascii_mbtowc+0x1a>
 800c074:	b14b      	cbz	r3, 800c08a <__ascii_mbtowc+0x1e>
 800c076:	7813      	ldrb	r3, [r2, #0]
 800c078:	600b      	str	r3, [r1, #0]
 800c07a:	7812      	ldrb	r2, [r2, #0]
 800c07c:	1e10      	subs	r0, r2, #0
 800c07e:	bf18      	it	ne
 800c080:	2001      	movne	r0, #1
 800c082:	b002      	add	sp, #8
 800c084:	4770      	bx	lr
 800c086:	4610      	mov	r0, r2
 800c088:	e7fb      	b.n	800c082 <__ascii_mbtowc+0x16>
 800c08a:	f06f 0001 	mvn.w	r0, #1
 800c08e:	e7f8      	b.n	800c082 <__ascii_mbtowc+0x16>

0800c090 <__sflush_r>:
 800c090:	898a      	ldrh	r2, [r1, #12]
 800c092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c096:	4605      	mov	r5, r0
 800c098:	0710      	lsls	r0, r2, #28
 800c09a:	460c      	mov	r4, r1
 800c09c:	d458      	bmi.n	800c150 <__sflush_r+0xc0>
 800c09e:	684b      	ldr	r3, [r1, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	dc05      	bgt.n	800c0b0 <__sflush_r+0x20>
 800c0a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	dc02      	bgt.n	800c0b0 <__sflush_r+0x20>
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0b2:	2e00      	cmp	r6, #0
 800c0b4:	d0f9      	beq.n	800c0aa <__sflush_r+0x1a>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0bc:	682f      	ldr	r7, [r5, #0]
 800c0be:	6a21      	ldr	r1, [r4, #32]
 800c0c0:	602b      	str	r3, [r5, #0]
 800c0c2:	d032      	beq.n	800c12a <__sflush_r+0x9a>
 800c0c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0c6:	89a3      	ldrh	r3, [r4, #12]
 800c0c8:	075a      	lsls	r2, r3, #29
 800c0ca:	d505      	bpl.n	800c0d8 <__sflush_r+0x48>
 800c0cc:	6863      	ldr	r3, [r4, #4]
 800c0ce:	1ac0      	subs	r0, r0, r3
 800c0d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0d2:	b10b      	cbz	r3, 800c0d8 <__sflush_r+0x48>
 800c0d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0d6:	1ac0      	subs	r0, r0, r3
 800c0d8:	2300      	movs	r3, #0
 800c0da:	4602      	mov	r2, r0
 800c0dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0de:	6a21      	ldr	r1, [r4, #32]
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	47b0      	blx	r6
 800c0e4:	1c43      	adds	r3, r0, #1
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	d106      	bne.n	800c0f8 <__sflush_r+0x68>
 800c0ea:	6829      	ldr	r1, [r5, #0]
 800c0ec:	291d      	cmp	r1, #29
 800c0ee:	d82b      	bhi.n	800c148 <__sflush_r+0xb8>
 800c0f0:	4a29      	ldr	r2, [pc, #164]	; (800c198 <__sflush_r+0x108>)
 800c0f2:	410a      	asrs	r2, r1
 800c0f4:	07d6      	lsls	r6, r2, #31
 800c0f6:	d427      	bmi.n	800c148 <__sflush_r+0xb8>
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	6062      	str	r2, [r4, #4]
 800c0fc:	04d9      	lsls	r1, r3, #19
 800c0fe:	6922      	ldr	r2, [r4, #16]
 800c100:	6022      	str	r2, [r4, #0]
 800c102:	d504      	bpl.n	800c10e <__sflush_r+0x7e>
 800c104:	1c42      	adds	r2, r0, #1
 800c106:	d101      	bne.n	800c10c <__sflush_r+0x7c>
 800c108:	682b      	ldr	r3, [r5, #0]
 800c10a:	b903      	cbnz	r3, 800c10e <__sflush_r+0x7e>
 800c10c:	6560      	str	r0, [r4, #84]	; 0x54
 800c10e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c110:	602f      	str	r7, [r5, #0]
 800c112:	2900      	cmp	r1, #0
 800c114:	d0c9      	beq.n	800c0aa <__sflush_r+0x1a>
 800c116:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c11a:	4299      	cmp	r1, r3
 800c11c:	d002      	beq.n	800c124 <__sflush_r+0x94>
 800c11e:	4628      	mov	r0, r5
 800c120:	f000 fdf8 	bl	800cd14 <_free_r>
 800c124:	2000      	movs	r0, #0
 800c126:	6360      	str	r0, [r4, #52]	; 0x34
 800c128:	e7c0      	b.n	800c0ac <__sflush_r+0x1c>
 800c12a:	2301      	movs	r3, #1
 800c12c:	4628      	mov	r0, r5
 800c12e:	47b0      	blx	r6
 800c130:	1c41      	adds	r1, r0, #1
 800c132:	d1c8      	bne.n	800c0c6 <__sflush_r+0x36>
 800c134:	682b      	ldr	r3, [r5, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0c5      	beq.n	800c0c6 <__sflush_r+0x36>
 800c13a:	2b1d      	cmp	r3, #29
 800c13c:	d001      	beq.n	800c142 <__sflush_r+0xb2>
 800c13e:	2b16      	cmp	r3, #22
 800c140:	d101      	bne.n	800c146 <__sflush_r+0xb6>
 800c142:	602f      	str	r7, [r5, #0]
 800c144:	e7b1      	b.n	800c0aa <__sflush_r+0x1a>
 800c146:	89a3      	ldrh	r3, [r4, #12]
 800c148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c14c:	81a3      	strh	r3, [r4, #12]
 800c14e:	e7ad      	b.n	800c0ac <__sflush_r+0x1c>
 800c150:	690f      	ldr	r7, [r1, #16]
 800c152:	2f00      	cmp	r7, #0
 800c154:	d0a9      	beq.n	800c0aa <__sflush_r+0x1a>
 800c156:	0793      	lsls	r3, r2, #30
 800c158:	680e      	ldr	r6, [r1, #0]
 800c15a:	bf08      	it	eq
 800c15c:	694b      	ldreq	r3, [r1, #20]
 800c15e:	600f      	str	r7, [r1, #0]
 800c160:	bf18      	it	ne
 800c162:	2300      	movne	r3, #0
 800c164:	eba6 0807 	sub.w	r8, r6, r7
 800c168:	608b      	str	r3, [r1, #8]
 800c16a:	f1b8 0f00 	cmp.w	r8, #0
 800c16e:	dd9c      	ble.n	800c0aa <__sflush_r+0x1a>
 800c170:	6a21      	ldr	r1, [r4, #32]
 800c172:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c174:	4643      	mov	r3, r8
 800c176:	463a      	mov	r2, r7
 800c178:	4628      	mov	r0, r5
 800c17a:	47b0      	blx	r6
 800c17c:	2800      	cmp	r0, #0
 800c17e:	dc06      	bgt.n	800c18e <__sflush_r+0xfe>
 800c180:	89a3      	ldrh	r3, [r4, #12]
 800c182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c186:	81a3      	strh	r3, [r4, #12]
 800c188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c18c:	e78e      	b.n	800c0ac <__sflush_r+0x1c>
 800c18e:	4407      	add	r7, r0
 800c190:	eba8 0800 	sub.w	r8, r8, r0
 800c194:	e7e9      	b.n	800c16a <__sflush_r+0xda>
 800c196:	bf00      	nop
 800c198:	dfbffffe 	.word	0xdfbffffe

0800c19c <_fflush_r>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	690b      	ldr	r3, [r1, #16]
 800c1a0:	4605      	mov	r5, r0
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	b913      	cbnz	r3, 800c1ac <_fflush_r+0x10>
 800c1a6:	2500      	movs	r5, #0
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	b118      	cbz	r0, 800c1b6 <_fflush_r+0x1a>
 800c1ae:	6a03      	ldr	r3, [r0, #32]
 800c1b0:	b90b      	cbnz	r3, 800c1b6 <_fflush_r+0x1a>
 800c1b2:	f7fe fc55 	bl	800aa60 <__sinit>
 800c1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d0f3      	beq.n	800c1a6 <_fflush_r+0xa>
 800c1be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1c0:	07d0      	lsls	r0, r2, #31
 800c1c2:	d404      	bmi.n	800c1ce <_fflush_r+0x32>
 800c1c4:	0599      	lsls	r1, r3, #22
 800c1c6:	d402      	bmi.n	800c1ce <_fflush_r+0x32>
 800c1c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1ca:	f7ff fb36 	bl	800b83a <__retarget_lock_acquire_recursive>
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	f7ff ff5d 	bl	800c090 <__sflush_r>
 800c1d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1d8:	07da      	lsls	r2, r3, #31
 800c1da:	4605      	mov	r5, r0
 800c1dc:	d4e4      	bmi.n	800c1a8 <_fflush_r+0xc>
 800c1de:	89a3      	ldrh	r3, [r4, #12]
 800c1e0:	059b      	lsls	r3, r3, #22
 800c1e2:	d4e1      	bmi.n	800c1a8 <_fflush_r+0xc>
 800c1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1e6:	f7ff fb29 	bl	800b83c <__retarget_lock_release_recursive>
 800c1ea:	e7dd      	b.n	800c1a8 <_fflush_r+0xc>

0800c1ec <__malloc_lock>:
 800c1ec:	4801      	ldr	r0, [pc, #4]	; (800c1f4 <__malloc_lock+0x8>)
 800c1ee:	f7ff bb24 	b.w	800b83a <__retarget_lock_acquire_recursive>
 800c1f2:	bf00      	nop
 800c1f4:	20000754 	.word	0x20000754

0800c1f8 <__malloc_unlock>:
 800c1f8:	4801      	ldr	r0, [pc, #4]	; (800c200 <__malloc_unlock+0x8>)
 800c1fa:	f7ff bb1f 	b.w	800b83c <__retarget_lock_release_recursive>
 800c1fe:	bf00      	nop
 800c200:	20000754 	.word	0x20000754

0800c204 <_Balloc>:
 800c204:	b570      	push	{r4, r5, r6, lr}
 800c206:	69c6      	ldr	r6, [r0, #28]
 800c208:	4604      	mov	r4, r0
 800c20a:	460d      	mov	r5, r1
 800c20c:	b976      	cbnz	r6, 800c22c <_Balloc+0x28>
 800c20e:	2010      	movs	r0, #16
 800c210:	f000 fdcc 	bl	800cdac <malloc>
 800c214:	4602      	mov	r2, r0
 800c216:	61e0      	str	r0, [r4, #28]
 800c218:	b920      	cbnz	r0, 800c224 <_Balloc+0x20>
 800c21a:	4b18      	ldr	r3, [pc, #96]	; (800c27c <_Balloc+0x78>)
 800c21c:	4818      	ldr	r0, [pc, #96]	; (800c280 <_Balloc+0x7c>)
 800c21e:	216b      	movs	r1, #107	; 0x6b
 800c220:	f000 fd44 	bl	800ccac <__assert_func>
 800c224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c228:	6006      	str	r6, [r0, #0]
 800c22a:	60c6      	str	r6, [r0, #12]
 800c22c:	69e6      	ldr	r6, [r4, #28]
 800c22e:	68f3      	ldr	r3, [r6, #12]
 800c230:	b183      	cbz	r3, 800c254 <_Balloc+0x50>
 800c232:	69e3      	ldr	r3, [r4, #28]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c23a:	b9b8      	cbnz	r0, 800c26c <_Balloc+0x68>
 800c23c:	2101      	movs	r1, #1
 800c23e:	fa01 f605 	lsl.w	r6, r1, r5
 800c242:	1d72      	adds	r2, r6, #5
 800c244:	0092      	lsls	r2, r2, #2
 800c246:	4620      	mov	r0, r4
 800c248:	f000 fd4e 	bl	800cce8 <_calloc_r>
 800c24c:	b160      	cbz	r0, 800c268 <_Balloc+0x64>
 800c24e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c252:	e00e      	b.n	800c272 <_Balloc+0x6e>
 800c254:	2221      	movs	r2, #33	; 0x21
 800c256:	2104      	movs	r1, #4
 800c258:	4620      	mov	r0, r4
 800c25a:	f000 fd45 	bl	800cce8 <_calloc_r>
 800c25e:	69e3      	ldr	r3, [r4, #28]
 800c260:	60f0      	str	r0, [r6, #12]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1e4      	bne.n	800c232 <_Balloc+0x2e>
 800c268:	2000      	movs	r0, #0
 800c26a:	bd70      	pop	{r4, r5, r6, pc}
 800c26c:	6802      	ldr	r2, [r0, #0]
 800c26e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c272:	2300      	movs	r3, #0
 800c274:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c278:	e7f7      	b.n	800c26a <_Balloc+0x66>
 800c27a:	bf00      	nop
 800c27c:	0800e682 	.word	0x0800e682
 800c280:	0800e699 	.word	0x0800e699

0800c284 <_Bfree>:
 800c284:	b570      	push	{r4, r5, r6, lr}
 800c286:	69c6      	ldr	r6, [r0, #28]
 800c288:	4605      	mov	r5, r0
 800c28a:	460c      	mov	r4, r1
 800c28c:	b976      	cbnz	r6, 800c2ac <_Bfree+0x28>
 800c28e:	2010      	movs	r0, #16
 800c290:	f000 fd8c 	bl	800cdac <malloc>
 800c294:	4602      	mov	r2, r0
 800c296:	61e8      	str	r0, [r5, #28]
 800c298:	b920      	cbnz	r0, 800c2a4 <_Bfree+0x20>
 800c29a:	4b09      	ldr	r3, [pc, #36]	; (800c2c0 <_Bfree+0x3c>)
 800c29c:	4809      	ldr	r0, [pc, #36]	; (800c2c4 <_Bfree+0x40>)
 800c29e:	218f      	movs	r1, #143	; 0x8f
 800c2a0:	f000 fd04 	bl	800ccac <__assert_func>
 800c2a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2a8:	6006      	str	r6, [r0, #0]
 800c2aa:	60c6      	str	r6, [r0, #12]
 800c2ac:	b13c      	cbz	r4, 800c2be <_Bfree+0x3a>
 800c2ae:	69eb      	ldr	r3, [r5, #28]
 800c2b0:	6862      	ldr	r2, [r4, #4]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2b8:	6021      	str	r1, [r4, #0]
 800c2ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2be:	bd70      	pop	{r4, r5, r6, pc}
 800c2c0:	0800e682 	.word	0x0800e682
 800c2c4:	0800e699 	.word	0x0800e699

0800c2c8 <__multadd>:
 800c2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2cc:	690d      	ldr	r5, [r1, #16]
 800c2ce:	4607      	mov	r7, r0
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	461e      	mov	r6, r3
 800c2d4:	f101 0c14 	add.w	ip, r1, #20
 800c2d8:	2000      	movs	r0, #0
 800c2da:	f8dc 3000 	ldr.w	r3, [ip]
 800c2de:	b299      	uxth	r1, r3
 800c2e0:	fb02 6101 	mla	r1, r2, r1, r6
 800c2e4:	0c1e      	lsrs	r6, r3, #16
 800c2e6:	0c0b      	lsrs	r3, r1, #16
 800c2e8:	fb02 3306 	mla	r3, r2, r6, r3
 800c2ec:	b289      	uxth	r1, r1
 800c2ee:	3001      	adds	r0, #1
 800c2f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2f4:	4285      	cmp	r5, r0
 800c2f6:	f84c 1b04 	str.w	r1, [ip], #4
 800c2fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2fe:	dcec      	bgt.n	800c2da <__multadd+0x12>
 800c300:	b30e      	cbz	r6, 800c346 <__multadd+0x7e>
 800c302:	68a3      	ldr	r3, [r4, #8]
 800c304:	42ab      	cmp	r3, r5
 800c306:	dc19      	bgt.n	800c33c <__multadd+0x74>
 800c308:	6861      	ldr	r1, [r4, #4]
 800c30a:	4638      	mov	r0, r7
 800c30c:	3101      	adds	r1, #1
 800c30e:	f7ff ff79 	bl	800c204 <_Balloc>
 800c312:	4680      	mov	r8, r0
 800c314:	b928      	cbnz	r0, 800c322 <__multadd+0x5a>
 800c316:	4602      	mov	r2, r0
 800c318:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <__multadd+0x84>)
 800c31a:	480d      	ldr	r0, [pc, #52]	; (800c350 <__multadd+0x88>)
 800c31c:	21ba      	movs	r1, #186	; 0xba
 800c31e:	f000 fcc5 	bl	800ccac <__assert_func>
 800c322:	6922      	ldr	r2, [r4, #16]
 800c324:	3202      	adds	r2, #2
 800c326:	f104 010c 	add.w	r1, r4, #12
 800c32a:	0092      	lsls	r2, r2, #2
 800c32c:	300c      	adds	r0, #12
 800c32e:	f7ff fa86 	bl	800b83e <memcpy>
 800c332:	4621      	mov	r1, r4
 800c334:	4638      	mov	r0, r7
 800c336:	f7ff ffa5 	bl	800c284 <_Bfree>
 800c33a:	4644      	mov	r4, r8
 800c33c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c340:	3501      	adds	r5, #1
 800c342:	615e      	str	r6, [r3, #20]
 800c344:	6125      	str	r5, [r4, #16]
 800c346:	4620      	mov	r0, r4
 800c348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c34c:	0800e611 	.word	0x0800e611
 800c350:	0800e699 	.word	0x0800e699

0800c354 <__s2b>:
 800c354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c358:	460c      	mov	r4, r1
 800c35a:	4615      	mov	r5, r2
 800c35c:	461f      	mov	r7, r3
 800c35e:	2209      	movs	r2, #9
 800c360:	3308      	adds	r3, #8
 800c362:	4606      	mov	r6, r0
 800c364:	fb93 f3f2 	sdiv	r3, r3, r2
 800c368:	2100      	movs	r1, #0
 800c36a:	2201      	movs	r2, #1
 800c36c:	429a      	cmp	r2, r3
 800c36e:	db09      	blt.n	800c384 <__s2b+0x30>
 800c370:	4630      	mov	r0, r6
 800c372:	f7ff ff47 	bl	800c204 <_Balloc>
 800c376:	b940      	cbnz	r0, 800c38a <__s2b+0x36>
 800c378:	4602      	mov	r2, r0
 800c37a:	4b19      	ldr	r3, [pc, #100]	; (800c3e0 <__s2b+0x8c>)
 800c37c:	4819      	ldr	r0, [pc, #100]	; (800c3e4 <__s2b+0x90>)
 800c37e:	21d3      	movs	r1, #211	; 0xd3
 800c380:	f000 fc94 	bl	800ccac <__assert_func>
 800c384:	0052      	lsls	r2, r2, #1
 800c386:	3101      	adds	r1, #1
 800c388:	e7f0      	b.n	800c36c <__s2b+0x18>
 800c38a:	9b08      	ldr	r3, [sp, #32]
 800c38c:	6143      	str	r3, [r0, #20]
 800c38e:	2d09      	cmp	r5, #9
 800c390:	f04f 0301 	mov.w	r3, #1
 800c394:	6103      	str	r3, [r0, #16]
 800c396:	dd16      	ble.n	800c3c6 <__s2b+0x72>
 800c398:	f104 0909 	add.w	r9, r4, #9
 800c39c:	46c8      	mov	r8, r9
 800c39e:	442c      	add	r4, r5
 800c3a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c3a4:	4601      	mov	r1, r0
 800c3a6:	3b30      	subs	r3, #48	; 0x30
 800c3a8:	220a      	movs	r2, #10
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	f7ff ff8c 	bl	800c2c8 <__multadd>
 800c3b0:	45a0      	cmp	r8, r4
 800c3b2:	d1f5      	bne.n	800c3a0 <__s2b+0x4c>
 800c3b4:	f1a5 0408 	sub.w	r4, r5, #8
 800c3b8:	444c      	add	r4, r9
 800c3ba:	1b2d      	subs	r5, r5, r4
 800c3bc:	1963      	adds	r3, r4, r5
 800c3be:	42bb      	cmp	r3, r7
 800c3c0:	db04      	blt.n	800c3cc <__s2b+0x78>
 800c3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3c6:	340a      	adds	r4, #10
 800c3c8:	2509      	movs	r5, #9
 800c3ca:	e7f6      	b.n	800c3ba <__s2b+0x66>
 800c3cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c3d0:	4601      	mov	r1, r0
 800c3d2:	3b30      	subs	r3, #48	; 0x30
 800c3d4:	220a      	movs	r2, #10
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	f7ff ff76 	bl	800c2c8 <__multadd>
 800c3dc:	e7ee      	b.n	800c3bc <__s2b+0x68>
 800c3de:	bf00      	nop
 800c3e0:	0800e611 	.word	0x0800e611
 800c3e4:	0800e699 	.word	0x0800e699

0800c3e8 <__hi0bits>:
 800c3e8:	0c03      	lsrs	r3, r0, #16
 800c3ea:	041b      	lsls	r3, r3, #16
 800c3ec:	b9d3      	cbnz	r3, 800c424 <__hi0bits+0x3c>
 800c3ee:	0400      	lsls	r0, r0, #16
 800c3f0:	2310      	movs	r3, #16
 800c3f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3f6:	bf04      	itt	eq
 800c3f8:	0200      	lsleq	r0, r0, #8
 800c3fa:	3308      	addeq	r3, #8
 800c3fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c400:	bf04      	itt	eq
 800c402:	0100      	lsleq	r0, r0, #4
 800c404:	3304      	addeq	r3, #4
 800c406:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c40a:	bf04      	itt	eq
 800c40c:	0080      	lsleq	r0, r0, #2
 800c40e:	3302      	addeq	r3, #2
 800c410:	2800      	cmp	r0, #0
 800c412:	db05      	blt.n	800c420 <__hi0bits+0x38>
 800c414:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c418:	f103 0301 	add.w	r3, r3, #1
 800c41c:	bf08      	it	eq
 800c41e:	2320      	moveq	r3, #32
 800c420:	4618      	mov	r0, r3
 800c422:	4770      	bx	lr
 800c424:	2300      	movs	r3, #0
 800c426:	e7e4      	b.n	800c3f2 <__hi0bits+0xa>

0800c428 <__lo0bits>:
 800c428:	6803      	ldr	r3, [r0, #0]
 800c42a:	f013 0207 	ands.w	r2, r3, #7
 800c42e:	d00c      	beq.n	800c44a <__lo0bits+0x22>
 800c430:	07d9      	lsls	r1, r3, #31
 800c432:	d422      	bmi.n	800c47a <__lo0bits+0x52>
 800c434:	079a      	lsls	r2, r3, #30
 800c436:	bf49      	itett	mi
 800c438:	085b      	lsrmi	r3, r3, #1
 800c43a:	089b      	lsrpl	r3, r3, #2
 800c43c:	6003      	strmi	r3, [r0, #0]
 800c43e:	2201      	movmi	r2, #1
 800c440:	bf5c      	itt	pl
 800c442:	6003      	strpl	r3, [r0, #0]
 800c444:	2202      	movpl	r2, #2
 800c446:	4610      	mov	r0, r2
 800c448:	4770      	bx	lr
 800c44a:	b299      	uxth	r1, r3
 800c44c:	b909      	cbnz	r1, 800c452 <__lo0bits+0x2a>
 800c44e:	0c1b      	lsrs	r3, r3, #16
 800c450:	2210      	movs	r2, #16
 800c452:	b2d9      	uxtb	r1, r3
 800c454:	b909      	cbnz	r1, 800c45a <__lo0bits+0x32>
 800c456:	3208      	adds	r2, #8
 800c458:	0a1b      	lsrs	r3, r3, #8
 800c45a:	0719      	lsls	r1, r3, #28
 800c45c:	bf04      	itt	eq
 800c45e:	091b      	lsreq	r3, r3, #4
 800c460:	3204      	addeq	r2, #4
 800c462:	0799      	lsls	r1, r3, #30
 800c464:	bf04      	itt	eq
 800c466:	089b      	lsreq	r3, r3, #2
 800c468:	3202      	addeq	r2, #2
 800c46a:	07d9      	lsls	r1, r3, #31
 800c46c:	d403      	bmi.n	800c476 <__lo0bits+0x4e>
 800c46e:	085b      	lsrs	r3, r3, #1
 800c470:	f102 0201 	add.w	r2, r2, #1
 800c474:	d003      	beq.n	800c47e <__lo0bits+0x56>
 800c476:	6003      	str	r3, [r0, #0]
 800c478:	e7e5      	b.n	800c446 <__lo0bits+0x1e>
 800c47a:	2200      	movs	r2, #0
 800c47c:	e7e3      	b.n	800c446 <__lo0bits+0x1e>
 800c47e:	2220      	movs	r2, #32
 800c480:	e7e1      	b.n	800c446 <__lo0bits+0x1e>
	...

0800c484 <__i2b>:
 800c484:	b510      	push	{r4, lr}
 800c486:	460c      	mov	r4, r1
 800c488:	2101      	movs	r1, #1
 800c48a:	f7ff febb 	bl	800c204 <_Balloc>
 800c48e:	4602      	mov	r2, r0
 800c490:	b928      	cbnz	r0, 800c49e <__i2b+0x1a>
 800c492:	4b05      	ldr	r3, [pc, #20]	; (800c4a8 <__i2b+0x24>)
 800c494:	4805      	ldr	r0, [pc, #20]	; (800c4ac <__i2b+0x28>)
 800c496:	f240 1145 	movw	r1, #325	; 0x145
 800c49a:	f000 fc07 	bl	800ccac <__assert_func>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	6144      	str	r4, [r0, #20]
 800c4a2:	6103      	str	r3, [r0, #16]
 800c4a4:	bd10      	pop	{r4, pc}
 800c4a6:	bf00      	nop
 800c4a8:	0800e611 	.word	0x0800e611
 800c4ac:	0800e699 	.word	0x0800e699

0800c4b0 <__multiply>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	4691      	mov	r9, r2
 800c4b6:	690a      	ldr	r2, [r1, #16]
 800c4b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	bfb8      	it	lt
 800c4c0:	460b      	movlt	r3, r1
 800c4c2:	460c      	mov	r4, r1
 800c4c4:	bfbc      	itt	lt
 800c4c6:	464c      	movlt	r4, r9
 800c4c8:	4699      	movlt	r9, r3
 800c4ca:	6927      	ldr	r7, [r4, #16]
 800c4cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4d0:	68a3      	ldr	r3, [r4, #8]
 800c4d2:	6861      	ldr	r1, [r4, #4]
 800c4d4:	eb07 060a 	add.w	r6, r7, sl
 800c4d8:	42b3      	cmp	r3, r6
 800c4da:	b085      	sub	sp, #20
 800c4dc:	bfb8      	it	lt
 800c4de:	3101      	addlt	r1, #1
 800c4e0:	f7ff fe90 	bl	800c204 <_Balloc>
 800c4e4:	b930      	cbnz	r0, 800c4f4 <__multiply+0x44>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	4b44      	ldr	r3, [pc, #272]	; (800c5fc <__multiply+0x14c>)
 800c4ea:	4845      	ldr	r0, [pc, #276]	; (800c600 <__multiply+0x150>)
 800c4ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c4f0:	f000 fbdc 	bl	800ccac <__assert_func>
 800c4f4:	f100 0514 	add.w	r5, r0, #20
 800c4f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4fc:	462b      	mov	r3, r5
 800c4fe:	2200      	movs	r2, #0
 800c500:	4543      	cmp	r3, r8
 800c502:	d321      	bcc.n	800c548 <__multiply+0x98>
 800c504:	f104 0314 	add.w	r3, r4, #20
 800c508:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c50c:	f109 0314 	add.w	r3, r9, #20
 800c510:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c514:	9202      	str	r2, [sp, #8]
 800c516:	1b3a      	subs	r2, r7, r4
 800c518:	3a15      	subs	r2, #21
 800c51a:	f022 0203 	bic.w	r2, r2, #3
 800c51e:	3204      	adds	r2, #4
 800c520:	f104 0115 	add.w	r1, r4, #21
 800c524:	428f      	cmp	r7, r1
 800c526:	bf38      	it	cc
 800c528:	2204      	movcc	r2, #4
 800c52a:	9201      	str	r2, [sp, #4]
 800c52c:	9a02      	ldr	r2, [sp, #8]
 800c52e:	9303      	str	r3, [sp, #12]
 800c530:	429a      	cmp	r2, r3
 800c532:	d80c      	bhi.n	800c54e <__multiply+0x9e>
 800c534:	2e00      	cmp	r6, #0
 800c536:	dd03      	ble.n	800c540 <__multiply+0x90>
 800c538:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d05b      	beq.n	800c5f8 <__multiply+0x148>
 800c540:	6106      	str	r6, [r0, #16]
 800c542:	b005      	add	sp, #20
 800c544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c548:	f843 2b04 	str.w	r2, [r3], #4
 800c54c:	e7d8      	b.n	800c500 <__multiply+0x50>
 800c54e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c552:	f1ba 0f00 	cmp.w	sl, #0
 800c556:	d024      	beq.n	800c5a2 <__multiply+0xf2>
 800c558:	f104 0e14 	add.w	lr, r4, #20
 800c55c:	46a9      	mov	r9, r5
 800c55e:	f04f 0c00 	mov.w	ip, #0
 800c562:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c566:	f8d9 1000 	ldr.w	r1, [r9]
 800c56a:	fa1f fb82 	uxth.w	fp, r2
 800c56e:	b289      	uxth	r1, r1
 800c570:	fb0a 110b 	mla	r1, sl, fp, r1
 800c574:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c578:	f8d9 2000 	ldr.w	r2, [r9]
 800c57c:	4461      	add	r1, ip
 800c57e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c582:	fb0a c20b 	mla	r2, sl, fp, ip
 800c586:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c58a:	b289      	uxth	r1, r1
 800c58c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c590:	4577      	cmp	r7, lr
 800c592:	f849 1b04 	str.w	r1, [r9], #4
 800c596:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c59a:	d8e2      	bhi.n	800c562 <__multiply+0xb2>
 800c59c:	9a01      	ldr	r2, [sp, #4]
 800c59e:	f845 c002 	str.w	ip, [r5, r2]
 800c5a2:	9a03      	ldr	r2, [sp, #12]
 800c5a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c5a8:	3304      	adds	r3, #4
 800c5aa:	f1b9 0f00 	cmp.w	r9, #0
 800c5ae:	d021      	beq.n	800c5f4 <__multiply+0x144>
 800c5b0:	6829      	ldr	r1, [r5, #0]
 800c5b2:	f104 0c14 	add.w	ip, r4, #20
 800c5b6:	46ae      	mov	lr, r5
 800c5b8:	f04f 0a00 	mov.w	sl, #0
 800c5bc:	f8bc b000 	ldrh.w	fp, [ip]
 800c5c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c5c4:	fb09 220b 	mla	r2, r9, fp, r2
 800c5c8:	4452      	add	r2, sl
 800c5ca:	b289      	uxth	r1, r1
 800c5cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c5d0:	f84e 1b04 	str.w	r1, [lr], #4
 800c5d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c5d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5dc:	f8be 1000 	ldrh.w	r1, [lr]
 800c5e0:	fb09 110a 	mla	r1, r9, sl, r1
 800c5e4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c5e8:	4567      	cmp	r7, ip
 800c5ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5ee:	d8e5      	bhi.n	800c5bc <__multiply+0x10c>
 800c5f0:	9a01      	ldr	r2, [sp, #4]
 800c5f2:	50a9      	str	r1, [r5, r2]
 800c5f4:	3504      	adds	r5, #4
 800c5f6:	e799      	b.n	800c52c <__multiply+0x7c>
 800c5f8:	3e01      	subs	r6, #1
 800c5fa:	e79b      	b.n	800c534 <__multiply+0x84>
 800c5fc:	0800e611 	.word	0x0800e611
 800c600:	0800e699 	.word	0x0800e699

0800c604 <__pow5mult>:
 800c604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c608:	4615      	mov	r5, r2
 800c60a:	f012 0203 	ands.w	r2, r2, #3
 800c60e:	4606      	mov	r6, r0
 800c610:	460f      	mov	r7, r1
 800c612:	d007      	beq.n	800c624 <__pow5mult+0x20>
 800c614:	4c25      	ldr	r4, [pc, #148]	; (800c6ac <__pow5mult+0xa8>)
 800c616:	3a01      	subs	r2, #1
 800c618:	2300      	movs	r3, #0
 800c61a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c61e:	f7ff fe53 	bl	800c2c8 <__multadd>
 800c622:	4607      	mov	r7, r0
 800c624:	10ad      	asrs	r5, r5, #2
 800c626:	d03d      	beq.n	800c6a4 <__pow5mult+0xa0>
 800c628:	69f4      	ldr	r4, [r6, #28]
 800c62a:	b97c      	cbnz	r4, 800c64c <__pow5mult+0x48>
 800c62c:	2010      	movs	r0, #16
 800c62e:	f000 fbbd 	bl	800cdac <malloc>
 800c632:	4602      	mov	r2, r0
 800c634:	61f0      	str	r0, [r6, #28]
 800c636:	b928      	cbnz	r0, 800c644 <__pow5mult+0x40>
 800c638:	4b1d      	ldr	r3, [pc, #116]	; (800c6b0 <__pow5mult+0xac>)
 800c63a:	481e      	ldr	r0, [pc, #120]	; (800c6b4 <__pow5mult+0xb0>)
 800c63c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c640:	f000 fb34 	bl	800ccac <__assert_func>
 800c644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c648:	6004      	str	r4, [r0, #0]
 800c64a:	60c4      	str	r4, [r0, #12]
 800c64c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c650:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c654:	b94c      	cbnz	r4, 800c66a <__pow5mult+0x66>
 800c656:	f240 2171 	movw	r1, #625	; 0x271
 800c65a:	4630      	mov	r0, r6
 800c65c:	f7ff ff12 	bl	800c484 <__i2b>
 800c660:	2300      	movs	r3, #0
 800c662:	f8c8 0008 	str.w	r0, [r8, #8]
 800c666:	4604      	mov	r4, r0
 800c668:	6003      	str	r3, [r0, #0]
 800c66a:	f04f 0900 	mov.w	r9, #0
 800c66e:	07eb      	lsls	r3, r5, #31
 800c670:	d50a      	bpl.n	800c688 <__pow5mult+0x84>
 800c672:	4639      	mov	r1, r7
 800c674:	4622      	mov	r2, r4
 800c676:	4630      	mov	r0, r6
 800c678:	f7ff ff1a 	bl	800c4b0 <__multiply>
 800c67c:	4639      	mov	r1, r7
 800c67e:	4680      	mov	r8, r0
 800c680:	4630      	mov	r0, r6
 800c682:	f7ff fdff 	bl	800c284 <_Bfree>
 800c686:	4647      	mov	r7, r8
 800c688:	106d      	asrs	r5, r5, #1
 800c68a:	d00b      	beq.n	800c6a4 <__pow5mult+0xa0>
 800c68c:	6820      	ldr	r0, [r4, #0]
 800c68e:	b938      	cbnz	r0, 800c6a0 <__pow5mult+0x9c>
 800c690:	4622      	mov	r2, r4
 800c692:	4621      	mov	r1, r4
 800c694:	4630      	mov	r0, r6
 800c696:	f7ff ff0b 	bl	800c4b0 <__multiply>
 800c69a:	6020      	str	r0, [r4, #0]
 800c69c:	f8c0 9000 	str.w	r9, [r0]
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	e7e4      	b.n	800c66e <__pow5mult+0x6a>
 800c6a4:	4638      	mov	r0, r7
 800c6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6aa:	bf00      	nop
 800c6ac:	0800e7e8 	.word	0x0800e7e8
 800c6b0:	0800e682 	.word	0x0800e682
 800c6b4:	0800e699 	.word	0x0800e699

0800c6b8 <__lshift>:
 800c6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6bc:	460c      	mov	r4, r1
 800c6be:	6849      	ldr	r1, [r1, #4]
 800c6c0:	6923      	ldr	r3, [r4, #16]
 800c6c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6c6:	68a3      	ldr	r3, [r4, #8]
 800c6c8:	4607      	mov	r7, r0
 800c6ca:	4691      	mov	r9, r2
 800c6cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6d0:	f108 0601 	add.w	r6, r8, #1
 800c6d4:	42b3      	cmp	r3, r6
 800c6d6:	db0b      	blt.n	800c6f0 <__lshift+0x38>
 800c6d8:	4638      	mov	r0, r7
 800c6da:	f7ff fd93 	bl	800c204 <_Balloc>
 800c6de:	4605      	mov	r5, r0
 800c6e0:	b948      	cbnz	r0, 800c6f6 <__lshift+0x3e>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	4b28      	ldr	r3, [pc, #160]	; (800c788 <__lshift+0xd0>)
 800c6e6:	4829      	ldr	r0, [pc, #164]	; (800c78c <__lshift+0xd4>)
 800c6e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c6ec:	f000 fade 	bl	800ccac <__assert_func>
 800c6f0:	3101      	adds	r1, #1
 800c6f2:	005b      	lsls	r3, r3, #1
 800c6f4:	e7ee      	b.n	800c6d4 <__lshift+0x1c>
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	f100 0114 	add.w	r1, r0, #20
 800c6fc:	f100 0210 	add.w	r2, r0, #16
 800c700:	4618      	mov	r0, r3
 800c702:	4553      	cmp	r3, sl
 800c704:	db33      	blt.n	800c76e <__lshift+0xb6>
 800c706:	6920      	ldr	r0, [r4, #16]
 800c708:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c70c:	f104 0314 	add.w	r3, r4, #20
 800c710:	f019 091f 	ands.w	r9, r9, #31
 800c714:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c718:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c71c:	d02b      	beq.n	800c776 <__lshift+0xbe>
 800c71e:	f1c9 0e20 	rsb	lr, r9, #32
 800c722:	468a      	mov	sl, r1
 800c724:	2200      	movs	r2, #0
 800c726:	6818      	ldr	r0, [r3, #0]
 800c728:	fa00 f009 	lsl.w	r0, r0, r9
 800c72c:	4310      	orrs	r0, r2
 800c72e:	f84a 0b04 	str.w	r0, [sl], #4
 800c732:	f853 2b04 	ldr.w	r2, [r3], #4
 800c736:	459c      	cmp	ip, r3
 800c738:	fa22 f20e 	lsr.w	r2, r2, lr
 800c73c:	d8f3      	bhi.n	800c726 <__lshift+0x6e>
 800c73e:	ebac 0304 	sub.w	r3, ip, r4
 800c742:	3b15      	subs	r3, #21
 800c744:	f023 0303 	bic.w	r3, r3, #3
 800c748:	3304      	adds	r3, #4
 800c74a:	f104 0015 	add.w	r0, r4, #21
 800c74e:	4584      	cmp	ip, r0
 800c750:	bf38      	it	cc
 800c752:	2304      	movcc	r3, #4
 800c754:	50ca      	str	r2, [r1, r3]
 800c756:	b10a      	cbz	r2, 800c75c <__lshift+0xa4>
 800c758:	f108 0602 	add.w	r6, r8, #2
 800c75c:	3e01      	subs	r6, #1
 800c75e:	4638      	mov	r0, r7
 800c760:	612e      	str	r6, [r5, #16]
 800c762:	4621      	mov	r1, r4
 800c764:	f7ff fd8e 	bl	800c284 <_Bfree>
 800c768:	4628      	mov	r0, r5
 800c76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c76e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c772:	3301      	adds	r3, #1
 800c774:	e7c5      	b.n	800c702 <__lshift+0x4a>
 800c776:	3904      	subs	r1, #4
 800c778:	f853 2b04 	ldr.w	r2, [r3], #4
 800c77c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c780:	459c      	cmp	ip, r3
 800c782:	d8f9      	bhi.n	800c778 <__lshift+0xc0>
 800c784:	e7ea      	b.n	800c75c <__lshift+0xa4>
 800c786:	bf00      	nop
 800c788:	0800e611 	.word	0x0800e611
 800c78c:	0800e699 	.word	0x0800e699

0800c790 <__mcmp>:
 800c790:	b530      	push	{r4, r5, lr}
 800c792:	6902      	ldr	r2, [r0, #16]
 800c794:	690c      	ldr	r4, [r1, #16]
 800c796:	1b12      	subs	r2, r2, r4
 800c798:	d10e      	bne.n	800c7b8 <__mcmp+0x28>
 800c79a:	f100 0314 	add.w	r3, r0, #20
 800c79e:	3114      	adds	r1, #20
 800c7a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c7a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c7a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c7ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c7b0:	42a5      	cmp	r5, r4
 800c7b2:	d003      	beq.n	800c7bc <__mcmp+0x2c>
 800c7b4:	d305      	bcc.n	800c7c2 <__mcmp+0x32>
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	bd30      	pop	{r4, r5, pc}
 800c7bc:	4283      	cmp	r3, r0
 800c7be:	d3f3      	bcc.n	800c7a8 <__mcmp+0x18>
 800c7c0:	e7fa      	b.n	800c7b8 <__mcmp+0x28>
 800c7c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7c6:	e7f7      	b.n	800c7b8 <__mcmp+0x28>

0800c7c8 <__mdiff>:
 800c7c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	460c      	mov	r4, r1
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	4690      	mov	r8, r2
 800c7d6:	f7ff ffdb 	bl	800c790 <__mcmp>
 800c7da:	1e05      	subs	r5, r0, #0
 800c7dc:	d110      	bne.n	800c800 <__mdiff+0x38>
 800c7de:	4629      	mov	r1, r5
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	f7ff fd0f 	bl	800c204 <_Balloc>
 800c7e6:	b930      	cbnz	r0, 800c7f6 <__mdiff+0x2e>
 800c7e8:	4b3a      	ldr	r3, [pc, #232]	; (800c8d4 <__mdiff+0x10c>)
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	f240 2137 	movw	r1, #567	; 0x237
 800c7f0:	4839      	ldr	r0, [pc, #228]	; (800c8d8 <__mdiff+0x110>)
 800c7f2:	f000 fa5b 	bl	800ccac <__assert_func>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c800:	bfa4      	itt	ge
 800c802:	4643      	movge	r3, r8
 800c804:	46a0      	movge	r8, r4
 800c806:	4630      	mov	r0, r6
 800c808:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c80c:	bfa6      	itte	ge
 800c80e:	461c      	movge	r4, r3
 800c810:	2500      	movge	r5, #0
 800c812:	2501      	movlt	r5, #1
 800c814:	f7ff fcf6 	bl	800c204 <_Balloc>
 800c818:	b920      	cbnz	r0, 800c824 <__mdiff+0x5c>
 800c81a:	4b2e      	ldr	r3, [pc, #184]	; (800c8d4 <__mdiff+0x10c>)
 800c81c:	4602      	mov	r2, r0
 800c81e:	f240 2145 	movw	r1, #581	; 0x245
 800c822:	e7e5      	b.n	800c7f0 <__mdiff+0x28>
 800c824:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c828:	6926      	ldr	r6, [r4, #16]
 800c82a:	60c5      	str	r5, [r0, #12]
 800c82c:	f104 0914 	add.w	r9, r4, #20
 800c830:	f108 0514 	add.w	r5, r8, #20
 800c834:	f100 0e14 	add.w	lr, r0, #20
 800c838:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c83c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c840:	f108 0210 	add.w	r2, r8, #16
 800c844:	46f2      	mov	sl, lr
 800c846:	2100      	movs	r1, #0
 800c848:	f859 3b04 	ldr.w	r3, [r9], #4
 800c84c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c850:	fa11 f88b 	uxtah	r8, r1, fp
 800c854:	b299      	uxth	r1, r3
 800c856:	0c1b      	lsrs	r3, r3, #16
 800c858:	eba8 0801 	sub.w	r8, r8, r1
 800c85c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c860:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c864:	fa1f f888 	uxth.w	r8, r8
 800c868:	1419      	asrs	r1, r3, #16
 800c86a:	454e      	cmp	r6, r9
 800c86c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c870:	f84a 3b04 	str.w	r3, [sl], #4
 800c874:	d8e8      	bhi.n	800c848 <__mdiff+0x80>
 800c876:	1b33      	subs	r3, r6, r4
 800c878:	3b15      	subs	r3, #21
 800c87a:	f023 0303 	bic.w	r3, r3, #3
 800c87e:	3304      	adds	r3, #4
 800c880:	3415      	adds	r4, #21
 800c882:	42a6      	cmp	r6, r4
 800c884:	bf38      	it	cc
 800c886:	2304      	movcc	r3, #4
 800c888:	441d      	add	r5, r3
 800c88a:	4473      	add	r3, lr
 800c88c:	469e      	mov	lr, r3
 800c88e:	462e      	mov	r6, r5
 800c890:	4566      	cmp	r6, ip
 800c892:	d30e      	bcc.n	800c8b2 <__mdiff+0xea>
 800c894:	f10c 0203 	add.w	r2, ip, #3
 800c898:	1b52      	subs	r2, r2, r5
 800c89a:	f022 0203 	bic.w	r2, r2, #3
 800c89e:	3d03      	subs	r5, #3
 800c8a0:	45ac      	cmp	ip, r5
 800c8a2:	bf38      	it	cc
 800c8a4:	2200      	movcc	r2, #0
 800c8a6:	4413      	add	r3, r2
 800c8a8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c8ac:	b17a      	cbz	r2, 800c8ce <__mdiff+0x106>
 800c8ae:	6107      	str	r7, [r0, #16]
 800c8b0:	e7a4      	b.n	800c7fc <__mdiff+0x34>
 800c8b2:	f856 8b04 	ldr.w	r8, [r6], #4
 800c8b6:	fa11 f288 	uxtah	r2, r1, r8
 800c8ba:	1414      	asrs	r4, r2, #16
 800c8bc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c8c0:	b292      	uxth	r2, r2
 800c8c2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c8c6:	f84e 2b04 	str.w	r2, [lr], #4
 800c8ca:	1421      	asrs	r1, r4, #16
 800c8cc:	e7e0      	b.n	800c890 <__mdiff+0xc8>
 800c8ce:	3f01      	subs	r7, #1
 800c8d0:	e7ea      	b.n	800c8a8 <__mdiff+0xe0>
 800c8d2:	bf00      	nop
 800c8d4:	0800e611 	.word	0x0800e611
 800c8d8:	0800e699 	.word	0x0800e699

0800c8dc <__ulp>:
 800c8dc:	b082      	sub	sp, #8
 800c8de:	ed8d 0b00 	vstr	d0, [sp]
 800c8e2:	9a01      	ldr	r2, [sp, #4]
 800c8e4:	4b0f      	ldr	r3, [pc, #60]	; (800c924 <__ulp+0x48>)
 800c8e6:	4013      	ands	r3, r2
 800c8e8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	dc08      	bgt.n	800c902 <__ulp+0x26>
 800c8f0:	425b      	negs	r3, r3
 800c8f2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c8f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c8fa:	da04      	bge.n	800c906 <__ulp+0x2a>
 800c8fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c900:	4113      	asrs	r3, r2
 800c902:	2200      	movs	r2, #0
 800c904:	e008      	b.n	800c918 <__ulp+0x3c>
 800c906:	f1a2 0314 	sub.w	r3, r2, #20
 800c90a:	2b1e      	cmp	r3, #30
 800c90c:	bfda      	itte	le
 800c90e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c912:	40da      	lsrle	r2, r3
 800c914:	2201      	movgt	r2, #1
 800c916:	2300      	movs	r3, #0
 800c918:	4619      	mov	r1, r3
 800c91a:	4610      	mov	r0, r2
 800c91c:	ec41 0b10 	vmov	d0, r0, r1
 800c920:	b002      	add	sp, #8
 800c922:	4770      	bx	lr
 800c924:	7ff00000 	.word	0x7ff00000

0800c928 <__b2d>:
 800c928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c92c:	6906      	ldr	r6, [r0, #16]
 800c92e:	f100 0814 	add.w	r8, r0, #20
 800c932:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c936:	1f37      	subs	r7, r6, #4
 800c938:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c93c:	4610      	mov	r0, r2
 800c93e:	f7ff fd53 	bl	800c3e8 <__hi0bits>
 800c942:	f1c0 0320 	rsb	r3, r0, #32
 800c946:	280a      	cmp	r0, #10
 800c948:	600b      	str	r3, [r1, #0]
 800c94a:	491b      	ldr	r1, [pc, #108]	; (800c9b8 <__b2d+0x90>)
 800c94c:	dc15      	bgt.n	800c97a <__b2d+0x52>
 800c94e:	f1c0 0c0b 	rsb	ip, r0, #11
 800c952:	fa22 f30c 	lsr.w	r3, r2, ip
 800c956:	45b8      	cmp	r8, r7
 800c958:	ea43 0501 	orr.w	r5, r3, r1
 800c95c:	bf34      	ite	cc
 800c95e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c962:	2300      	movcs	r3, #0
 800c964:	3015      	adds	r0, #21
 800c966:	fa02 f000 	lsl.w	r0, r2, r0
 800c96a:	fa23 f30c 	lsr.w	r3, r3, ip
 800c96e:	4303      	orrs	r3, r0
 800c970:	461c      	mov	r4, r3
 800c972:	ec45 4b10 	vmov	d0, r4, r5
 800c976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c97a:	45b8      	cmp	r8, r7
 800c97c:	bf3a      	itte	cc
 800c97e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c982:	f1a6 0708 	subcc.w	r7, r6, #8
 800c986:	2300      	movcs	r3, #0
 800c988:	380b      	subs	r0, #11
 800c98a:	d012      	beq.n	800c9b2 <__b2d+0x8a>
 800c98c:	f1c0 0120 	rsb	r1, r0, #32
 800c990:	fa23 f401 	lsr.w	r4, r3, r1
 800c994:	4082      	lsls	r2, r0
 800c996:	4322      	orrs	r2, r4
 800c998:	4547      	cmp	r7, r8
 800c99a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c99e:	bf8c      	ite	hi
 800c9a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c9a4:	2200      	movls	r2, #0
 800c9a6:	4083      	lsls	r3, r0
 800c9a8:	40ca      	lsrs	r2, r1
 800c9aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	e7de      	b.n	800c970 <__b2d+0x48>
 800c9b2:	ea42 0501 	orr.w	r5, r2, r1
 800c9b6:	e7db      	b.n	800c970 <__b2d+0x48>
 800c9b8:	3ff00000 	.word	0x3ff00000

0800c9bc <__d2b>:
 800c9bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9c0:	460f      	mov	r7, r1
 800c9c2:	2101      	movs	r1, #1
 800c9c4:	ec59 8b10 	vmov	r8, r9, d0
 800c9c8:	4616      	mov	r6, r2
 800c9ca:	f7ff fc1b 	bl	800c204 <_Balloc>
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	b930      	cbnz	r0, 800c9e0 <__d2b+0x24>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	4b24      	ldr	r3, [pc, #144]	; (800ca68 <__d2b+0xac>)
 800c9d6:	4825      	ldr	r0, [pc, #148]	; (800ca6c <__d2b+0xb0>)
 800c9d8:	f240 310f 	movw	r1, #783	; 0x30f
 800c9dc:	f000 f966 	bl	800ccac <__assert_func>
 800c9e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9e8:	bb2d      	cbnz	r5, 800ca36 <__d2b+0x7a>
 800c9ea:	9301      	str	r3, [sp, #4]
 800c9ec:	f1b8 0300 	subs.w	r3, r8, #0
 800c9f0:	d026      	beq.n	800ca40 <__d2b+0x84>
 800c9f2:	4668      	mov	r0, sp
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	f7ff fd17 	bl	800c428 <__lo0bits>
 800c9fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c9fe:	b1e8      	cbz	r0, 800ca3c <__d2b+0x80>
 800ca00:	f1c0 0320 	rsb	r3, r0, #32
 800ca04:	fa02 f303 	lsl.w	r3, r2, r3
 800ca08:	430b      	orrs	r3, r1
 800ca0a:	40c2      	lsrs	r2, r0
 800ca0c:	6163      	str	r3, [r4, #20]
 800ca0e:	9201      	str	r2, [sp, #4]
 800ca10:	9b01      	ldr	r3, [sp, #4]
 800ca12:	61a3      	str	r3, [r4, #24]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	bf14      	ite	ne
 800ca18:	2202      	movne	r2, #2
 800ca1a:	2201      	moveq	r2, #1
 800ca1c:	6122      	str	r2, [r4, #16]
 800ca1e:	b1bd      	cbz	r5, 800ca50 <__d2b+0x94>
 800ca20:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca24:	4405      	add	r5, r0
 800ca26:	603d      	str	r5, [r7, #0]
 800ca28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca2c:	6030      	str	r0, [r6, #0]
 800ca2e:	4620      	mov	r0, r4
 800ca30:	b003      	add	sp, #12
 800ca32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca3a:	e7d6      	b.n	800c9ea <__d2b+0x2e>
 800ca3c:	6161      	str	r1, [r4, #20]
 800ca3e:	e7e7      	b.n	800ca10 <__d2b+0x54>
 800ca40:	a801      	add	r0, sp, #4
 800ca42:	f7ff fcf1 	bl	800c428 <__lo0bits>
 800ca46:	9b01      	ldr	r3, [sp, #4]
 800ca48:	6163      	str	r3, [r4, #20]
 800ca4a:	3020      	adds	r0, #32
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	e7e5      	b.n	800ca1c <__d2b+0x60>
 800ca50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca58:	6038      	str	r0, [r7, #0]
 800ca5a:	6918      	ldr	r0, [r3, #16]
 800ca5c:	f7ff fcc4 	bl	800c3e8 <__hi0bits>
 800ca60:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca64:	e7e2      	b.n	800ca2c <__d2b+0x70>
 800ca66:	bf00      	nop
 800ca68:	0800e611 	.word	0x0800e611
 800ca6c:	0800e699 	.word	0x0800e699

0800ca70 <__ratio>:
 800ca70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca74:	4688      	mov	r8, r1
 800ca76:	4669      	mov	r1, sp
 800ca78:	4681      	mov	r9, r0
 800ca7a:	f7ff ff55 	bl	800c928 <__b2d>
 800ca7e:	a901      	add	r1, sp, #4
 800ca80:	4640      	mov	r0, r8
 800ca82:	ec55 4b10 	vmov	r4, r5, d0
 800ca86:	f7ff ff4f 	bl	800c928 <__b2d>
 800ca8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ca92:	eba3 0c02 	sub.w	ip, r3, r2
 800ca96:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ca9a:	1a9b      	subs	r3, r3, r2
 800ca9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800caa0:	ec51 0b10 	vmov	r0, r1, d0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	bfd6      	itet	le
 800caa8:	460a      	movle	r2, r1
 800caaa:	462a      	movgt	r2, r5
 800caac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cab0:	468b      	mov	fp, r1
 800cab2:	462f      	mov	r7, r5
 800cab4:	bfd4      	ite	le
 800cab6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800caba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cabe:	4620      	mov	r0, r4
 800cac0:	ee10 2a10 	vmov	r2, s0
 800cac4:	465b      	mov	r3, fp
 800cac6:	4639      	mov	r1, r7
 800cac8:	f7f3 fec8 	bl	800085c <__aeabi_ddiv>
 800cacc:	ec41 0b10 	vmov	d0, r0, r1
 800cad0:	b003      	add	sp, #12
 800cad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cad6 <__copybits>:
 800cad6:	3901      	subs	r1, #1
 800cad8:	b570      	push	{r4, r5, r6, lr}
 800cada:	1149      	asrs	r1, r1, #5
 800cadc:	6914      	ldr	r4, [r2, #16]
 800cade:	3101      	adds	r1, #1
 800cae0:	f102 0314 	add.w	r3, r2, #20
 800cae4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cae8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800caec:	1f05      	subs	r5, r0, #4
 800caee:	42a3      	cmp	r3, r4
 800caf0:	d30c      	bcc.n	800cb0c <__copybits+0x36>
 800caf2:	1aa3      	subs	r3, r4, r2
 800caf4:	3b11      	subs	r3, #17
 800caf6:	f023 0303 	bic.w	r3, r3, #3
 800cafa:	3211      	adds	r2, #17
 800cafc:	42a2      	cmp	r2, r4
 800cafe:	bf88      	it	hi
 800cb00:	2300      	movhi	r3, #0
 800cb02:	4418      	add	r0, r3
 800cb04:	2300      	movs	r3, #0
 800cb06:	4288      	cmp	r0, r1
 800cb08:	d305      	bcc.n	800cb16 <__copybits+0x40>
 800cb0a:	bd70      	pop	{r4, r5, r6, pc}
 800cb0c:	f853 6b04 	ldr.w	r6, [r3], #4
 800cb10:	f845 6f04 	str.w	r6, [r5, #4]!
 800cb14:	e7eb      	b.n	800caee <__copybits+0x18>
 800cb16:	f840 3b04 	str.w	r3, [r0], #4
 800cb1a:	e7f4      	b.n	800cb06 <__copybits+0x30>

0800cb1c <__any_on>:
 800cb1c:	f100 0214 	add.w	r2, r0, #20
 800cb20:	6900      	ldr	r0, [r0, #16]
 800cb22:	114b      	asrs	r3, r1, #5
 800cb24:	4298      	cmp	r0, r3
 800cb26:	b510      	push	{r4, lr}
 800cb28:	db11      	blt.n	800cb4e <__any_on+0x32>
 800cb2a:	dd0a      	ble.n	800cb42 <__any_on+0x26>
 800cb2c:	f011 011f 	ands.w	r1, r1, #31
 800cb30:	d007      	beq.n	800cb42 <__any_on+0x26>
 800cb32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb36:	fa24 f001 	lsr.w	r0, r4, r1
 800cb3a:	fa00 f101 	lsl.w	r1, r0, r1
 800cb3e:	428c      	cmp	r4, r1
 800cb40:	d10b      	bne.n	800cb5a <__any_on+0x3e>
 800cb42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d803      	bhi.n	800cb52 <__any_on+0x36>
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	bd10      	pop	{r4, pc}
 800cb4e:	4603      	mov	r3, r0
 800cb50:	e7f7      	b.n	800cb42 <__any_on+0x26>
 800cb52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb56:	2900      	cmp	r1, #0
 800cb58:	d0f5      	beq.n	800cb46 <__any_on+0x2a>
 800cb5a:	2001      	movs	r0, #1
 800cb5c:	e7f6      	b.n	800cb4c <__any_on+0x30>

0800cb5e <__sread>:
 800cb5e:	b510      	push	{r4, lr}
 800cb60:	460c      	mov	r4, r1
 800cb62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb66:	f000 f86d 	bl	800cc44 <_read_r>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	bfab      	itete	ge
 800cb6e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb70:	89a3      	ldrhlt	r3, [r4, #12]
 800cb72:	181b      	addge	r3, r3, r0
 800cb74:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb78:	bfac      	ite	ge
 800cb7a:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb7c:	81a3      	strhlt	r3, [r4, #12]
 800cb7e:	bd10      	pop	{r4, pc}

0800cb80 <__swrite>:
 800cb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb84:	461f      	mov	r7, r3
 800cb86:	898b      	ldrh	r3, [r1, #12]
 800cb88:	05db      	lsls	r3, r3, #23
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	460c      	mov	r4, r1
 800cb8e:	4616      	mov	r6, r2
 800cb90:	d505      	bpl.n	800cb9e <__swrite+0x1e>
 800cb92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb96:	2302      	movs	r3, #2
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f000 f841 	bl	800cc20 <_lseek_r>
 800cb9e:	89a3      	ldrh	r3, [r4, #12]
 800cba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cba8:	81a3      	strh	r3, [r4, #12]
 800cbaa:	4632      	mov	r2, r6
 800cbac:	463b      	mov	r3, r7
 800cbae:	4628      	mov	r0, r5
 800cbb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb4:	f000 b868 	b.w	800cc88 <_write_r>

0800cbb8 <__sseek>:
 800cbb8:	b510      	push	{r4, lr}
 800cbba:	460c      	mov	r4, r1
 800cbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc0:	f000 f82e 	bl	800cc20 <_lseek_r>
 800cbc4:	1c43      	adds	r3, r0, #1
 800cbc6:	89a3      	ldrh	r3, [r4, #12]
 800cbc8:	bf15      	itete	ne
 800cbca:	6560      	strne	r0, [r4, #84]	; 0x54
 800cbcc:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cbd0:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cbd4:	81a3      	strheq	r3, [r4, #12]
 800cbd6:	bf18      	it	ne
 800cbd8:	81a3      	strhne	r3, [r4, #12]
 800cbda:	bd10      	pop	{r4, pc}

0800cbdc <__sclose>:
 800cbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbe0:	f000 b80e 	b.w	800cc00 <_close_r>

0800cbe4 <__ascii_wctomb>:
 800cbe4:	b149      	cbz	r1, 800cbfa <__ascii_wctomb+0x16>
 800cbe6:	2aff      	cmp	r2, #255	; 0xff
 800cbe8:	bf85      	ittet	hi
 800cbea:	238a      	movhi	r3, #138	; 0x8a
 800cbec:	6003      	strhi	r3, [r0, #0]
 800cbee:	700a      	strbls	r2, [r1, #0]
 800cbf0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cbf4:	bf98      	it	ls
 800cbf6:	2001      	movls	r0, #1
 800cbf8:	4770      	bx	lr
 800cbfa:	4608      	mov	r0, r1
 800cbfc:	4770      	bx	lr
	...

0800cc00 <_close_r>:
 800cc00:	b538      	push	{r3, r4, r5, lr}
 800cc02:	4d06      	ldr	r5, [pc, #24]	; (800cc1c <_close_r+0x1c>)
 800cc04:	2300      	movs	r3, #0
 800cc06:	4604      	mov	r4, r0
 800cc08:	4608      	mov	r0, r1
 800cc0a:	602b      	str	r3, [r5, #0]
 800cc0c:	f7f8 fc9b 	bl	8005546 <_close>
 800cc10:	1c43      	adds	r3, r0, #1
 800cc12:	d102      	bne.n	800cc1a <_close_r+0x1a>
 800cc14:	682b      	ldr	r3, [r5, #0]
 800cc16:	b103      	cbz	r3, 800cc1a <_close_r+0x1a>
 800cc18:	6023      	str	r3, [r4, #0]
 800cc1a:	bd38      	pop	{r3, r4, r5, pc}
 800cc1c:	20000760 	.word	0x20000760

0800cc20 <_lseek_r>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	4d07      	ldr	r5, [pc, #28]	; (800cc40 <_lseek_r+0x20>)
 800cc24:	4604      	mov	r4, r0
 800cc26:	4608      	mov	r0, r1
 800cc28:	4611      	mov	r1, r2
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	602a      	str	r2, [r5, #0]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	f7f8 fcb0 	bl	8005594 <_lseek>
 800cc34:	1c43      	adds	r3, r0, #1
 800cc36:	d102      	bne.n	800cc3e <_lseek_r+0x1e>
 800cc38:	682b      	ldr	r3, [r5, #0]
 800cc3a:	b103      	cbz	r3, 800cc3e <_lseek_r+0x1e>
 800cc3c:	6023      	str	r3, [r4, #0]
 800cc3e:	bd38      	pop	{r3, r4, r5, pc}
 800cc40:	20000760 	.word	0x20000760

0800cc44 <_read_r>:
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	4d07      	ldr	r5, [pc, #28]	; (800cc64 <_read_r+0x20>)
 800cc48:	4604      	mov	r4, r0
 800cc4a:	4608      	mov	r0, r1
 800cc4c:	4611      	mov	r1, r2
 800cc4e:	2200      	movs	r2, #0
 800cc50:	602a      	str	r2, [r5, #0]
 800cc52:	461a      	mov	r2, r3
 800cc54:	f7f8 fc3e 	bl	80054d4 <_read>
 800cc58:	1c43      	adds	r3, r0, #1
 800cc5a:	d102      	bne.n	800cc62 <_read_r+0x1e>
 800cc5c:	682b      	ldr	r3, [r5, #0]
 800cc5e:	b103      	cbz	r3, 800cc62 <_read_r+0x1e>
 800cc60:	6023      	str	r3, [r4, #0]
 800cc62:	bd38      	pop	{r3, r4, r5, pc}
 800cc64:	20000760 	.word	0x20000760

0800cc68 <_sbrk_r>:
 800cc68:	b538      	push	{r3, r4, r5, lr}
 800cc6a:	4d06      	ldr	r5, [pc, #24]	; (800cc84 <_sbrk_r+0x1c>)
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	4604      	mov	r4, r0
 800cc70:	4608      	mov	r0, r1
 800cc72:	602b      	str	r3, [r5, #0]
 800cc74:	f7f8 fc9c 	bl	80055b0 <_sbrk>
 800cc78:	1c43      	adds	r3, r0, #1
 800cc7a:	d102      	bne.n	800cc82 <_sbrk_r+0x1a>
 800cc7c:	682b      	ldr	r3, [r5, #0]
 800cc7e:	b103      	cbz	r3, 800cc82 <_sbrk_r+0x1a>
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	bd38      	pop	{r3, r4, r5, pc}
 800cc84:	20000760 	.word	0x20000760

0800cc88 <_write_r>:
 800cc88:	b538      	push	{r3, r4, r5, lr}
 800cc8a:	4d07      	ldr	r5, [pc, #28]	; (800cca8 <_write_r+0x20>)
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	4608      	mov	r0, r1
 800cc90:	4611      	mov	r1, r2
 800cc92:	2200      	movs	r2, #0
 800cc94:	602a      	str	r2, [r5, #0]
 800cc96:	461a      	mov	r2, r3
 800cc98:	f7f8 fc39 	bl	800550e <_write>
 800cc9c:	1c43      	adds	r3, r0, #1
 800cc9e:	d102      	bne.n	800cca6 <_write_r+0x1e>
 800cca0:	682b      	ldr	r3, [r5, #0]
 800cca2:	b103      	cbz	r3, 800cca6 <_write_r+0x1e>
 800cca4:	6023      	str	r3, [r4, #0]
 800cca6:	bd38      	pop	{r3, r4, r5, pc}
 800cca8:	20000760 	.word	0x20000760

0800ccac <__assert_func>:
 800ccac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccae:	4614      	mov	r4, r2
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	4b09      	ldr	r3, [pc, #36]	; (800ccd8 <__assert_func+0x2c>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4605      	mov	r5, r0
 800ccb8:	68d8      	ldr	r0, [r3, #12]
 800ccba:	b14c      	cbz	r4, 800ccd0 <__assert_func+0x24>
 800ccbc:	4b07      	ldr	r3, [pc, #28]	; (800ccdc <__assert_func+0x30>)
 800ccbe:	9100      	str	r1, [sp, #0]
 800ccc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ccc4:	4906      	ldr	r1, [pc, #24]	; (800cce0 <__assert_func+0x34>)
 800ccc6:	462b      	mov	r3, r5
 800ccc8:	f000 f878 	bl	800cdbc <fiprintf>
 800cccc:	f000 f888 	bl	800cde0 <abort>
 800ccd0:	4b04      	ldr	r3, [pc, #16]	; (800cce4 <__assert_func+0x38>)
 800ccd2:	461c      	mov	r4, r3
 800ccd4:	e7f3      	b.n	800ccbe <__assert_func+0x12>
 800ccd6:	bf00      	nop
 800ccd8:	200001dc 	.word	0x200001dc
 800ccdc:	0800e7f4 	.word	0x0800e7f4
 800cce0:	0800e801 	.word	0x0800e801
 800cce4:	0800e82f 	.word	0x0800e82f

0800cce8 <_calloc_r>:
 800cce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccea:	fba1 2402 	umull	r2, r4, r1, r2
 800ccee:	b94c      	cbnz	r4, 800cd04 <_calloc_r+0x1c>
 800ccf0:	4611      	mov	r1, r2
 800ccf2:	9201      	str	r2, [sp, #4]
 800ccf4:	f7ff f93a 	bl	800bf6c <_malloc_r>
 800ccf8:	9a01      	ldr	r2, [sp, #4]
 800ccfa:	4605      	mov	r5, r0
 800ccfc:	b930      	cbnz	r0, 800cd0c <_calloc_r+0x24>
 800ccfe:	4628      	mov	r0, r5
 800cd00:	b003      	add	sp, #12
 800cd02:	bd30      	pop	{r4, r5, pc}
 800cd04:	220c      	movs	r2, #12
 800cd06:	6002      	str	r2, [r0, #0]
 800cd08:	2500      	movs	r5, #0
 800cd0a:	e7f8      	b.n	800ccfe <_calloc_r+0x16>
 800cd0c:	4621      	mov	r1, r4
 800cd0e:	f7fe fd61 	bl	800b7d4 <memset>
 800cd12:	e7f4      	b.n	800ccfe <_calloc_r+0x16>

0800cd14 <_free_r>:
 800cd14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd16:	2900      	cmp	r1, #0
 800cd18:	d044      	beq.n	800cda4 <_free_r+0x90>
 800cd1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd1e:	9001      	str	r0, [sp, #4]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	f1a1 0404 	sub.w	r4, r1, #4
 800cd26:	bfb8      	it	lt
 800cd28:	18e4      	addlt	r4, r4, r3
 800cd2a:	f7ff fa5f 	bl	800c1ec <__malloc_lock>
 800cd2e:	4a1e      	ldr	r2, [pc, #120]	; (800cda8 <_free_r+0x94>)
 800cd30:	9801      	ldr	r0, [sp, #4]
 800cd32:	6813      	ldr	r3, [r2, #0]
 800cd34:	b933      	cbnz	r3, 800cd44 <_free_r+0x30>
 800cd36:	6063      	str	r3, [r4, #4]
 800cd38:	6014      	str	r4, [r2, #0]
 800cd3a:	b003      	add	sp, #12
 800cd3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd40:	f7ff ba5a 	b.w	800c1f8 <__malloc_unlock>
 800cd44:	42a3      	cmp	r3, r4
 800cd46:	d908      	bls.n	800cd5a <_free_r+0x46>
 800cd48:	6825      	ldr	r5, [r4, #0]
 800cd4a:	1961      	adds	r1, r4, r5
 800cd4c:	428b      	cmp	r3, r1
 800cd4e:	bf01      	itttt	eq
 800cd50:	6819      	ldreq	r1, [r3, #0]
 800cd52:	685b      	ldreq	r3, [r3, #4]
 800cd54:	1949      	addeq	r1, r1, r5
 800cd56:	6021      	streq	r1, [r4, #0]
 800cd58:	e7ed      	b.n	800cd36 <_free_r+0x22>
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	b10b      	cbz	r3, 800cd64 <_free_r+0x50>
 800cd60:	42a3      	cmp	r3, r4
 800cd62:	d9fa      	bls.n	800cd5a <_free_r+0x46>
 800cd64:	6811      	ldr	r1, [r2, #0]
 800cd66:	1855      	adds	r5, r2, r1
 800cd68:	42a5      	cmp	r5, r4
 800cd6a:	d10b      	bne.n	800cd84 <_free_r+0x70>
 800cd6c:	6824      	ldr	r4, [r4, #0]
 800cd6e:	4421      	add	r1, r4
 800cd70:	1854      	adds	r4, r2, r1
 800cd72:	42a3      	cmp	r3, r4
 800cd74:	6011      	str	r1, [r2, #0]
 800cd76:	d1e0      	bne.n	800cd3a <_free_r+0x26>
 800cd78:	681c      	ldr	r4, [r3, #0]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	6053      	str	r3, [r2, #4]
 800cd7e:	440c      	add	r4, r1
 800cd80:	6014      	str	r4, [r2, #0]
 800cd82:	e7da      	b.n	800cd3a <_free_r+0x26>
 800cd84:	d902      	bls.n	800cd8c <_free_r+0x78>
 800cd86:	230c      	movs	r3, #12
 800cd88:	6003      	str	r3, [r0, #0]
 800cd8a:	e7d6      	b.n	800cd3a <_free_r+0x26>
 800cd8c:	6825      	ldr	r5, [r4, #0]
 800cd8e:	1961      	adds	r1, r4, r5
 800cd90:	428b      	cmp	r3, r1
 800cd92:	bf04      	itt	eq
 800cd94:	6819      	ldreq	r1, [r3, #0]
 800cd96:	685b      	ldreq	r3, [r3, #4]
 800cd98:	6063      	str	r3, [r4, #4]
 800cd9a:	bf04      	itt	eq
 800cd9c:	1949      	addeq	r1, r1, r5
 800cd9e:	6021      	streq	r1, [r4, #0]
 800cda0:	6054      	str	r4, [r2, #4]
 800cda2:	e7ca      	b.n	800cd3a <_free_r+0x26>
 800cda4:	b003      	add	sp, #12
 800cda6:	bd30      	pop	{r4, r5, pc}
 800cda8:	20000758 	.word	0x20000758

0800cdac <malloc>:
 800cdac:	4b02      	ldr	r3, [pc, #8]	; (800cdb8 <malloc+0xc>)
 800cdae:	4601      	mov	r1, r0
 800cdb0:	6818      	ldr	r0, [r3, #0]
 800cdb2:	f7ff b8db 	b.w	800bf6c <_malloc_r>
 800cdb6:	bf00      	nop
 800cdb8:	200001dc 	.word	0x200001dc

0800cdbc <fiprintf>:
 800cdbc:	b40e      	push	{r1, r2, r3}
 800cdbe:	b503      	push	{r0, r1, lr}
 800cdc0:	4601      	mov	r1, r0
 800cdc2:	ab03      	add	r3, sp, #12
 800cdc4:	4805      	ldr	r0, [pc, #20]	; (800cddc <fiprintf+0x20>)
 800cdc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdca:	6800      	ldr	r0, [r0, #0]
 800cdcc:	9301      	str	r3, [sp, #4]
 800cdce:	f000 f837 	bl	800ce40 <_vfiprintf_r>
 800cdd2:	b002      	add	sp, #8
 800cdd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdd8:	b003      	add	sp, #12
 800cdda:	4770      	bx	lr
 800cddc:	200001dc 	.word	0x200001dc

0800cde0 <abort>:
 800cde0:	b508      	push	{r3, lr}
 800cde2:	2006      	movs	r0, #6
 800cde4:	f000 fc18 	bl	800d618 <raise>
 800cde8:	2001      	movs	r0, #1
 800cdea:	f7f8 fb69 	bl	80054c0 <_exit>

0800cdee <__sfputc_r>:
 800cdee:	6893      	ldr	r3, [r2, #8]
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	b410      	push	{r4}
 800cdf6:	6093      	str	r3, [r2, #8]
 800cdf8:	da08      	bge.n	800ce0c <__sfputc_r+0x1e>
 800cdfa:	6994      	ldr	r4, [r2, #24]
 800cdfc:	42a3      	cmp	r3, r4
 800cdfe:	db01      	blt.n	800ce04 <__sfputc_r+0x16>
 800ce00:	290a      	cmp	r1, #10
 800ce02:	d103      	bne.n	800ce0c <__sfputc_r+0x1e>
 800ce04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce08:	f000 bac4 	b.w	800d394 <__swbuf_r>
 800ce0c:	6813      	ldr	r3, [r2, #0]
 800ce0e:	1c58      	adds	r0, r3, #1
 800ce10:	6010      	str	r0, [r2, #0]
 800ce12:	7019      	strb	r1, [r3, #0]
 800ce14:	4608      	mov	r0, r1
 800ce16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <__sfputs_r>:
 800ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1e:	4606      	mov	r6, r0
 800ce20:	460f      	mov	r7, r1
 800ce22:	4614      	mov	r4, r2
 800ce24:	18d5      	adds	r5, r2, r3
 800ce26:	42ac      	cmp	r4, r5
 800ce28:	d101      	bne.n	800ce2e <__sfputs_r+0x12>
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e007      	b.n	800ce3e <__sfputs_r+0x22>
 800ce2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce32:	463a      	mov	r2, r7
 800ce34:	4630      	mov	r0, r6
 800ce36:	f7ff ffda 	bl	800cdee <__sfputc_r>
 800ce3a:	1c43      	adds	r3, r0, #1
 800ce3c:	d1f3      	bne.n	800ce26 <__sfputs_r+0xa>
 800ce3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce40 <_vfiprintf_r>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	460d      	mov	r5, r1
 800ce46:	b09d      	sub	sp, #116	; 0x74
 800ce48:	4614      	mov	r4, r2
 800ce4a:	4698      	mov	r8, r3
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	b118      	cbz	r0, 800ce58 <_vfiprintf_r+0x18>
 800ce50:	6a03      	ldr	r3, [r0, #32]
 800ce52:	b90b      	cbnz	r3, 800ce58 <_vfiprintf_r+0x18>
 800ce54:	f7fd fe04 	bl	800aa60 <__sinit>
 800ce58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce5a:	07d9      	lsls	r1, r3, #31
 800ce5c:	d405      	bmi.n	800ce6a <_vfiprintf_r+0x2a>
 800ce5e:	89ab      	ldrh	r3, [r5, #12]
 800ce60:	059a      	lsls	r2, r3, #22
 800ce62:	d402      	bmi.n	800ce6a <_vfiprintf_r+0x2a>
 800ce64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce66:	f7fe fce8 	bl	800b83a <__retarget_lock_acquire_recursive>
 800ce6a:	89ab      	ldrh	r3, [r5, #12]
 800ce6c:	071b      	lsls	r3, r3, #28
 800ce6e:	d501      	bpl.n	800ce74 <_vfiprintf_r+0x34>
 800ce70:	692b      	ldr	r3, [r5, #16]
 800ce72:	b99b      	cbnz	r3, 800ce9c <_vfiprintf_r+0x5c>
 800ce74:	4629      	mov	r1, r5
 800ce76:	4630      	mov	r0, r6
 800ce78:	f000 faca 	bl	800d410 <__swsetup_r>
 800ce7c:	b170      	cbz	r0, 800ce9c <_vfiprintf_r+0x5c>
 800ce7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce80:	07dc      	lsls	r4, r3, #31
 800ce82:	d504      	bpl.n	800ce8e <_vfiprintf_r+0x4e>
 800ce84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce88:	b01d      	add	sp, #116	; 0x74
 800ce8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce8e:	89ab      	ldrh	r3, [r5, #12]
 800ce90:	0598      	lsls	r0, r3, #22
 800ce92:	d4f7      	bmi.n	800ce84 <_vfiprintf_r+0x44>
 800ce94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce96:	f7fe fcd1 	bl	800b83c <__retarget_lock_release_recursive>
 800ce9a:	e7f3      	b.n	800ce84 <_vfiprintf_r+0x44>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cea0:	2320      	movs	r3, #32
 800cea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cea6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ceaa:	2330      	movs	r3, #48	; 0x30
 800ceac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d060 <_vfiprintf_r+0x220>
 800ceb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ceb4:	f04f 0901 	mov.w	r9, #1
 800ceb8:	4623      	mov	r3, r4
 800ceba:	469a      	mov	sl, r3
 800cebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cec0:	b10a      	cbz	r2, 800cec6 <_vfiprintf_r+0x86>
 800cec2:	2a25      	cmp	r2, #37	; 0x25
 800cec4:	d1f9      	bne.n	800ceba <_vfiprintf_r+0x7a>
 800cec6:	ebba 0b04 	subs.w	fp, sl, r4
 800ceca:	d00b      	beq.n	800cee4 <_vfiprintf_r+0xa4>
 800cecc:	465b      	mov	r3, fp
 800cece:	4622      	mov	r2, r4
 800ced0:	4629      	mov	r1, r5
 800ced2:	4630      	mov	r0, r6
 800ced4:	f7ff ffa2 	bl	800ce1c <__sfputs_r>
 800ced8:	3001      	adds	r0, #1
 800ceda:	f000 80a9 	beq.w	800d030 <_vfiprintf_r+0x1f0>
 800cede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cee0:	445a      	add	r2, fp
 800cee2:	9209      	str	r2, [sp, #36]	; 0x24
 800cee4:	f89a 3000 	ldrb.w	r3, [sl]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f000 80a1 	beq.w	800d030 <_vfiprintf_r+0x1f0>
 800ceee:	2300      	movs	r3, #0
 800cef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cef8:	f10a 0a01 	add.w	sl, sl, #1
 800cefc:	9304      	str	r3, [sp, #16]
 800cefe:	9307      	str	r3, [sp, #28]
 800cf00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf04:	931a      	str	r3, [sp, #104]	; 0x68
 800cf06:	4654      	mov	r4, sl
 800cf08:	2205      	movs	r2, #5
 800cf0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf0e:	4854      	ldr	r0, [pc, #336]	; (800d060 <_vfiprintf_r+0x220>)
 800cf10:	f7f3 f96e 	bl	80001f0 <memchr>
 800cf14:	9a04      	ldr	r2, [sp, #16]
 800cf16:	b9d8      	cbnz	r0, 800cf50 <_vfiprintf_r+0x110>
 800cf18:	06d1      	lsls	r1, r2, #27
 800cf1a:	bf44      	itt	mi
 800cf1c:	2320      	movmi	r3, #32
 800cf1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf22:	0713      	lsls	r3, r2, #28
 800cf24:	bf44      	itt	mi
 800cf26:	232b      	movmi	r3, #43	; 0x2b
 800cf28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf2c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf30:	2b2a      	cmp	r3, #42	; 0x2a
 800cf32:	d015      	beq.n	800cf60 <_vfiprintf_r+0x120>
 800cf34:	9a07      	ldr	r2, [sp, #28]
 800cf36:	4654      	mov	r4, sl
 800cf38:	2000      	movs	r0, #0
 800cf3a:	f04f 0c0a 	mov.w	ip, #10
 800cf3e:	4621      	mov	r1, r4
 800cf40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf44:	3b30      	subs	r3, #48	; 0x30
 800cf46:	2b09      	cmp	r3, #9
 800cf48:	d94d      	bls.n	800cfe6 <_vfiprintf_r+0x1a6>
 800cf4a:	b1b0      	cbz	r0, 800cf7a <_vfiprintf_r+0x13a>
 800cf4c:	9207      	str	r2, [sp, #28]
 800cf4e:	e014      	b.n	800cf7a <_vfiprintf_r+0x13a>
 800cf50:	eba0 0308 	sub.w	r3, r0, r8
 800cf54:	fa09 f303 	lsl.w	r3, r9, r3
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	9304      	str	r3, [sp, #16]
 800cf5c:	46a2      	mov	sl, r4
 800cf5e:	e7d2      	b.n	800cf06 <_vfiprintf_r+0xc6>
 800cf60:	9b03      	ldr	r3, [sp, #12]
 800cf62:	1d19      	adds	r1, r3, #4
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	9103      	str	r1, [sp, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	bfbb      	ittet	lt
 800cf6c:	425b      	neglt	r3, r3
 800cf6e:	f042 0202 	orrlt.w	r2, r2, #2
 800cf72:	9307      	strge	r3, [sp, #28]
 800cf74:	9307      	strlt	r3, [sp, #28]
 800cf76:	bfb8      	it	lt
 800cf78:	9204      	strlt	r2, [sp, #16]
 800cf7a:	7823      	ldrb	r3, [r4, #0]
 800cf7c:	2b2e      	cmp	r3, #46	; 0x2e
 800cf7e:	d10c      	bne.n	800cf9a <_vfiprintf_r+0x15a>
 800cf80:	7863      	ldrb	r3, [r4, #1]
 800cf82:	2b2a      	cmp	r3, #42	; 0x2a
 800cf84:	d134      	bne.n	800cff0 <_vfiprintf_r+0x1b0>
 800cf86:	9b03      	ldr	r3, [sp, #12]
 800cf88:	1d1a      	adds	r2, r3, #4
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	9203      	str	r2, [sp, #12]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	bfb8      	it	lt
 800cf92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf96:	3402      	adds	r4, #2
 800cf98:	9305      	str	r3, [sp, #20]
 800cf9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d070 <_vfiprintf_r+0x230>
 800cf9e:	7821      	ldrb	r1, [r4, #0]
 800cfa0:	2203      	movs	r2, #3
 800cfa2:	4650      	mov	r0, sl
 800cfa4:	f7f3 f924 	bl	80001f0 <memchr>
 800cfa8:	b138      	cbz	r0, 800cfba <_vfiprintf_r+0x17a>
 800cfaa:	9b04      	ldr	r3, [sp, #16]
 800cfac:	eba0 000a 	sub.w	r0, r0, sl
 800cfb0:	2240      	movs	r2, #64	; 0x40
 800cfb2:	4082      	lsls	r2, r0
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	3401      	adds	r4, #1
 800cfb8:	9304      	str	r3, [sp, #16]
 800cfba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfbe:	4829      	ldr	r0, [pc, #164]	; (800d064 <_vfiprintf_r+0x224>)
 800cfc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfc4:	2206      	movs	r2, #6
 800cfc6:	f7f3 f913 	bl	80001f0 <memchr>
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	d03f      	beq.n	800d04e <_vfiprintf_r+0x20e>
 800cfce:	4b26      	ldr	r3, [pc, #152]	; (800d068 <_vfiprintf_r+0x228>)
 800cfd0:	bb1b      	cbnz	r3, 800d01a <_vfiprintf_r+0x1da>
 800cfd2:	9b03      	ldr	r3, [sp, #12]
 800cfd4:	3307      	adds	r3, #7
 800cfd6:	f023 0307 	bic.w	r3, r3, #7
 800cfda:	3308      	adds	r3, #8
 800cfdc:	9303      	str	r3, [sp, #12]
 800cfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe0:	443b      	add	r3, r7
 800cfe2:	9309      	str	r3, [sp, #36]	; 0x24
 800cfe4:	e768      	b.n	800ceb8 <_vfiprintf_r+0x78>
 800cfe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfea:	460c      	mov	r4, r1
 800cfec:	2001      	movs	r0, #1
 800cfee:	e7a6      	b.n	800cf3e <_vfiprintf_r+0xfe>
 800cff0:	2300      	movs	r3, #0
 800cff2:	3401      	adds	r4, #1
 800cff4:	9305      	str	r3, [sp, #20]
 800cff6:	4619      	mov	r1, r3
 800cff8:	f04f 0c0a 	mov.w	ip, #10
 800cffc:	4620      	mov	r0, r4
 800cffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d002:	3a30      	subs	r2, #48	; 0x30
 800d004:	2a09      	cmp	r2, #9
 800d006:	d903      	bls.n	800d010 <_vfiprintf_r+0x1d0>
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d0c6      	beq.n	800cf9a <_vfiprintf_r+0x15a>
 800d00c:	9105      	str	r1, [sp, #20]
 800d00e:	e7c4      	b.n	800cf9a <_vfiprintf_r+0x15a>
 800d010:	fb0c 2101 	mla	r1, ip, r1, r2
 800d014:	4604      	mov	r4, r0
 800d016:	2301      	movs	r3, #1
 800d018:	e7f0      	b.n	800cffc <_vfiprintf_r+0x1bc>
 800d01a:	ab03      	add	r3, sp, #12
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	462a      	mov	r2, r5
 800d020:	4b12      	ldr	r3, [pc, #72]	; (800d06c <_vfiprintf_r+0x22c>)
 800d022:	a904      	add	r1, sp, #16
 800d024:	4630      	mov	r0, r6
 800d026:	f3af 8000 	nop.w
 800d02a:	4607      	mov	r7, r0
 800d02c:	1c78      	adds	r0, r7, #1
 800d02e:	d1d6      	bne.n	800cfde <_vfiprintf_r+0x19e>
 800d030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d032:	07d9      	lsls	r1, r3, #31
 800d034:	d405      	bmi.n	800d042 <_vfiprintf_r+0x202>
 800d036:	89ab      	ldrh	r3, [r5, #12]
 800d038:	059a      	lsls	r2, r3, #22
 800d03a:	d402      	bmi.n	800d042 <_vfiprintf_r+0x202>
 800d03c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d03e:	f7fe fbfd 	bl	800b83c <__retarget_lock_release_recursive>
 800d042:	89ab      	ldrh	r3, [r5, #12]
 800d044:	065b      	lsls	r3, r3, #25
 800d046:	f53f af1d 	bmi.w	800ce84 <_vfiprintf_r+0x44>
 800d04a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d04c:	e71c      	b.n	800ce88 <_vfiprintf_r+0x48>
 800d04e:	ab03      	add	r3, sp, #12
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	462a      	mov	r2, r5
 800d054:	4b05      	ldr	r3, [pc, #20]	; (800d06c <_vfiprintf_r+0x22c>)
 800d056:	a904      	add	r1, sp, #16
 800d058:	4630      	mov	r0, r6
 800d05a:	f000 f879 	bl	800d150 <_printf_i>
 800d05e:	e7e4      	b.n	800d02a <_vfiprintf_r+0x1ea>
 800d060:	0800e830 	.word	0x0800e830
 800d064:	0800e83a 	.word	0x0800e83a
 800d068:	00000000 	.word	0x00000000
 800d06c:	0800ce1d 	.word	0x0800ce1d
 800d070:	0800e836 	.word	0x0800e836

0800d074 <_printf_common>:
 800d074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d078:	4616      	mov	r6, r2
 800d07a:	4699      	mov	r9, r3
 800d07c:	688a      	ldr	r2, [r1, #8]
 800d07e:	690b      	ldr	r3, [r1, #16]
 800d080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d084:	4293      	cmp	r3, r2
 800d086:	bfb8      	it	lt
 800d088:	4613      	movlt	r3, r2
 800d08a:	6033      	str	r3, [r6, #0]
 800d08c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d090:	4607      	mov	r7, r0
 800d092:	460c      	mov	r4, r1
 800d094:	b10a      	cbz	r2, 800d09a <_printf_common+0x26>
 800d096:	3301      	adds	r3, #1
 800d098:	6033      	str	r3, [r6, #0]
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	0699      	lsls	r1, r3, #26
 800d09e:	bf42      	ittt	mi
 800d0a0:	6833      	ldrmi	r3, [r6, #0]
 800d0a2:	3302      	addmi	r3, #2
 800d0a4:	6033      	strmi	r3, [r6, #0]
 800d0a6:	6825      	ldr	r5, [r4, #0]
 800d0a8:	f015 0506 	ands.w	r5, r5, #6
 800d0ac:	d106      	bne.n	800d0bc <_printf_common+0x48>
 800d0ae:	f104 0a19 	add.w	sl, r4, #25
 800d0b2:	68e3      	ldr	r3, [r4, #12]
 800d0b4:	6832      	ldr	r2, [r6, #0]
 800d0b6:	1a9b      	subs	r3, r3, r2
 800d0b8:	42ab      	cmp	r3, r5
 800d0ba:	dc26      	bgt.n	800d10a <_printf_common+0x96>
 800d0bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0c0:	1e13      	subs	r3, r2, #0
 800d0c2:	6822      	ldr	r2, [r4, #0]
 800d0c4:	bf18      	it	ne
 800d0c6:	2301      	movne	r3, #1
 800d0c8:	0692      	lsls	r2, r2, #26
 800d0ca:	d42b      	bmi.n	800d124 <_printf_common+0xb0>
 800d0cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0d0:	4649      	mov	r1, r9
 800d0d2:	4638      	mov	r0, r7
 800d0d4:	47c0      	blx	r8
 800d0d6:	3001      	adds	r0, #1
 800d0d8:	d01e      	beq.n	800d118 <_printf_common+0xa4>
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	6922      	ldr	r2, [r4, #16]
 800d0de:	f003 0306 	and.w	r3, r3, #6
 800d0e2:	2b04      	cmp	r3, #4
 800d0e4:	bf02      	ittt	eq
 800d0e6:	68e5      	ldreq	r5, [r4, #12]
 800d0e8:	6833      	ldreq	r3, [r6, #0]
 800d0ea:	1aed      	subeq	r5, r5, r3
 800d0ec:	68a3      	ldr	r3, [r4, #8]
 800d0ee:	bf0c      	ite	eq
 800d0f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0f4:	2500      	movne	r5, #0
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	bfc4      	itt	gt
 800d0fa:	1a9b      	subgt	r3, r3, r2
 800d0fc:	18ed      	addgt	r5, r5, r3
 800d0fe:	2600      	movs	r6, #0
 800d100:	341a      	adds	r4, #26
 800d102:	42b5      	cmp	r5, r6
 800d104:	d11a      	bne.n	800d13c <_printf_common+0xc8>
 800d106:	2000      	movs	r0, #0
 800d108:	e008      	b.n	800d11c <_printf_common+0xa8>
 800d10a:	2301      	movs	r3, #1
 800d10c:	4652      	mov	r2, sl
 800d10e:	4649      	mov	r1, r9
 800d110:	4638      	mov	r0, r7
 800d112:	47c0      	blx	r8
 800d114:	3001      	adds	r0, #1
 800d116:	d103      	bne.n	800d120 <_printf_common+0xac>
 800d118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d120:	3501      	adds	r5, #1
 800d122:	e7c6      	b.n	800d0b2 <_printf_common+0x3e>
 800d124:	18e1      	adds	r1, r4, r3
 800d126:	1c5a      	adds	r2, r3, #1
 800d128:	2030      	movs	r0, #48	; 0x30
 800d12a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d12e:	4422      	add	r2, r4
 800d130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d138:	3302      	adds	r3, #2
 800d13a:	e7c7      	b.n	800d0cc <_printf_common+0x58>
 800d13c:	2301      	movs	r3, #1
 800d13e:	4622      	mov	r2, r4
 800d140:	4649      	mov	r1, r9
 800d142:	4638      	mov	r0, r7
 800d144:	47c0      	blx	r8
 800d146:	3001      	adds	r0, #1
 800d148:	d0e6      	beq.n	800d118 <_printf_common+0xa4>
 800d14a:	3601      	adds	r6, #1
 800d14c:	e7d9      	b.n	800d102 <_printf_common+0x8e>
	...

0800d150 <_printf_i>:
 800d150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d154:	7e0f      	ldrb	r7, [r1, #24]
 800d156:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d158:	2f78      	cmp	r7, #120	; 0x78
 800d15a:	4691      	mov	r9, r2
 800d15c:	4680      	mov	r8, r0
 800d15e:	460c      	mov	r4, r1
 800d160:	469a      	mov	sl, r3
 800d162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d166:	d807      	bhi.n	800d178 <_printf_i+0x28>
 800d168:	2f62      	cmp	r7, #98	; 0x62
 800d16a:	d80a      	bhi.n	800d182 <_printf_i+0x32>
 800d16c:	2f00      	cmp	r7, #0
 800d16e:	f000 80d4 	beq.w	800d31a <_printf_i+0x1ca>
 800d172:	2f58      	cmp	r7, #88	; 0x58
 800d174:	f000 80c0 	beq.w	800d2f8 <_printf_i+0x1a8>
 800d178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d17c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d180:	e03a      	b.n	800d1f8 <_printf_i+0xa8>
 800d182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d186:	2b15      	cmp	r3, #21
 800d188:	d8f6      	bhi.n	800d178 <_printf_i+0x28>
 800d18a:	a101      	add	r1, pc, #4	; (adr r1, 800d190 <_printf_i+0x40>)
 800d18c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d190:	0800d1e9 	.word	0x0800d1e9
 800d194:	0800d1fd 	.word	0x0800d1fd
 800d198:	0800d179 	.word	0x0800d179
 800d19c:	0800d179 	.word	0x0800d179
 800d1a0:	0800d179 	.word	0x0800d179
 800d1a4:	0800d179 	.word	0x0800d179
 800d1a8:	0800d1fd 	.word	0x0800d1fd
 800d1ac:	0800d179 	.word	0x0800d179
 800d1b0:	0800d179 	.word	0x0800d179
 800d1b4:	0800d179 	.word	0x0800d179
 800d1b8:	0800d179 	.word	0x0800d179
 800d1bc:	0800d301 	.word	0x0800d301
 800d1c0:	0800d229 	.word	0x0800d229
 800d1c4:	0800d2bb 	.word	0x0800d2bb
 800d1c8:	0800d179 	.word	0x0800d179
 800d1cc:	0800d179 	.word	0x0800d179
 800d1d0:	0800d323 	.word	0x0800d323
 800d1d4:	0800d179 	.word	0x0800d179
 800d1d8:	0800d229 	.word	0x0800d229
 800d1dc:	0800d179 	.word	0x0800d179
 800d1e0:	0800d179 	.word	0x0800d179
 800d1e4:	0800d2c3 	.word	0x0800d2c3
 800d1e8:	682b      	ldr	r3, [r5, #0]
 800d1ea:	1d1a      	adds	r2, r3, #4
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	602a      	str	r2, [r5, #0]
 800d1f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e09f      	b.n	800d33c <_printf_i+0x1ec>
 800d1fc:	6820      	ldr	r0, [r4, #0]
 800d1fe:	682b      	ldr	r3, [r5, #0]
 800d200:	0607      	lsls	r7, r0, #24
 800d202:	f103 0104 	add.w	r1, r3, #4
 800d206:	6029      	str	r1, [r5, #0]
 800d208:	d501      	bpl.n	800d20e <_printf_i+0xbe>
 800d20a:	681e      	ldr	r6, [r3, #0]
 800d20c:	e003      	b.n	800d216 <_printf_i+0xc6>
 800d20e:	0646      	lsls	r6, r0, #25
 800d210:	d5fb      	bpl.n	800d20a <_printf_i+0xba>
 800d212:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d216:	2e00      	cmp	r6, #0
 800d218:	da03      	bge.n	800d222 <_printf_i+0xd2>
 800d21a:	232d      	movs	r3, #45	; 0x2d
 800d21c:	4276      	negs	r6, r6
 800d21e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d222:	485a      	ldr	r0, [pc, #360]	; (800d38c <_printf_i+0x23c>)
 800d224:	230a      	movs	r3, #10
 800d226:	e012      	b.n	800d24e <_printf_i+0xfe>
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	6820      	ldr	r0, [r4, #0]
 800d22c:	1d19      	adds	r1, r3, #4
 800d22e:	6029      	str	r1, [r5, #0]
 800d230:	0605      	lsls	r5, r0, #24
 800d232:	d501      	bpl.n	800d238 <_printf_i+0xe8>
 800d234:	681e      	ldr	r6, [r3, #0]
 800d236:	e002      	b.n	800d23e <_printf_i+0xee>
 800d238:	0641      	lsls	r1, r0, #25
 800d23a:	d5fb      	bpl.n	800d234 <_printf_i+0xe4>
 800d23c:	881e      	ldrh	r6, [r3, #0]
 800d23e:	4853      	ldr	r0, [pc, #332]	; (800d38c <_printf_i+0x23c>)
 800d240:	2f6f      	cmp	r7, #111	; 0x6f
 800d242:	bf0c      	ite	eq
 800d244:	2308      	moveq	r3, #8
 800d246:	230a      	movne	r3, #10
 800d248:	2100      	movs	r1, #0
 800d24a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d24e:	6865      	ldr	r5, [r4, #4]
 800d250:	60a5      	str	r5, [r4, #8]
 800d252:	2d00      	cmp	r5, #0
 800d254:	bfa2      	ittt	ge
 800d256:	6821      	ldrge	r1, [r4, #0]
 800d258:	f021 0104 	bicge.w	r1, r1, #4
 800d25c:	6021      	strge	r1, [r4, #0]
 800d25e:	b90e      	cbnz	r6, 800d264 <_printf_i+0x114>
 800d260:	2d00      	cmp	r5, #0
 800d262:	d04b      	beq.n	800d2fc <_printf_i+0x1ac>
 800d264:	4615      	mov	r5, r2
 800d266:	fbb6 f1f3 	udiv	r1, r6, r3
 800d26a:	fb03 6711 	mls	r7, r3, r1, r6
 800d26e:	5dc7      	ldrb	r7, [r0, r7]
 800d270:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d274:	4637      	mov	r7, r6
 800d276:	42bb      	cmp	r3, r7
 800d278:	460e      	mov	r6, r1
 800d27a:	d9f4      	bls.n	800d266 <_printf_i+0x116>
 800d27c:	2b08      	cmp	r3, #8
 800d27e:	d10b      	bne.n	800d298 <_printf_i+0x148>
 800d280:	6823      	ldr	r3, [r4, #0]
 800d282:	07de      	lsls	r6, r3, #31
 800d284:	d508      	bpl.n	800d298 <_printf_i+0x148>
 800d286:	6923      	ldr	r3, [r4, #16]
 800d288:	6861      	ldr	r1, [r4, #4]
 800d28a:	4299      	cmp	r1, r3
 800d28c:	bfde      	ittt	le
 800d28e:	2330      	movle	r3, #48	; 0x30
 800d290:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d294:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d298:	1b52      	subs	r2, r2, r5
 800d29a:	6122      	str	r2, [r4, #16]
 800d29c:	f8cd a000 	str.w	sl, [sp]
 800d2a0:	464b      	mov	r3, r9
 800d2a2:	aa03      	add	r2, sp, #12
 800d2a4:	4621      	mov	r1, r4
 800d2a6:	4640      	mov	r0, r8
 800d2a8:	f7ff fee4 	bl	800d074 <_printf_common>
 800d2ac:	3001      	adds	r0, #1
 800d2ae:	d14a      	bne.n	800d346 <_printf_i+0x1f6>
 800d2b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2b4:	b004      	add	sp, #16
 800d2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ba:	6823      	ldr	r3, [r4, #0]
 800d2bc:	f043 0320 	orr.w	r3, r3, #32
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	4833      	ldr	r0, [pc, #204]	; (800d390 <_printf_i+0x240>)
 800d2c4:	2778      	movs	r7, #120	; 0x78
 800d2c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2ca:	6823      	ldr	r3, [r4, #0]
 800d2cc:	6829      	ldr	r1, [r5, #0]
 800d2ce:	061f      	lsls	r7, r3, #24
 800d2d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d2d4:	d402      	bmi.n	800d2dc <_printf_i+0x18c>
 800d2d6:	065f      	lsls	r7, r3, #25
 800d2d8:	bf48      	it	mi
 800d2da:	b2b6      	uxthmi	r6, r6
 800d2dc:	07df      	lsls	r7, r3, #31
 800d2de:	bf48      	it	mi
 800d2e0:	f043 0320 	orrmi.w	r3, r3, #32
 800d2e4:	6029      	str	r1, [r5, #0]
 800d2e6:	bf48      	it	mi
 800d2e8:	6023      	strmi	r3, [r4, #0]
 800d2ea:	b91e      	cbnz	r6, 800d2f4 <_printf_i+0x1a4>
 800d2ec:	6823      	ldr	r3, [r4, #0]
 800d2ee:	f023 0320 	bic.w	r3, r3, #32
 800d2f2:	6023      	str	r3, [r4, #0]
 800d2f4:	2310      	movs	r3, #16
 800d2f6:	e7a7      	b.n	800d248 <_printf_i+0xf8>
 800d2f8:	4824      	ldr	r0, [pc, #144]	; (800d38c <_printf_i+0x23c>)
 800d2fa:	e7e4      	b.n	800d2c6 <_printf_i+0x176>
 800d2fc:	4615      	mov	r5, r2
 800d2fe:	e7bd      	b.n	800d27c <_printf_i+0x12c>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	6826      	ldr	r6, [r4, #0]
 800d304:	6961      	ldr	r1, [r4, #20]
 800d306:	1d18      	adds	r0, r3, #4
 800d308:	6028      	str	r0, [r5, #0]
 800d30a:	0635      	lsls	r5, r6, #24
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	d501      	bpl.n	800d314 <_printf_i+0x1c4>
 800d310:	6019      	str	r1, [r3, #0]
 800d312:	e002      	b.n	800d31a <_printf_i+0x1ca>
 800d314:	0670      	lsls	r0, r6, #25
 800d316:	d5fb      	bpl.n	800d310 <_printf_i+0x1c0>
 800d318:	8019      	strh	r1, [r3, #0]
 800d31a:	2300      	movs	r3, #0
 800d31c:	6123      	str	r3, [r4, #16]
 800d31e:	4615      	mov	r5, r2
 800d320:	e7bc      	b.n	800d29c <_printf_i+0x14c>
 800d322:	682b      	ldr	r3, [r5, #0]
 800d324:	1d1a      	adds	r2, r3, #4
 800d326:	602a      	str	r2, [r5, #0]
 800d328:	681d      	ldr	r5, [r3, #0]
 800d32a:	6862      	ldr	r2, [r4, #4]
 800d32c:	2100      	movs	r1, #0
 800d32e:	4628      	mov	r0, r5
 800d330:	f7f2 ff5e 	bl	80001f0 <memchr>
 800d334:	b108      	cbz	r0, 800d33a <_printf_i+0x1ea>
 800d336:	1b40      	subs	r0, r0, r5
 800d338:	6060      	str	r0, [r4, #4]
 800d33a:	6863      	ldr	r3, [r4, #4]
 800d33c:	6123      	str	r3, [r4, #16]
 800d33e:	2300      	movs	r3, #0
 800d340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d344:	e7aa      	b.n	800d29c <_printf_i+0x14c>
 800d346:	6923      	ldr	r3, [r4, #16]
 800d348:	462a      	mov	r2, r5
 800d34a:	4649      	mov	r1, r9
 800d34c:	4640      	mov	r0, r8
 800d34e:	47d0      	blx	sl
 800d350:	3001      	adds	r0, #1
 800d352:	d0ad      	beq.n	800d2b0 <_printf_i+0x160>
 800d354:	6823      	ldr	r3, [r4, #0]
 800d356:	079b      	lsls	r3, r3, #30
 800d358:	d413      	bmi.n	800d382 <_printf_i+0x232>
 800d35a:	68e0      	ldr	r0, [r4, #12]
 800d35c:	9b03      	ldr	r3, [sp, #12]
 800d35e:	4298      	cmp	r0, r3
 800d360:	bfb8      	it	lt
 800d362:	4618      	movlt	r0, r3
 800d364:	e7a6      	b.n	800d2b4 <_printf_i+0x164>
 800d366:	2301      	movs	r3, #1
 800d368:	4632      	mov	r2, r6
 800d36a:	4649      	mov	r1, r9
 800d36c:	4640      	mov	r0, r8
 800d36e:	47d0      	blx	sl
 800d370:	3001      	adds	r0, #1
 800d372:	d09d      	beq.n	800d2b0 <_printf_i+0x160>
 800d374:	3501      	adds	r5, #1
 800d376:	68e3      	ldr	r3, [r4, #12]
 800d378:	9903      	ldr	r1, [sp, #12]
 800d37a:	1a5b      	subs	r3, r3, r1
 800d37c:	42ab      	cmp	r3, r5
 800d37e:	dcf2      	bgt.n	800d366 <_printf_i+0x216>
 800d380:	e7eb      	b.n	800d35a <_printf_i+0x20a>
 800d382:	2500      	movs	r5, #0
 800d384:	f104 0619 	add.w	r6, r4, #25
 800d388:	e7f5      	b.n	800d376 <_printf_i+0x226>
 800d38a:	bf00      	nop
 800d38c:	0800e841 	.word	0x0800e841
 800d390:	0800e852 	.word	0x0800e852

0800d394 <__swbuf_r>:
 800d394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d396:	460e      	mov	r6, r1
 800d398:	4614      	mov	r4, r2
 800d39a:	4605      	mov	r5, r0
 800d39c:	b118      	cbz	r0, 800d3a6 <__swbuf_r+0x12>
 800d39e:	6a03      	ldr	r3, [r0, #32]
 800d3a0:	b90b      	cbnz	r3, 800d3a6 <__swbuf_r+0x12>
 800d3a2:	f7fd fb5d 	bl	800aa60 <__sinit>
 800d3a6:	69a3      	ldr	r3, [r4, #24]
 800d3a8:	60a3      	str	r3, [r4, #8]
 800d3aa:	89a3      	ldrh	r3, [r4, #12]
 800d3ac:	071a      	lsls	r2, r3, #28
 800d3ae:	d525      	bpl.n	800d3fc <__swbuf_r+0x68>
 800d3b0:	6923      	ldr	r3, [r4, #16]
 800d3b2:	b31b      	cbz	r3, 800d3fc <__swbuf_r+0x68>
 800d3b4:	6823      	ldr	r3, [r4, #0]
 800d3b6:	6922      	ldr	r2, [r4, #16]
 800d3b8:	1a98      	subs	r0, r3, r2
 800d3ba:	6963      	ldr	r3, [r4, #20]
 800d3bc:	b2f6      	uxtb	r6, r6
 800d3be:	4283      	cmp	r3, r0
 800d3c0:	4637      	mov	r7, r6
 800d3c2:	dc04      	bgt.n	800d3ce <__swbuf_r+0x3a>
 800d3c4:	4621      	mov	r1, r4
 800d3c6:	4628      	mov	r0, r5
 800d3c8:	f7fe fee8 	bl	800c19c <_fflush_r>
 800d3cc:	b9e0      	cbnz	r0, 800d408 <__swbuf_r+0x74>
 800d3ce:	68a3      	ldr	r3, [r4, #8]
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	60a3      	str	r3, [r4, #8]
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	1c5a      	adds	r2, r3, #1
 800d3d8:	6022      	str	r2, [r4, #0]
 800d3da:	701e      	strb	r6, [r3, #0]
 800d3dc:	6962      	ldr	r2, [r4, #20]
 800d3de:	1c43      	adds	r3, r0, #1
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d004      	beq.n	800d3ee <__swbuf_r+0x5a>
 800d3e4:	89a3      	ldrh	r3, [r4, #12]
 800d3e6:	07db      	lsls	r3, r3, #31
 800d3e8:	d506      	bpl.n	800d3f8 <__swbuf_r+0x64>
 800d3ea:	2e0a      	cmp	r6, #10
 800d3ec:	d104      	bne.n	800d3f8 <__swbuf_r+0x64>
 800d3ee:	4621      	mov	r1, r4
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	f7fe fed3 	bl	800c19c <_fflush_r>
 800d3f6:	b938      	cbnz	r0, 800d408 <__swbuf_r+0x74>
 800d3f8:	4638      	mov	r0, r7
 800d3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3fc:	4621      	mov	r1, r4
 800d3fe:	4628      	mov	r0, r5
 800d400:	f000 f806 	bl	800d410 <__swsetup_r>
 800d404:	2800      	cmp	r0, #0
 800d406:	d0d5      	beq.n	800d3b4 <__swbuf_r+0x20>
 800d408:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d40c:	e7f4      	b.n	800d3f8 <__swbuf_r+0x64>
	...

0800d410 <__swsetup_r>:
 800d410:	b538      	push	{r3, r4, r5, lr}
 800d412:	4b2a      	ldr	r3, [pc, #168]	; (800d4bc <__swsetup_r+0xac>)
 800d414:	4605      	mov	r5, r0
 800d416:	6818      	ldr	r0, [r3, #0]
 800d418:	460c      	mov	r4, r1
 800d41a:	b118      	cbz	r0, 800d424 <__swsetup_r+0x14>
 800d41c:	6a03      	ldr	r3, [r0, #32]
 800d41e:	b90b      	cbnz	r3, 800d424 <__swsetup_r+0x14>
 800d420:	f7fd fb1e 	bl	800aa60 <__sinit>
 800d424:	89a3      	ldrh	r3, [r4, #12]
 800d426:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d42a:	0718      	lsls	r0, r3, #28
 800d42c:	d422      	bmi.n	800d474 <__swsetup_r+0x64>
 800d42e:	06d9      	lsls	r1, r3, #27
 800d430:	d407      	bmi.n	800d442 <__swsetup_r+0x32>
 800d432:	2309      	movs	r3, #9
 800d434:	602b      	str	r3, [r5, #0]
 800d436:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d43a:	81a3      	strh	r3, [r4, #12]
 800d43c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d440:	e034      	b.n	800d4ac <__swsetup_r+0x9c>
 800d442:	0758      	lsls	r0, r3, #29
 800d444:	d512      	bpl.n	800d46c <__swsetup_r+0x5c>
 800d446:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d448:	b141      	cbz	r1, 800d45c <__swsetup_r+0x4c>
 800d44a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d44e:	4299      	cmp	r1, r3
 800d450:	d002      	beq.n	800d458 <__swsetup_r+0x48>
 800d452:	4628      	mov	r0, r5
 800d454:	f7ff fc5e 	bl	800cd14 <_free_r>
 800d458:	2300      	movs	r3, #0
 800d45a:	6363      	str	r3, [r4, #52]	; 0x34
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d462:	81a3      	strh	r3, [r4, #12]
 800d464:	2300      	movs	r3, #0
 800d466:	6063      	str	r3, [r4, #4]
 800d468:	6923      	ldr	r3, [r4, #16]
 800d46a:	6023      	str	r3, [r4, #0]
 800d46c:	89a3      	ldrh	r3, [r4, #12]
 800d46e:	f043 0308 	orr.w	r3, r3, #8
 800d472:	81a3      	strh	r3, [r4, #12]
 800d474:	6923      	ldr	r3, [r4, #16]
 800d476:	b94b      	cbnz	r3, 800d48c <__swsetup_r+0x7c>
 800d478:	89a3      	ldrh	r3, [r4, #12]
 800d47a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d47e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d482:	d003      	beq.n	800d48c <__swsetup_r+0x7c>
 800d484:	4621      	mov	r1, r4
 800d486:	4628      	mov	r0, r5
 800d488:	f000 f840 	bl	800d50c <__smakebuf_r>
 800d48c:	89a0      	ldrh	r0, [r4, #12]
 800d48e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d492:	f010 0301 	ands.w	r3, r0, #1
 800d496:	d00a      	beq.n	800d4ae <__swsetup_r+0x9e>
 800d498:	2300      	movs	r3, #0
 800d49a:	60a3      	str	r3, [r4, #8]
 800d49c:	6963      	ldr	r3, [r4, #20]
 800d49e:	425b      	negs	r3, r3
 800d4a0:	61a3      	str	r3, [r4, #24]
 800d4a2:	6923      	ldr	r3, [r4, #16]
 800d4a4:	b943      	cbnz	r3, 800d4b8 <__swsetup_r+0xa8>
 800d4a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4aa:	d1c4      	bne.n	800d436 <__swsetup_r+0x26>
 800d4ac:	bd38      	pop	{r3, r4, r5, pc}
 800d4ae:	0781      	lsls	r1, r0, #30
 800d4b0:	bf58      	it	pl
 800d4b2:	6963      	ldrpl	r3, [r4, #20]
 800d4b4:	60a3      	str	r3, [r4, #8]
 800d4b6:	e7f4      	b.n	800d4a2 <__swsetup_r+0x92>
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	e7f7      	b.n	800d4ac <__swsetup_r+0x9c>
 800d4bc:	200001dc 	.word	0x200001dc

0800d4c0 <__swhatbuf_r>:
 800d4c0:	b570      	push	{r4, r5, r6, lr}
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4c8:	2900      	cmp	r1, #0
 800d4ca:	b096      	sub	sp, #88	; 0x58
 800d4cc:	4615      	mov	r5, r2
 800d4ce:	461e      	mov	r6, r3
 800d4d0:	da0d      	bge.n	800d4ee <__swhatbuf_r+0x2e>
 800d4d2:	89a3      	ldrh	r3, [r4, #12]
 800d4d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d4d8:	f04f 0100 	mov.w	r1, #0
 800d4dc:	bf0c      	ite	eq
 800d4de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d4e2:	2340      	movne	r3, #64	; 0x40
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	6031      	str	r1, [r6, #0]
 800d4e8:	602b      	str	r3, [r5, #0]
 800d4ea:	b016      	add	sp, #88	; 0x58
 800d4ec:	bd70      	pop	{r4, r5, r6, pc}
 800d4ee:	466a      	mov	r2, sp
 800d4f0:	f000 f848 	bl	800d584 <_fstat_r>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	dbec      	blt.n	800d4d2 <__swhatbuf_r+0x12>
 800d4f8:	9901      	ldr	r1, [sp, #4]
 800d4fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d4fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d502:	4259      	negs	r1, r3
 800d504:	4159      	adcs	r1, r3
 800d506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d50a:	e7eb      	b.n	800d4e4 <__swhatbuf_r+0x24>

0800d50c <__smakebuf_r>:
 800d50c:	898b      	ldrh	r3, [r1, #12]
 800d50e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d510:	079d      	lsls	r5, r3, #30
 800d512:	4606      	mov	r6, r0
 800d514:	460c      	mov	r4, r1
 800d516:	d507      	bpl.n	800d528 <__smakebuf_r+0x1c>
 800d518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d51c:	6023      	str	r3, [r4, #0]
 800d51e:	6123      	str	r3, [r4, #16]
 800d520:	2301      	movs	r3, #1
 800d522:	6163      	str	r3, [r4, #20]
 800d524:	b002      	add	sp, #8
 800d526:	bd70      	pop	{r4, r5, r6, pc}
 800d528:	ab01      	add	r3, sp, #4
 800d52a:	466a      	mov	r2, sp
 800d52c:	f7ff ffc8 	bl	800d4c0 <__swhatbuf_r>
 800d530:	9900      	ldr	r1, [sp, #0]
 800d532:	4605      	mov	r5, r0
 800d534:	4630      	mov	r0, r6
 800d536:	f7fe fd19 	bl	800bf6c <_malloc_r>
 800d53a:	b948      	cbnz	r0, 800d550 <__smakebuf_r+0x44>
 800d53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d540:	059a      	lsls	r2, r3, #22
 800d542:	d4ef      	bmi.n	800d524 <__smakebuf_r+0x18>
 800d544:	f023 0303 	bic.w	r3, r3, #3
 800d548:	f043 0302 	orr.w	r3, r3, #2
 800d54c:	81a3      	strh	r3, [r4, #12]
 800d54e:	e7e3      	b.n	800d518 <__smakebuf_r+0xc>
 800d550:	89a3      	ldrh	r3, [r4, #12]
 800d552:	6020      	str	r0, [r4, #0]
 800d554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d558:	81a3      	strh	r3, [r4, #12]
 800d55a:	9b00      	ldr	r3, [sp, #0]
 800d55c:	6163      	str	r3, [r4, #20]
 800d55e:	9b01      	ldr	r3, [sp, #4]
 800d560:	6120      	str	r0, [r4, #16]
 800d562:	b15b      	cbz	r3, 800d57c <__smakebuf_r+0x70>
 800d564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d568:	4630      	mov	r0, r6
 800d56a:	f000 f81d 	bl	800d5a8 <_isatty_r>
 800d56e:	b128      	cbz	r0, 800d57c <__smakebuf_r+0x70>
 800d570:	89a3      	ldrh	r3, [r4, #12]
 800d572:	f023 0303 	bic.w	r3, r3, #3
 800d576:	f043 0301 	orr.w	r3, r3, #1
 800d57a:	81a3      	strh	r3, [r4, #12]
 800d57c:	89a3      	ldrh	r3, [r4, #12]
 800d57e:	431d      	orrs	r5, r3
 800d580:	81a5      	strh	r5, [r4, #12]
 800d582:	e7cf      	b.n	800d524 <__smakebuf_r+0x18>

0800d584 <_fstat_r>:
 800d584:	b538      	push	{r3, r4, r5, lr}
 800d586:	4d07      	ldr	r5, [pc, #28]	; (800d5a4 <_fstat_r+0x20>)
 800d588:	2300      	movs	r3, #0
 800d58a:	4604      	mov	r4, r0
 800d58c:	4608      	mov	r0, r1
 800d58e:	4611      	mov	r1, r2
 800d590:	602b      	str	r3, [r5, #0]
 800d592:	f7f7 ffe4 	bl	800555e <_fstat>
 800d596:	1c43      	adds	r3, r0, #1
 800d598:	d102      	bne.n	800d5a0 <_fstat_r+0x1c>
 800d59a:	682b      	ldr	r3, [r5, #0]
 800d59c:	b103      	cbz	r3, 800d5a0 <_fstat_r+0x1c>
 800d59e:	6023      	str	r3, [r4, #0]
 800d5a0:	bd38      	pop	{r3, r4, r5, pc}
 800d5a2:	bf00      	nop
 800d5a4:	20000760 	.word	0x20000760

0800d5a8 <_isatty_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	4d06      	ldr	r5, [pc, #24]	; (800d5c4 <_isatty_r+0x1c>)
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	4608      	mov	r0, r1
 800d5b2:	602b      	str	r3, [r5, #0]
 800d5b4:	f7f7 ffe3 	bl	800557e <_isatty>
 800d5b8:	1c43      	adds	r3, r0, #1
 800d5ba:	d102      	bne.n	800d5c2 <_isatty_r+0x1a>
 800d5bc:	682b      	ldr	r3, [r5, #0]
 800d5be:	b103      	cbz	r3, 800d5c2 <_isatty_r+0x1a>
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	bd38      	pop	{r3, r4, r5, pc}
 800d5c4:	20000760 	.word	0x20000760

0800d5c8 <_raise_r>:
 800d5c8:	291f      	cmp	r1, #31
 800d5ca:	b538      	push	{r3, r4, r5, lr}
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	460d      	mov	r5, r1
 800d5d0:	d904      	bls.n	800d5dc <_raise_r+0x14>
 800d5d2:	2316      	movs	r3, #22
 800d5d4:	6003      	str	r3, [r0, #0]
 800d5d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d5de:	b112      	cbz	r2, 800d5e6 <_raise_r+0x1e>
 800d5e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5e4:	b94b      	cbnz	r3, 800d5fa <_raise_r+0x32>
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f000 f830 	bl	800d64c <_getpid_r>
 800d5ec:	462a      	mov	r2, r5
 800d5ee:	4601      	mov	r1, r0
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5f6:	f000 b817 	b.w	800d628 <_kill_r>
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d00a      	beq.n	800d614 <_raise_r+0x4c>
 800d5fe:	1c59      	adds	r1, r3, #1
 800d600:	d103      	bne.n	800d60a <_raise_r+0x42>
 800d602:	2316      	movs	r3, #22
 800d604:	6003      	str	r3, [r0, #0]
 800d606:	2001      	movs	r0, #1
 800d608:	e7e7      	b.n	800d5da <_raise_r+0x12>
 800d60a:	2400      	movs	r4, #0
 800d60c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d610:	4628      	mov	r0, r5
 800d612:	4798      	blx	r3
 800d614:	2000      	movs	r0, #0
 800d616:	e7e0      	b.n	800d5da <_raise_r+0x12>

0800d618 <raise>:
 800d618:	4b02      	ldr	r3, [pc, #8]	; (800d624 <raise+0xc>)
 800d61a:	4601      	mov	r1, r0
 800d61c:	6818      	ldr	r0, [r3, #0]
 800d61e:	f7ff bfd3 	b.w	800d5c8 <_raise_r>
 800d622:	bf00      	nop
 800d624:	200001dc 	.word	0x200001dc

0800d628 <_kill_r>:
 800d628:	b538      	push	{r3, r4, r5, lr}
 800d62a:	4d07      	ldr	r5, [pc, #28]	; (800d648 <_kill_r+0x20>)
 800d62c:	2300      	movs	r3, #0
 800d62e:	4604      	mov	r4, r0
 800d630:	4608      	mov	r0, r1
 800d632:	4611      	mov	r1, r2
 800d634:	602b      	str	r3, [r5, #0]
 800d636:	f7f7 ff33 	bl	80054a0 <_kill>
 800d63a:	1c43      	adds	r3, r0, #1
 800d63c:	d102      	bne.n	800d644 <_kill_r+0x1c>
 800d63e:	682b      	ldr	r3, [r5, #0]
 800d640:	b103      	cbz	r3, 800d644 <_kill_r+0x1c>
 800d642:	6023      	str	r3, [r4, #0]
 800d644:	bd38      	pop	{r3, r4, r5, pc}
 800d646:	bf00      	nop
 800d648:	20000760 	.word	0x20000760

0800d64c <_getpid_r>:
 800d64c:	f7f7 bf20 	b.w	8005490 <_getpid>

0800d650 <acos>:
 800d650:	b538      	push	{r3, r4, r5, lr}
 800d652:	ed2d 8b02 	vpush	{d8}
 800d656:	ec55 4b10 	vmov	r4, r5, d0
 800d65a:	f000 f831 	bl	800d6c0 <__ieee754_acos>
 800d65e:	4622      	mov	r2, r4
 800d660:	462b      	mov	r3, r5
 800d662:	4620      	mov	r0, r4
 800d664:	4629      	mov	r1, r5
 800d666:	eeb0 8a40 	vmov.f32	s16, s0
 800d66a:	eef0 8a60 	vmov.f32	s17, s1
 800d66e:	f7f3 fa65 	bl	8000b3c <__aeabi_dcmpun>
 800d672:	b9a8      	cbnz	r0, 800d6a0 <acos+0x50>
 800d674:	ec45 4b10 	vmov	d0, r4, r5
 800d678:	f000 fd16 	bl	800e0a8 <fabs>
 800d67c:	4b0c      	ldr	r3, [pc, #48]	; (800d6b0 <acos+0x60>)
 800d67e:	ec51 0b10 	vmov	r0, r1, d0
 800d682:	2200      	movs	r2, #0
 800d684:	f7f3 fa50 	bl	8000b28 <__aeabi_dcmpgt>
 800d688:	b150      	cbz	r0, 800d6a0 <acos+0x50>
 800d68a:	f7fe f8ab 	bl	800b7e4 <__errno>
 800d68e:	ecbd 8b02 	vpop	{d8}
 800d692:	2321      	movs	r3, #33	; 0x21
 800d694:	6003      	str	r3, [r0, #0]
 800d696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d69a:	4806      	ldr	r0, [pc, #24]	; (800d6b4 <acos+0x64>)
 800d69c:	f7fe b8e0 	b.w	800b860 <nan>
 800d6a0:	eeb0 0a48 	vmov.f32	s0, s16
 800d6a4:	eef0 0a68 	vmov.f32	s1, s17
 800d6a8:	ecbd 8b02 	vpop	{d8}
 800d6ac:	bd38      	pop	{r3, r4, r5, pc}
 800d6ae:	bf00      	nop
 800d6b0:	3ff00000 	.word	0x3ff00000
 800d6b4:	0800e82f 	.word	0x0800e82f

0800d6b8 <atan2>:
 800d6b8:	f000 ba62 	b.w	800db80 <__ieee754_atan2>
 800d6bc:	0000      	movs	r0, r0
	...

0800d6c0 <__ieee754_acos>:
 800d6c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c4:	ec55 4b10 	vmov	r4, r5, d0
 800d6c8:	49b7      	ldr	r1, [pc, #732]	; (800d9a8 <__ieee754_acos+0x2e8>)
 800d6ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d6ce:	428b      	cmp	r3, r1
 800d6d0:	dd1b      	ble.n	800d70a <__ieee754_acos+0x4a>
 800d6d2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800d6d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d6da:	4323      	orrs	r3, r4
 800d6dc:	d106      	bne.n	800d6ec <__ieee754_acos+0x2c>
 800d6de:	2d00      	cmp	r5, #0
 800d6e0:	f300 8211 	bgt.w	800db06 <__ieee754_acos+0x446>
 800d6e4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800d940 <__ieee754_acos+0x280>
 800d6e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ec:	ee10 2a10 	vmov	r2, s0
 800d6f0:	462b      	mov	r3, r5
 800d6f2:	ee10 0a10 	vmov	r0, s0
 800d6f6:	4629      	mov	r1, r5
 800d6f8:	f7f2 fdce 	bl	8000298 <__aeabi_dsub>
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	460b      	mov	r3, r1
 800d700:	f7f3 f8ac 	bl	800085c <__aeabi_ddiv>
 800d704:	ec41 0b10 	vmov	d0, r0, r1
 800d708:	e7ee      	b.n	800d6e8 <__ieee754_acos+0x28>
 800d70a:	49a8      	ldr	r1, [pc, #672]	; (800d9ac <__ieee754_acos+0x2ec>)
 800d70c:	428b      	cmp	r3, r1
 800d70e:	f300 8087 	bgt.w	800d820 <__ieee754_acos+0x160>
 800d712:	4aa7      	ldr	r2, [pc, #668]	; (800d9b0 <__ieee754_acos+0x2f0>)
 800d714:	4293      	cmp	r3, r2
 800d716:	f340 81f9 	ble.w	800db0c <__ieee754_acos+0x44c>
 800d71a:	ee10 2a10 	vmov	r2, s0
 800d71e:	ee10 0a10 	vmov	r0, s0
 800d722:	462b      	mov	r3, r5
 800d724:	4629      	mov	r1, r5
 800d726:	f7f2 ff6f 	bl	8000608 <__aeabi_dmul>
 800d72a:	a387      	add	r3, pc, #540	; (adr r3, 800d948 <__ieee754_acos+0x288>)
 800d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d730:	4606      	mov	r6, r0
 800d732:	460f      	mov	r7, r1
 800d734:	f7f2 ff68 	bl	8000608 <__aeabi_dmul>
 800d738:	a385      	add	r3, pc, #532	; (adr r3, 800d950 <__ieee754_acos+0x290>)
 800d73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73e:	f7f2 fdad 	bl	800029c <__adddf3>
 800d742:	4632      	mov	r2, r6
 800d744:	463b      	mov	r3, r7
 800d746:	f7f2 ff5f 	bl	8000608 <__aeabi_dmul>
 800d74a:	a383      	add	r3, pc, #524	; (adr r3, 800d958 <__ieee754_acos+0x298>)
 800d74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d750:	f7f2 fda2 	bl	8000298 <__aeabi_dsub>
 800d754:	4632      	mov	r2, r6
 800d756:	463b      	mov	r3, r7
 800d758:	f7f2 ff56 	bl	8000608 <__aeabi_dmul>
 800d75c:	a380      	add	r3, pc, #512	; (adr r3, 800d960 <__ieee754_acos+0x2a0>)
 800d75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d762:	f7f2 fd9b 	bl	800029c <__adddf3>
 800d766:	4632      	mov	r2, r6
 800d768:	463b      	mov	r3, r7
 800d76a:	f7f2 ff4d 	bl	8000608 <__aeabi_dmul>
 800d76e:	a37e      	add	r3, pc, #504	; (adr r3, 800d968 <__ieee754_acos+0x2a8>)
 800d770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d774:	f7f2 fd90 	bl	8000298 <__aeabi_dsub>
 800d778:	4632      	mov	r2, r6
 800d77a:	463b      	mov	r3, r7
 800d77c:	f7f2 ff44 	bl	8000608 <__aeabi_dmul>
 800d780:	a37b      	add	r3, pc, #492	; (adr r3, 800d970 <__ieee754_acos+0x2b0>)
 800d782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d786:	f7f2 fd89 	bl	800029c <__adddf3>
 800d78a:	4632      	mov	r2, r6
 800d78c:	463b      	mov	r3, r7
 800d78e:	f7f2 ff3b 	bl	8000608 <__aeabi_dmul>
 800d792:	a379      	add	r3, pc, #484	; (adr r3, 800d978 <__ieee754_acos+0x2b8>)
 800d794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d798:	4680      	mov	r8, r0
 800d79a:	4689      	mov	r9, r1
 800d79c:	4630      	mov	r0, r6
 800d79e:	4639      	mov	r1, r7
 800d7a0:	f7f2 ff32 	bl	8000608 <__aeabi_dmul>
 800d7a4:	a376      	add	r3, pc, #472	; (adr r3, 800d980 <__ieee754_acos+0x2c0>)
 800d7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7aa:	f7f2 fd75 	bl	8000298 <__aeabi_dsub>
 800d7ae:	4632      	mov	r2, r6
 800d7b0:	463b      	mov	r3, r7
 800d7b2:	f7f2 ff29 	bl	8000608 <__aeabi_dmul>
 800d7b6:	a374      	add	r3, pc, #464	; (adr r3, 800d988 <__ieee754_acos+0x2c8>)
 800d7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7bc:	f7f2 fd6e 	bl	800029c <__adddf3>
 800d7c0:	4632      	mov	r2, r6
 800d7c2:	463b      	mov	r3, r7
 800d7c4:	f7f2 ff20 	bl	8000608 <__aeabi_dmul>
 800d7c8:	a371      	add	r3, pc, #452	; (adr r3, 800d990 <__ieee754_acos+0x2d0>)
 800d7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ce:	f7f2 fd63 	bl	8000298 <__aeabi_dsub>
 800d7d2:	4632      	mov	r2, r6
 800d7d4:	463b      	mov	r3, r7
 800d7d6:	f7f2 ff17 	bl	8000608 <__aeabi_dmul>
 800d7da:	4b76      	ldr	r3, [pc, #472]	; (800d9b4 <__ieee754_acos+0x2f4>)
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f7f2 fd5d 	bl	800029c <__adddf3>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	4640      	mov	r0, r8
 800d7e8:	4649      	mov	r1, r9
 800d7ea:	f7f3 f837 	bl	800085c <__aeabi_ddiv>
 800d7ee:	4622      	mov	r2, r4
 800d7f0:	462b      	mov	r3, r5
 800d7f2:	f7f2 ff09 	bl	8000608 <__aeabi_dmul>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	a167      	add	r1, pc, #412	; (adr r1, 800d998 <__ieee754_acos+0x2d8>)
 800d7fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d800:	f7f2 fd4a 	bl	8000298 <__aeabi_dsub>
 800d804:	4602      	mov	r2, r0
 800d806:	460b      	mov	r3, r1
 800d808:	4620      	mov	r0, r4
 800d80a:	4629      	mov	r1, r5
 800d80c:	f7f2 fd44 	bl	8000298 <__aeabi_dsub>
 800d810:	4602      	mov	r2, r0
 800d812:	460b      	mov	r3, r1
 800d814:	a162      	add	r1, pc, #392	; (adr r1, 800d9a0 <__ieee754_acos+0x2e0>)
 800d816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d81a:	f7f2 fd3d 	bl	8000298 <__aeabi_dsub>
 800d81e:	e771      	b.n	800d704 <__ieee754_acos+0x44>
 800d820:	2d00      	cmp	r5, #0
 800d822:	f280 80cb 	bge.w	800d9bc <__ieee754_acos+0x2fc>
 800d826:	ee10 0a10 	vmov	r0, s0
 800d82a:	4b62      	ldr	r3, [pc, #392]	; (800d9b4 <__ieee754_acos+0x2f4>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	4629      	mov	r1, r5
 800d830:	f7f2 fd34 	bl	800029c <__adddf3>
 800d834:	4b60      	ldr	r3, [pc, #384]	; (800d9b8 <__ieee754_acos+0x2f8>)
 800d836:	2200      	movs	r2, #0
 800d838:	f7f2 fee6 	bl	8000608 <__aeabi_dmul>
 800d83c:	a342      	add	r3, pc, #264	; (adr r3, 800d948 <__ieee754_acos+0x288>)
 800d83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d842:	4604      	mov	r4, r0
 800d844:	460d      	mov	r5, r1
 800d846:	f7f2 fedf 	bl	8000608 <__aeabi_dmul>
 800d84a:	a341      	add	r3, pc, #260	; (adr r3, 800d950 <__ieee754_acos+0x290>)
 800d84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d850:	f7f2 fd24 	bl	800029c <__adddf3>
 800d854:	4622      	mov	r2, r4
 800d856:	462b      	mov	r3, r5
 800d858:	f7f2 fed6 	bl	8000608 <__aeabi_dmul>
 800d85c:	a33e      	add	r3, pc, #248	; (adr r3, 800d958 <__ieee754_acos+0x298>)
 800d85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d862:	f7f2 fd19 	bl	8000298 <__aeabi_dsub>
 800d866:	4622      	mov	r2, r4
 800d868:	462b      	mov	r3, r5
 800d86a:	f7f2 fecd 	bl	8000608 <__aeabi_dmul>
 800d86e:	a33c      	add	r3, pc, #240	; (adr r3, 800d960 <__ieee754_acos+0x2a0>)
 800d870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d874:	f7f2 fd12 	bl	800029c <__adddf3>
 800d878:	4622      	mov	r2, r4
 800d87a:	462b      	mov	r3, r5
 800d87c:	f7f2 fec4 	bl	8000608 <__aeabi_dmul>
 800d880:	a339      	add	r3, pc, #228	; (adr r3, 800d968 <__ieee754_acos+0x2a8>)
 800d882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d886:	f7f2 fd07 	bl	8000298 <__aeabi_dsub>
 800d88a:	4622      	mov	r2, r4
 800d88c:	462b      	mov	r3, r5
 800d88e:	f7f2 febb 	bl	8000608 <__aeabi_dmul>
 800d892:	a337      	add	r3, pc, #220	; (adr r3, 800d970 <__ieee754_acos+0x2b0>)
 800d894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d898:	f7f2 fd00 	bl	800029c <__adddf3>
 800d89c:	4622      	mov	r2, r4
 800d89e:	462b      	mov	r3, r5
 800d8a0:	f7f2 feb2 	bl	8000608 <__aeabi_dmul>
 800d8a4:	ec45 4b10 	vmov	d0, r4, r5
 800d8a8:	4680      	mov	r8, r0
 800d8aa:	4689      	mov	r9, r1
 800d8ac:	f000 fc06 	bl	800e0bc <__ieee754_sqrt>
 800d8b0:	a331      	add	r3, pc, #196	; (adr r3, 800d978 <__ieee754_acos+0x2b8>)
 800d8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	ec57 6b10 	vmov	r6, r7, d0
 800d8be:	f7f2 fea3 	bl	8000608 <__aeabi_dmul>
 800d8c2:	a32f      	add	r3, pc, #188	; (adr r3, 800d980 <__ieee754_acos+0x2c0>)
 800d8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c8:	f7f2 fce6 	bl	8000298 <__aeabi_dsub>
 800d8cc:	4622      	mov	r2, r4
 800d8ce:	462b      	mov	r3, r5
 800d8d0:	f7f2 fe9a 	bl	8000608 <__aeabi_dmul>
 800d8d4:	a32c      	add	r3, pc, #176	; (adr r3, 800d988 <__ieee754_acos+0x2c8>)
 800d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8da:	f7f2 fcdf 	bl	800029c <__adddf3>
 800d8de:	4622      	mov	r2, r4
 800d8e0:	462b      	mov	r3, r5
 800d8e2:	f7f2 fe91 	bl	8000608 <__aeabi_dmul>
 800d8e6:	a32a      	add	r3, pc, #168	; (adr r3, 800d990 <__ieee754_acos+0x2d0>)
 800d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ec:	f7f2 fcd4 	bl	8000298 <__aeabi_dsub>
 800d8f0:	4622      	mov	r2, r4
 800d8f2:	462b      	mov	r3, r5
 800d8f4:	f7f2 fe88 	bl	8000608 <__aeabi_dmul>
 800d8f8:	4b2e      	ldr	r3, [pc, #184]	; (800d9b4 <__ieee754_acos+0x2f4>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f7f2 fcce 	bl	800029c <__adddf3>
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	4640      	mov	r0, r8
 800d906:	4649      	mov	r1, r9
 800d908:	f7f2 ffa8 	bl	800085c <__aeabi_ddiv>
 800d90c:	4632      	mov	r2, r6
 800d90e:	463b      	mov	r3, r7
 800d910:	f7f2 fe7a 	bl	8000608 <__aeabi_dmul>
 800d914:	a320      	add	r3, pc, #128	; (adr r3, 800d998 <__ieee754_acos+0x2d8>)
 800d916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91a:	f7f2 fcbd 	bl	8000298 <__aeabi_dsub>
 800d91e:	4632      	mov	r2, r6
 800d920:	463b      	mov	r3, r7
 800d922:	f7f2 fcbb 	bl	800029c <__adddf3>
 800d926:	4602      	mov	r2, r0
 800d928:	460b      	mov	r3, r1
 800d92a:	f7f2 fcb7 	bl	800029c <__adddf3>
 800d92e:	4602      	mov	r2, r0
 800d930:	460b      	mov	r3, r1
 800d932:	a103      	add	r1, pc, #12	; (adr r1, 800d940 <__ieee754_acos+0x280>)
 800d934:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d938:	e76f      	b.n	800d81a <__ieee754_acos+0x15a>
 800d93a:	bf00      	nop
 800d93c:	f3af 8000 	nop.w
 800d940:	54442d18 	.word	0x54442d18
 800d944:	400921fb 	.word	0x400921fb
 800d948:	0dfdf709 	.word	0x0dfdf709
 800d94c:	3f023de1 	.word	0x3f023de1
 800d950:	7501b288 	.word	0x7501b288
 800d954:	3f49efe0 	.word	0x3f49efe0
 800d958:	b5688f3b 	.word	0xb5688f3b
 800d95c:	3fa48228 	.word	0x3fa48228
 800d960:	0e884455 	.word	0x0e884455
 800d964:	3fc9c155 	.word	0x3fc9c155
 800d968:	03eb6f7d 	.word	0x03eb6f7d
 800d96c:	3fd4d612 	.word	0x3fd4d612
 800d970:	55555555 	.word	0x55555555
 800d974:	3fc55555 	.word	0x3fc55555
 800d978:	b12e9282 	.word	0xb12e9282
 800d97c:	3fb3b8c5 	.word	0x3fb3b8c5
 800d980:	1b8d0159 	.word	0x1b8d0159
 800d984:	3fe6066c 	.word	0x3fe6066c
 800d988:	9c598ac8 	.word	0x9c598ac8
 800d98c:	40002ae5 	.word	0x40002ae5
 800d990:	1c8a2d4b 	.word	0x1c8a2d4b
 800d994:	40033a27 	.word	0x40033a27
 800d998:	33145c07 	.word	0x33145c07
 800d99c:	3c91a626 	.word	0x3c91a626
 800d9a0:	54442d18 	.word	0x54442d18
 800d9a4:	3ff921fb 	.word	0x3ff921fb
 800d9a8:	3fefffff 	.word	0x3fefffff
 800d9ac:	3fdfffff 	.word	0x3fdfffff
 800d9b0:	3c600000 	.word	0x3c600000
 800d9b4:	3ff00000 	.word	0x3ff00000
 800d9b8:	3fe00000 	.word	0x3fe00000
 800d9bc:	ee10 2a10 	vmov	r2, s0
 800d9c0:	462b      	mov	r3, r5
 800d9c2:	496d      	ldr	r1, [pc, #436]	; (800db78 <__ieee754_acos+0x4b8>)
 800d9c4:	2000      	movs	r0, #0
 800d9c6:	f7f2 fc67 	bl	8000298 <__aeabi_dsub>
 800d9ca:	4b6c      	ldr	r3, [pc, #432]	; (800db7c <__ieee754_acos+0x4bc>)
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f7f2 fe1b 	bl	8000608 <__aeabi_dmul>
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	460d      	mov	r5, r1
 800d9d6:	ec45 4b10 	vmov	d0, r4, r5
 800d9da:	f000 fb6f 	bl	800e0bc <__ieee754_sqrt>
 800d9de:	a34e      	add	r3, pc, #312	; (adr r3, 800db18 <__ieee754_acos+0x458>)
 800d9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	4629      	mov	r1, r5
 800d9e8:	ec59 8b10 	vmov	r8, r9, d0
 800d9ec:	f7f2 fe0c 	bl	8000608 <__aeabi_dmul>
 800d9f0:	a34b      	add	r3, pc, #300	; (adr r3, 800db20 <__ieee754_acos+0x460>)
 800d9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f6:	f7f2 fc51 	bl	800029c <__adddf3>
 800d9fa:	4622      	mov	r2, r4
 800d9fc:	462b      	mov	r3, r5
 800d9fe:	f7f2 fe03 	bl	8000608 <__aeabi_dmul>
 800da02:	a349      	add	r3, pc, #292	; (adr r3, 800db28 <__ieee754_acos+0x468>)
 800da04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da08:	f7f2 fc46 	bl	8000298 <__aeabi_dsub>
 800da0c:	4622      	mov	r2, r4
 800da0e:	462b      	mov	r3, r5
 800da10:	f7f2 fdfa 	bl	8000608 <__aeabi_dmul>
 800da14:	a346      	add	r3, pc, #280	; (adr r3, 800db30 <__ieee754_acos+0x470>)
 800da16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1a:	f7f2 fc3f 	bl	800029c <__adddf3>
 800da1e:	4622      	mov	r2, r4
 800da20:	462b      	mov	r3, r5
 800da22:	f7f2 fdf1 	bl	8000608 <__aeabi_dmul>
 800da26:	a344      	add	r3, pc, #272	; (adr r3, 800db38 <__ieee754_acos+0x478>)
 800da28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2c:	f7f2 fc34 	bl	8000298 <__aeabi_dsub>
 800da30:	4622      	mov	r2, r4
 800da32:	462b      	mov	r3, r5
 800da34:	f7f2 fde8 	bl	8000608 <__aeabi_dmul>
 800da38:	a341      	add	r3, pc, #260	; (adr r3, 800db40 <__ieee754_acos+0x480>)
 800da3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3e:	f7f2 fc2d 	bl	800029c <__adddf3>
 800da42:	4622      	mov	r2, r4
 800da44:	462b      	mov	r3, r5
 800da46:	f7f2 fddf 	bl	8000608 <__aeabi_dmul>
 800da4a:	a33f      	add	r3, pc, #252	; (adr r3, 800db48 <__ieee754_acos+0x488>)
 800da4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da50:	4682      	mov	sl, r0
 800da52:	468b      	mov	fp, r1
 800da54:	4620      	mov	r0, r4
 800da56:	4629      	mov	r1, r5
 800da58:	f7f2 fdd6 	bl	8000608 <__aeabi_dmul>
 800da5c:	a33c      	add	r3, pc, #240	; (adr r3, 800db50 <__ieee754_acos+0x490>)
 800da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da62:	f7f2 fc19 	bl	8000298 <__aeabi_dsub>
 800da66:	4622      	mov	r2, r4
 800da68:	462b      	mov	r3, r5
 800da6a:	f7f2 fdcd 	bl	8000608 <__aeabi_dmul>
 800da6e:	a33a      	add	r3, pc, #232	; (adr r3, 800db58 <__ieee754_acos+0x498>)
 800da70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da74:	f7f2 fc12 	bl	800029c <__adddf3>
 800da78:	4622      	mov	r2, r4
 800da7a:	462b      	mov	r3, r5
 800da7c:	f7f2 fdc4 	bl	8000608 <__aeabi_dmul>
 800da80:	a337      	add	r3, pc, #220	; (adr r3, 800db60 <__ieee754_acos+0x4a0>)
 800da82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da86:	f7f2 fc07 	bl	8000298 <__aeabi_dsub>
 800da8a:	4622      	mov	r2, r4
 800da8c:	462b      	mov	r3, r5
 800da8e:	f7f2 fdbb 	bl	8000608 <__aeabi_dmul>
 800da92:	4b39      	ldr	r3, [pc, #228]	; (800db78 <__ieee754_acos+0x4b8>)
 800da94:	2200      	movs	r2, #0
 800da96:	f7f2 fc01 	bl	800029c <__adddf3>
 800da9a:	4602      	mov	r2, r0
 800da9c:	460b      	mov	r3, r1
 800da9e:	4650      	mov	r0, sl
 800daa0:	4659      	mov	r1, fp
 800daa2:	f7f2 fedb 	bl	800085c <__aeabi_ddiv>
 800daa6:	4642      	mov	r2, r8
 800daa8:	464b      	mov	r3, r9
 800daaa:	f7f2 fdad 	bl	8000608 <__aeabi_dmul>
 800daae:	2600      	movs	r6, #0
 800dab0:	4682      	mov	sl, r0
 800dab2:	468b      	mov	fp, r1
 800dab4:	4632      	mov	r2, r6
 800dab6:	464b      	mov	r3, r9
 800dab8:	4630      	mov	r0, r6
 800daba:	4649      	mov	r1, r9
 800dabc:	f7f2 fda4 	bl	8000608 <__aeabi_dmul>
 800dac0:	4602      	mov	r2, r0
 800dac2:	460b      	mov	r3, r1
 800dac4:	4620      	mov	r0, r4
 800dac6:	4629      	mov	r1, r5
 800dac8:	f7f2 fbe6 	bl	8000298 <__aeabi_dsub>
 800dacc:	4632      	mov	r2, r6
 800dace:	4604      	mov	r4, r0
 800dad0:	460d      	mov	r5, r1
 800dad2:	464b      	mov	r3, r9
 800dad4:	4640      	mov	r0, r8
 800dad6:	4649      	mov	r1, r9
 800dad8:	f7f2 fbe0 	bl	800029c <__adddf3>
 800dadc:	4602      	mov	r2, r0
 800dade:	460b      	mov	r3, r1
 800dae0:	4620      	mov	r0, r4
 800dae2:	4629      	mov	r1, r5
 800dae4:	f7f2 feba 	bl	800085c <__aeabi_ddiv>
 800dae8:	4602      	mov	r2, r0
 800daea:	460b      	mov	r3, r1
 800daec:	4650      	mov	r0, sl
 800daee:	4659      	mov	r1, fp
 800daf0:	f7f2 fbd4 	bl	800029c <__adddf3>
 800daf4:	4632      	mov	r2, r6
 800daf6:	464b      	mov	r3, r9
 800daf8:	f7f2 fbd0 	bl	800029c <__adddf3>
 800dafc:	4602      	mov	r2, r0
 800dafe:	460b      	mov	r3, r1
 800db00:	f7f2 fbcc 	bl	800029c <__adddf3>
 800db04:	e5fe      	b.n	800d704 <__ieee754_acos+0x44>
 800db06:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800db68 <__ieee754_acos+0x4a8>
 800db0a:	e5ed      	b.n	800d6e8 <__ieee754_acos+0x28>
 800db0c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800db70 <__ieee754_acos+0x4b0>
 800db10:	e5ea      	b.n	800d6e8 <__ieee754_acos+0x28>
 800db12:	bf00      	nop
 800db14:	f3af 8000 	nop.w
 800db18:	0dfdf709 	.word	0x0dfdf709
 800db1c:	3f023de1 	.word	0x3f023de1
 800db20:	7501b288 	.word	0x7501b288
 800db24:	3f49efe0 	.word	0x3f49efe0
 800db28:	b5688f3b 	.word	0xb5688f3b
 800db2c:	3fa48228 	.word	0x3fa48228
 800db30:	0e884455 	.word	0x0e884455
 800db34:	3fc9c155 	.word	0x3fc9c155
 800db38:	03eb6f7d 	.word	0x03eb6f7d
 800db3c:	3fd4d612 	.word	0x3fd4d612
 800db40:	55555555 	.word	0x55555555
 800db44:	3fc55555 	.word	0x3fc55555
 800db48:	b12e9282 	.word	0xb12e9282
 800db4c:	3fb3b8c5 	.word	0x3fb3b8c5
 800db50:	1b8d0159 	.word	0x1b8d0159
 800db54:	3fe6066c 	.word	0x3fe6066c
 800db58:	9c598ac8 	.word	0x9c598ac8
 800db5c:	40002ae5 	.word	0x40002ae5
 800db60:	1c8a2d4b 	.word	0x1c8a2d4b
 800db64:	40033a27 	.word	0x40033a27
	...
 800db70:	54442d18 	.word	0x54442d18
 800db74:	3ff921fb 	.word	0x3ff921fb
 800db78:	3ff00000 	.word	0x3ff00000
 800db7c:	3fe00000 	.word	0x3fe00000

0800db80 <__ieee754_atan2>:
 800db80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db84:	ec57 6b11 	vmov	r6, r7, d1
 800db88:	4273      	negs	r3, r6
 800db8a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800dd08 <__ieee754_atan2+0x188>
 800db8e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800db92:	4333      	orrs	r3, r6
 800db94:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800db98:	4543      	cmp	r3, r8
 800db9a:	ec51 0b10 	vmov	r0, r1, d0
 800db9e:	ee11 5a10 	vmov	r5, s2
 800dba2:	d80a      	bhi.n	800dbba <__ieee754_atan2+0x3a>
 800dba4:	4244      	negs	r4, r0
 800dba6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dbaa:	4304      	orrs	r4, r0
 800dbac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800dbb0:	4544      	cmp	r4, r8
 800dbb2:	ee10 9a10 	vmov	r9, s0
 800dbb6:	468e      	mov	lr, r1
 800dbb8:	d907      	bls.n	800dbca <__ieee754_atan2+0x4a>
 800dbba:	4632      	mov	r2, r6
 800dbbc:	463b      	mov	r3, r7
 800dbbe:	f7f2 fb6d 	bl	800029c <__adddf3>
 800dbc2:	ec41 0b10 	vmov	d0, r0, r1
 800dbc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800dbce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dbd2:	4334      	orrs	r4, r6
 800dbd4:	d103      	bne.n	800dbde <__ieee754_atan2+0x5e>
 800dbd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbda:	f000 b8c5 	b.w	800dd68 <atan>
 800dbde:	17bc      	asrs	r4, r7, #30
 800dbe0:	f004 0402 	and.w	r4, r4, #2
 800dbe4:	ea53 0909 	orrs.w	r9, r3, r9
 800dbe8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800dbec:	d107      	bne.n	800dbfe <__ieee754_atan2+0x7e>
 800dbee:	2c02      	cmp	r4, #2
 800dbf0:	d05f      	beq.n	800dcb2 <__ieee754_atan2+0x132>
 800dbf2:	2c03      	cmp	r4, #3
 800dbf4:	d1e5      	bne.n	800dbc2 <__ieee754_atan2+0x42>
 800dbf6:	a140      	add	r1, pc, #256	; (adr r1, 800dcf8 <__ieee754_atan2+0x178>)
 800dbf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbfc:	e7e1      	b.n	800dbc2 <__ieee754_atan2+0x42>
 800dbfe:	4315      	orrs	r5, r2
 800dc00:	d106      	bne.n	800dc10 <__ieee754_atan2+0x90>
 800dc02:	f1be 0f00 	cmp.w	lr, #0
 800dc06:	da5f      	bge.n	800dcc8 <__ieee754_atan2+0x148>
 800dc08:	a13d      	add	r1, pc, #244	; (adr r1, 800dd00 <__ieee754_atan2+0x180>)
 800dc0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc0e:	e7d8      	b.n	800dbc2 <__ieee754_atan2+0x42>
 800dc10:	4542      	cmp	r2, r8
 800dc12:	d10f      	bne.n	800dc34 <__ieee754_atan2+0xb4>
 800dc14:	4293      	cmp	r3, r2
 800dc16:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800dc1a:	d107      	bne.n	800dc2c <__ieee754_atan2+0xac>
 800dc1c:	2c02      	cmp	r4, #2
 800dc1e:	d84c      	bhi.n	800dcba <__ieee754_atan2+0x13a>
 800dc20:	4b33      	ldr	r3, [pc, #204]	; (800dcf0 <__ieee754_atan2+0x170>)
 800dc22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc26:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc2a:	e7ca      	b.n	800dbc2 <__ieee754_atan2+0x42>
 800dc2c:	2c02      	cmp	r4, #2
 800dc2e:	d848      	bhi.n	800dcc2 <__ieee754_atan2+0x142>
 800dc30:	4b30      	ldr	r3, [pc, #192]	; (800dcf4 <__ieee754_atan2+0x174>)
 800dc32:	e7f6      	b.n	800dc22 <__ieee754_atan2+0xa2>
 800dc34:	4543      	cmp	r3, r8
 800dc36:	d0e4      	beq.n	800dc02 <__ieee754_atan2+0x82>
 800dc38:	1a9b      	subs	r3, r3, r2
 800dc3a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800dc3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dc42:	da1e      	bge.n	800dc82 <__ieee754_atan2+0x102>
 800dc44:	2f00      	cmp	r7, #0
 800dc46:	da01      	bge.n	800dc4c <__ieee754_atan2+0xcc>
 800dc48:	323c      	adds	r2, #60	; 0x3c
 800dc4a:	db1e      	blt.n	800dc8a <__ieee754_atan2+0x10a>
 800dc4c:	4632      	mov	r2, r6
 800dc4e:	463b      	mov	r3, r7
 800dc50:	f7f2 fe04 	bl	800085c <__aeabi_ddiv>
 800dc54:	ec41 0b10 	vmov	d0, r0, r1
 800dc58:	f000 fa26 	bl	800e0a8 <fabs>
 800dc5c:	f000 f884 	bl	800dd68 <atan>
 800dc60:	ec51 0b10 	vmov	r0, r1, d0
 800dc64:	2c01      	cmp	r4, #1
 800dc66:	d013      	beq.n	800dc90 <__ieee754_atan2+0x110>
 800dc68:	2c02      	cmp	r4, #2
 800dc6a:	d015      	beq.n	800dc98 <__ieee754_atan2+0x118>
 800dc6c:	2c00      	cmp	r4, #0
 800dc6e:	d0a8      	beq.n	800dbc2 <__ieee754_atan2+0x42>
 800dc70:	a317      	add	r3, pc, #92	; (adr r3, 800dcd0 <__ieee754_atan2+0x150>)
 800dc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc76:	f7f2 fb0f 	bl	8000298 <__aeabi_dsub>
 800dc7a:	a317      	add	r3, pc, #92	; (adr r3, 800dcd8 <__ieee754_atan2+0x158>)
 800dc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc80:	e014      	b.n	800dcac <__ieee754_atan2+0x12c>
 800dc82:	a117      	add	r1, pc, #92	; (adr r1, 800dce0 <__ieee754_atan2+0x160>)
 800dc84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc88:	e7ec      	b.n	800dc64 <__ieee754_atan2+0xe4>
 800dc8a:	2000      	movs	r0, #0
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	e7e9      	b.n	800dc64 <__ieee754_atan2+0xe4>
 800dc90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc94:	4619      	mov	r1, r3
 800dc96:	e794      	b.n	800dbc2 <__ieee754_atan2+0x42>
 800dc98:	a30d      	add	r3, pc, #52	; (adr r3, 800dcd0 <__ieee754_atan2+0x150>)
 800dc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9e:	f7f2 fafb 	bl	8000298 <__aeabi_dsub>
 800dca2:	4602      	mov	r2, r0
 800dca4:	460b      	mov	r3, r1
 800dca6:	a10c      	add	r1, pc, #48	; (adr r1, 800dcd8 <__ieee754_atan2+0x158>)
 800dca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcac:	f7f2 faf4 	bl	8000298 <__aeabi_dsub>
 800dcb0:	e787      	b.n	800dbc2 <__ieee754_atan2+0x42>
 800dcb2:	a109      	add	r1, pc, #36	; (adr r1, 800dcd8 <__ieee754_atan2+0x158>)
 800dcb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcb8:	e783      	b.n	800dbc2 <__ieee754_atan2+0x42>
 800dcba:	a10b      	add	r1, pc, #44	; (adr r1, 800dce8 <__ieee754_atan2+0x168>)
 800dcbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcc0:	e77f      	b.n	800dbc2 <__ieee754_atan2+0x42>
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	e77c      	b.n	800dbc2 <__ieee754_atan2+0x42>
 800dcc8:	a105      	add	r1, pc, #20	; (adr r1, 800dce0 <__ieee754_atan2+0x160>)
 800dcca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcce:	e778      	b.n	800dbc2 <__ieee754_atan2+0x42>
 800dcd0:	33145c07 	.word	0x33145c07
 800dcd4:	3ca1a626 	.word	0x3ca1a626
 800dcd8:	54442d18 	.word	0x54442d18
 800dcdc:	400921fb 	.word	0x400921fb
 800dce0:	54442d18 	.word	0x54442d18
 800dce4:	3ff921fb 	.word	0x3ff921fb
 800dce8:	54442d18 	.word	0x54442d18
 800dcec:	3fe921fb 	.word	0x3fe921fb
 800dcf0:	0800e868 	.word	0x0800e868
 800dcf4:	0800e880 	.word	0x0800e880
 800dcf8:	54442d18 	.word	0x54442d18
 800dcfc:	c00921fb 	.word	0xc00921fb
 800dd00:	54442d18 	.word	0x54442d18
 800dd04:	bff921fb 	.word	0xbff921fb
 800dd08:	7ff00000 	.word	0x7ff00000

0800dd0c <sqrt>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	ed2d 8b02 	vpush	{d8}
 800dd12:	ec55 4b10 	vmov	r4, r5, d0
 800dd16:	f000 f9d1 	bl	800e0bc <__ieee754_sqrt>
 800dd1a:	4622      	mov	r2, r4
 800dd1c:	462b      	mov	r3, r5
 800dd1e:	4620      	mov	r0, r4
 800dd20:	4629      	mov	r1, r5
 800dd22:	eeb0 8a40 	vmov.f32	s16, s0
 800dd26:	eef0 8a60 	vmov.f32	s17, s1
 800dd2a:	f7f2 ff07 	bl	8000b3c <__aeabi_dcmpun>
 800dd2e:	b990      	cbnz	r0, 800dd56 <sqrt+0x4a>
 800dd30:	2200      	movs	r2, #0
 800dd32:	2300      	movs	r3, #0
 800dd34:	4620      	mov	r0, r4
 800dd36:	4629      	mov	r1, r5
 800dd38:	f7f2 fed8 	bl	8000aec <__aeabi_dcmplt>
 800dd3c:	b158      	cbz	r0, 800dd56 <sqrt+0x4a>
 800dd3e:	f7fd fd51 	bl	800b7e4 <__errno>
 800dd42:	2321      	movs	r3, #33	; 0x21
 800dd44:	6003      	str	r3, [r0, #0]
 800dd46:	2200      	movs	r2, #0
 800dd48:	2300      	movs	r3, #0
 800dd4a:	4610      	mov	r0, r2
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	f7f2 fd85 	bl	800085c <__aeabi_ddiv>
 800dd52:	ec41 0b18 	vmov	d8, r0, r1
 800dd56:	eeb0 0a48 	vmov.f32	s0, s16
 800dd5a:	eef0 0a68 	vmov.f32	s1, s17
 800dd5e:	ecbd 8b02 	vpop	{d8}
 800dd62:	bd38      	pop	{r3, r4, r5, pc}
 800dd64:	0000      	movs	r0, r0
	...

0800dd68 <atan>:
 800dd68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd6c:	ec55 4b10 	vmov	r4, r5, d0
 800dd70:	4bc3      	ldr	r3, [pc, #780]	; (800e080 <atan+0x318>)
 800dd72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dd76:	429e      	cmp	r6, r3
 800dd78:	46ab      	mov	fp, r5
 800dd7a:	dd18      	ble.n	800ddae <atan+0x46>
 800dd7c:	4bc1      	ldr	r3, [pc, #772]	; (800e084 <atan+0x31c>)
 800dd7e:	429e      	cmp	r6, r3
 800dd80:	dc01      	bgt.n	800dd86 <atan+0x1e>
 800dd82:	d109      	bne.n	800dd98 <atan+0x30>
 800dd84:	b144      	cbz	r4, 800dd98 <atan+0x30>
 800dd86:	4622      	mov	r2, r4
 800dd88:	462b      	mov	r3, r5
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	f7f2 fa85 	bl	800029c <__adddf3>
 800dd92:	4604      	mov	r4, r0
 800dd94:	460d      	mov	r5, r1
 800dd96:	e006      	b.n	800dda6 <atan+0x3e>
 800dd98:	f1bb 0f00 	cmp.w	fp, #0
 800dd9c:	f300 8131 	bgt.w	800e002 <atan+0x29a>
 800dda0:	a59b      	add	r5, pc, #620	; (adr r5, 800e010 <atan+0x2a8>)
 800dda2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dda6:	ec45 4b10 	vmov	d0, r4, r5
 800ddaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddae:	4bb6      	ldr	r3, [pc, #728]	; (800e088 <atan+0x320>)
 800ddb0:	429e      	cmp	r6, r3
 800ddb2:	dc14      	bgt.n	800ddde <atan+0x76>
 800ddb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ddb8:	429e      	cmp	r6, r3
 800ddba:	dc0d      	bgt.n	800ddd8 <atan+0x70>
 800ddbc:	a396      	add	r3, pc, #600	; (adr r3, 800e018 <atan+0x2b0>)
 800ddbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc2:	ee10 0a10 	vmov	r0, s0
 800ddc6:	4629      	mov	r1, r5
 800ddc8:	f7f2 fa68 	bl	800029c <__adddf3>
 800ddcc:	4baf      	ldr	r3, [pc, #700]	; (800e08c <atan+0x324>)
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f7f2 feaa 	bl	8000b28 <__aeabi_dcmpgt>
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	d1e6      	bne.n	800dda6 <atan+0x3e>
 800ddd8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800dddc:	e02b      	b.n	800de36 <atan+0xce>
 800ddde:	f000 f963 	bl	800e0a8 <fabs>
 800dde2:	4bab      	ldr	r3, [pc, #684]	; (800e090 <atan+0x328>)
 800dde4:	429e      	cmp	r6, r3
 800dde6:	ec55 4b10 	vmov	r4, r5, d0
 800ddea:	f300 80bf 	bgt.w	800df6c <atan+0x204>
 800ddee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ddf2:	429e      	cmp	r6, r3
 800ddf4:	f300 80a0 	bgt.w	800df38 <atan+0x1d0>
 800ddf8:	ee10 2a10 	vmov	r2, s0
 800ddfc:	ee10 0a10 	vmov	r0, s0
 800de00:	462b      	mov	r3, r5
 800de02:	4629      	mov	r1, r5
 800de04:	f7f2 fa4a 	bl	800029c <__adddf3>
 800de08:	4ba0      	ldr	r3, [pc, #640]	; (800e08c <atan+0x324>)
 800de0a:	2200      	movs	r2, #0
 800de0c:	f7f2 fa44 	bl	8000298 <__aeabi_dsub>
 800de10:	2200      	movs	r2, #0
 800de12:	4606      	mov	r6, r0
 800de14:	460f      	mov	r7, r1
 800de16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de1a:	4620      	mov	r0, r4
 800de1c:	4629      	mov	r1, r5
 800de1e:	f7f2 fa3d 	bl	800029c <__adddf3>
 800de22:	4602      	mov	r2, r0
 800de24:	460b      	mov	r3, r1
 800de26:	4630      	mov	r0, r6
 800de28:	4639      	mov	r1, r7
 800de2a:	f7f2 fd17 	bl	800085c <__aeabi_ddiv>
 800de2e:	f04f 0a00 	mov.w	sl, #0
 800de32:	4604      	mov	r4, r0
 800de34:	460d      	mov	r5, r1
 800de36:	4622      	mov	r2, r4
 800de38:	462b      	mov	r3, r5
 800de3a:	4620      	mov	r0, r4
 800de3c:	4629      	mov	r1, r5
 800de3e:	f7f2 fbe3 	bl	8000608 <__aeabi_dmul>
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
 800de46:	4680      	mov	r8, r0
 800de48:	4689      	mov	r9, r1
 800de4a:	f7f2 fbdd 	bl	8000608 <__aeabi_dmul>
 800de4e:	a374      	add	r3, pc, #464	; (adr r3, 800e020 <atan+0x2b8>)
 800de50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de54:	4606      	mov	r6, r0
 800de56:	460f      	mov	r7, r1
 800de58:	f7f2 fbd6 	bl	8000608 <__aeabi_dmul>
 800de5c:	a372      	add	r3, pc, #456	; (adr r3, 800e028 <atan+0x2c0>)
 800de5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de62:	f7f2 fa1b 	bl	800029c <__adddf3>
 800de66:	4632      	mov	r2, r6
 800de68:	463b      	mov	r3, r7
 800de6a:	f7f2 fbcd 	bl	8000608 <__aeabi_dmul>
 800de6e:	a370      	add	r3, pc, #448	; (adr r3, 800e030 <atan+0x2c8>)
 800de70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de74:	f7f2 fa12 	bl	800029c <__adddf3>
 800de78:	4632      	mov	r2, r6
 800de7a:	463b      	mov	r3, r7
 800de7c:	f7f2 fbc4 	bl	8000608 <__aeabi_dmul>
 800de80:	a36d      	add	r3, pc, #436	; (adr r3, 800e038 <atan+0x2d0>)
 800de82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de86:	f7f2 fa09 	bl	800029c <__adddf3>
 800de8a:	4632      	mov	r2, r6
 800de8c:	463b      	mov	r3, r7
 800de8e:	f7f2 fbbb 	bl	8000608 <__aeabi_dmul>
 800de92:	a36b      	add	r3, pc, #428	; (adr r3, 800e040 <atan+0x2d8>)
 800de94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de98:	f7f2 fa00 	bl	800029c <__adddf3>
 800de9c:	4632      	mov	r2, r6
 800de9e:	463b      	mov	r3, r7
 800dea0:	f7f2 fbb2 	bl	8000608 <__aeabi_dmul>
 800dea4:	a368      	add	r3, pc, #416	; (adr r3, 800e048 <atan+0x2e0>)
 800dea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deaa:	f7f2 f9f7 	bl	800029c <__adddf3>
 800deae:	4642      	mov	r2, r8
 800deb0:	464b      	mov	r3, r9
 800deb2:	f7f2 fba9 	bl	8000608 <__aeabi_dmul>
 800deb6:	a366      	add	r3, pc, #408	; (adr r3, 800e050 <atan+0x2e8>)
 800deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debc:	4680      	mov	r8, r0
 800debe:	4689      	mov	r9, r1
 800dec0:	4630      	mov	r0, r6
 800dec2:	4639      	mov	r1, r7
 800dec4:	f7f2 fba0 	bl	8000608 <__aeabi_dmul>
 800dec8:	a363      	add	r3, pc, #396	; (adr r3, 800e058 <atan+0x2f0>)
 800deca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dece:	f7f2 f9e3 	bl	8000298 <__aeabi_dsub>
 800ded2:	4632      	mov	r2, r6
 800ded4:	463b      	mov	r3, r7
 800ded6:	f7f2 fb97 	bl	8000608 <__aeabi_dmul>
 800deda:	a361      	add	r3, pc, #388	; (adr r3, 800e060 <atan+0x2f8>)
 800dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee0:	f7f2 f9da 	bl	8000298 <__aeabi_dsub>
 800dee4:	4632      	mov	r2, r6
 800dee6:	463b      	mov	r3, r7
 800dee8:	f7f2 fb8e 	bl	8000608 <__aeabi_dmul>
 800deec:	a35e      	add	r3, pc, #376	; (adr r3, 800e068 <atan+0x300>)
 800deee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def2:	f7f2 f9d1 	bl	8000298 <__aeabi_dsub>
 800def6:	4632      	mov	r2, r6
 800def8:	463b      	mov	r3, r7
 800defa:	f7f2 fb85 	bl	8000608 <__aeabi_dmul>
 800defe:	a35c      	add	r3, pc, #368	; (adr r3, 800e070 <atan+0x308>)
 800df00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df04:	f7f2 f9c8 	bl	8000298 <__aeabi_dsub>
 800df08:	4632      	mov	r2, r6
 800df0a:	463b      	mov	r3, r7
 800df0c:	f7f2 fb7c 	bl	8000608 <__aeabi_dmul>
 800df10:	4602      	mov	r2, r0
 800df12:	460b      	mov	r3, r1
 800df14:	4640      	mov	r0, r8
 800df16:	4649      	mov	r1, r9
 800df18:	f7f2 f9c0 	bl	800029c <__adddf3>
 800df1c:	4622      	mov	r2, r4
 800df1e:	462b      	mov	r3, r5
 800df20:	f7f2 fb72 	bl	8000608 <__aeabi_dmul>
 800df24:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800df28:	4602      	mov	r2, r0
 800df2a:	460b      	mov	r3, r1
 800df2c:	d14b      	bne.n	800dfc6 <atan+0x25e>
 800df2e:	4620      	mov	r0, r4
 800df30:	4629      	mov	r1, r5
 800df32:	f7f2 f9b1 	bl	8000298 <__aeabi_dsub>
 800df36:	e72c      	b.n	800dd92 <atan+0x2a>
 800df38:	ee10 0a10 	vmov	r0, s0
 800df3c:	4b53      	ldr	r3, [pc, #332]	; (800e08c <atan+0x324>)
 800df3e:	2200      	movs	r2, #0
 800df40:	4629      	mov	r1, r5
 800df42:	f7f2 f9a9 	bl	8000298 <__aeabi_dsub>
 800df46:	4b51      	ldr	r3, [pc, #324]	; (800e08c <atan+0x324>)
 800df48:	4606      	mov	r6, r0
 800df4a:	460f      	mov	r7, r1
 800df4c:	2200      	movs	r2, #0
 800df4e:	4620      	mov	r0, r4
 800df50:	4629      	mov	r1, r5
 800df52:	f7f2 f9a3 	bl	800029c <__adddf3>
 800df56:	4602      	mov	r2, r0
 800df58:	460b      	mov	r3, r1
 800df5a:	4630      	mov	r0, r6
 800df5c:	4639      	mov	r1, r7
 800df5e:	f7f2 fc7d 	bl	800085c <__aeabi_ddiv>
 800df62:	f04f 0a01 	mov.w	sl, #1
 800df66:	4604      	mov	r4, r0
 800df68:	460d      	mov	r5, r1
 800df6a:	e764      	b.n	800de36 <atan+0xce>
 800df6c:	4b49      	ldr	r3, [pc, #292]	; (800e094 <atan+0x32c>)
 800df6e:	429e      	cmp	r6, r3
 800df70:	da1d      	bge.n	800dfae <atan+0x246>
 800df72:	ee10 0a10 	vmov	r0, s0
 800df76:	4b48      	ldr	r3, [pc, #288]	; (800e098 <atan+0x330>)
 800df78:	2200      	movs	r2, #0
 800df7a:	4629      	mov	r1, r5
 800df7c:	f7f2 f98c 	bl	8000298 <__aeabi_dsub>
 800df80:	4b45      	ldr	r3, [pc, #276]	; (800e098 <atan+0x330>)
 800df82:	4606      	mov	r6, r0
 800df84:	460f      	mov	r7, r1
 800df86:	2200      	movs	r2, #0
 800df88:	4620      	mov	r0, r4
 800df8a:	4629      	mov	r1, r5
 800df8c:	f7f2 fb3c 	bl	8000608 <__aeabi_dmul>
 800df90:	4b3e      	ldr	r3, [pc, #248]	; (800e08c <atan+0x324>)
 800df92:	2200      	movs	r2, #0
 800df94:	f7f2 f982 	bl	800029c <__adddf3>
 800df98:	4602      	mov	r2, r0
 800df9a:	460b      	mov	r3, r1
 800df9c:	4630      	mov	r0, r6
 800df9e:	4639      	mov	r1, r7
 800dfa0:	f7f2 fc5c 	bl	800085c <__aeabi_ddiv>
 800dfa4:	f04f 0a02 	mov.w	sl, #2
 800dfa8:	4604      	mov	r4, r0
 800dfaa:	460d      	mov	r5, r1
 800dfac:	e743      	b.n	800de36 <atan+0xce>
 800dfae:	462b      	mov	r3, r5
 800dfb0:	ee10 2a10 	vmov	r2, s0
 800dfb4:	4939      	ldr	r1, [pc, #228]	; (800e09c <atan+0x334>)
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	f7f2 fc50 	bl	800085c <__aeabi_ddiv>
 800dfbc:	f04f 0a03 	mov.w	sl, #3
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	460d      	mov	r5, r1
 800dfc4:	e737      	b.n	800de36 <atan+0xce>
 800dfc6:	4b36      	ldr	r3, [pc, #216]	; (800e0a0 <atan+0x338>)
 800dfc8:	4e36      	ldr	r6, [pc, #216]	; (800e0a4 <atan+0x33c>)
 800dfca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd2:	f7f2 f961 	bl	8000298 <__aeabi_dsub>
 800dfd6:	4622      	mov	r2, r4
 800dfd8:	462b      	mov	r3, r5
 800dfda:	f7f2 f95d 	bl	8000298 <__aeabi_dsub>
 800dfde:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dfea:	f7f2 f955 	bl	8000298 <__aeabi_dsub>
 800dfee:	f1bb 0f00 	cmp.w	fp, #0
 800dff2:	4604      	mov	r4, r0
 800dff4:	460d      	mov	r5, r1
 800dff6:	f6bf aed6 	bge.w	800dda6 <atan+0x3e>
 800dffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dffe:	461d      	mov	r5, r3
 800e000:	e6d1      	b.n	800dda6 <atan+0x3e>
 800e002:	a51d      	add	r5, pc, #116	; (adr r5, 800e078 <atan+0x310>)
 800e004:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e008:	e6cd      	b.n	800dda6 <atan+0x3e>
 800e00a:	bf00      	nop
 800e00c:	f3af 8000 	nop.w
 800e010:	54442d18 	.word	0x54442d18
 800e014:	bff921fb 	.word	0xbff921fb
 800e018:	8800759c 	.word	0x8800759c
 800e01c:	7e37e43c 	.word	0x7e37e43c
 800e020:	e322da11 	.word	0xe322da11
 800e024:	3f90ad3a 	.word	0x3f90ad3a
 800e028:	24760deb 	.word	0x24760deb
 800e02c:	3fa97b4b 	.word	0x3fa97b4b
 800e030:	a0d03d51 	.word	0xa0d03d51
 800e034:	3fb10d66 	.word	0x3fb10d66
 800e038:	c54c206e 	.word	0xc54c206e
 800e03c:	3fb745cd 	.word	0x3fb745cd
 800e040:	920083ff 	.word	0x920083ff
 800e044:	3fc24924 	.word	0x3fc24924
 800e048:	5555550d 	.word	0x5555550d
 800e04c:	3fd55555 	.word	0x3fd55555
 800e050:	2c6a6c2f 	.word	0x2c6a6c2f
 800e054:	bfa2b444 	.word	0xbfa2b444
 800e058:	52defd9a 	.word	0x52defd9a
 800e05c:	3fadde2d 	.word	0x3fadde2d
 800e060:	af749a6d 	.word	0xaf749a6d
 800e064:	3fb3b0f2 	.word	0x3fb3b0f2
 800e068:	fe231671 	.word	0xfe231671
 800e06c:	3fbc71c6 	.word	0x3fbc71c6
 800e070:	9998ebc4 	.word	0x9998ebc4
 800e074:	3fc99999 	.word	0x3fc99999
 800e078:	54442d18 	.word	0x54442d18
 800e07c:	3ff921fb 	.word	0x3ff921fb
 800e080:	440fffff 	.word	0x440fffff
 800e084:	7ff00000 	.word	0x7ff00000
 800e088:	3fdbffff 	.word	0x3fdbffff
 800e08c:	3ff00000 	.word	0x3ff00000
 800e090:	3ff2ffff 	.word	0x3ff2ffff
 800e094:	40038000 	.word	0x40038000
 800e098:	3ff80000 	.word	0x3ff80000
 800e09c:	bff00000 	.word	0xbff00000
 800e0a0:	0800e8b8 	.word	0x0800e8b8
 800e0a4:	0800e898 	.word	0x0800e898

0800e0a8 <fabs>:
 800e0a8:	ec51 0b10 	vmov	r0, r1, d0
 800e0ac:	ee10 2a10 	vmov	r2, s0
 800e0b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e0b4:	ec43 2b10 	vmov	d0, r2, r3
 800e0b8:	4770      	bx	lr
	...

0800e0bc <__ieee754_sqrt>:
 800e0bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c0:	ec55 4b10 	vmov	r4, r5, d0
 800e0c4:	4e67      	ldr	r6, [pc, #412]	; (800e264 <__ieee754_sqrt+0x1a8>)
 800e0c6:	43ae      	bics	r6, r5
 800e0c8:	ee10 0a10 	vmov	r0, s0
 800e0cc:	ee10 2a10 	vmov	r2, s0
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	462b      	mov	r3, r5
 800e0d4:	d10d      	bne.n	800e0f2 <__ieee754_sqrt+0x36>
 800e0d6:	f7f2 fa97 	bl	8000608 <__aeabi_dmul>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4620      	mov	r0, r4
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	f7f2 f8db 	bl	800029c <__adddf3>
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	460d      	mov	r5, r1
 800e0ea:	ec45 4b10 	vmov	d0, r4, r5
 800e0ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0f2:	2d00      	cmp	r5, #0
 800e0f4:	dc0b      	bgt.n	800e10e <__ieee754_sqrt+0x52>
 800e0f6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e0fa:	4326      	orrs	r6, r4
 800e0fc:	d0f5      	beq.n	800e0ea <__ieee754_sqrt+0x2e>
 800e0fe:	b135      	cbz	r5, 800e10e <__ieee754_sqrt+0x52>
 800e100:	f7f2 f8ca 	bl	8000298 <__aeabi_dsub>
 800e104:	4602      	mov	r2, r0
 800e106:	460b      	mov	r3, r1
 800e108:	f7f2 fba8 	bl	800085c <__aeabi_ddiv>
 800e10c:	e7eb      	b.n	800e0e6 <__ieee754_sqrt+0x2a>
 800e10e:	1509      	asrs	r1, r1, #20
 800e110:	f000 808d 	beq.w	800e22e <__ieee754_sqrt+0x172>
 800e114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e118:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800e11c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e120:	07c9      	lsls	r1, r1, #31
 800e122:	bf5c      	itt	pl
 800e124:	005b      	lslpl	r3, r3, #1
 800e126:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800e12a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e12e:	bf58      	it	pl
 800e130:	0052      	lslpl	r2, r2, #1
 800e132:	2500      	movs	r5, #0
 800e134:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e138:	1076      	asrs	r6, r6, #1
 800e13a:	0052      	lsls	r2, r2, #1
 800e13c:	f04f 0e16 	mov.w	lr, #22
 800e140:	46ac      	mov	ip, r5
 800e142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e146:	eb0c 0001 	add.w	r0, ip, r1
 800e14a:	4298      	cmp	r0, r3
 800e14c:	bfde      	ittt	le
 800e14e:	1a1b      	suble	r3, r3, r0
 800e150:	eb00 0c01 	addle.w	ip, r0, r1
 800e154:	186d      	addle	r5, r5, r1
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	f1be 0e01 	subs.w	lr, lr, #1
 800e15c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e160:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e164:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e168:	d1ed      	bne.n	800e146 <__ieee754_sqrt+0x8a>
 800e16a:	4674      	mov	r4, lr
 800e16c:	2720      	movs	r7, #32
 800e16e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e172:	4563      	cmp	r3, ip
 800e174:	eb01 000e 	add.w	r0, r1, lr
 800e178:	dc02      	bgt.n	800e180 <__ieee754_sqrt+0xc4>
 800e17a:	d113      	bne.n	800e1a4 <__ieee754_sqrt+0xe8>
 800e17c:	4290      	cmp	r0, r2
 800e17e:	d811      	bhi.n	800e1a4 <__ieee754_sqrt+0xe8>
 800e180:	2800      	cmp	r0, #0
 800e182:	eb00 0e01 	add.w	lr, r0, r1
 800e186:	da57      	bge.n	800e238 <__ieee754_sqrt+0x17c>
 800e188:	f1be 0f00 	cmp.w	lr, #0
 800e18c:	db54      	blt.n	800e238 <__ieee754_sqrt+0x17c>
 800e18e:	f10c 0801 	add.w	r8, ip, #1
 800e192:	eba3 030c 	sub.w	r3, r3, ip
 800e196:	4290      	cmp	r0, r2
 800e198:	bf88      	it	hi
 800e19a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800e19e:	1a12      	subs	r2, r2, r0
 800e1a0:	440c      	add	r4, r1
 800e1a2:	46c4      	mov	ip, r8
 800e1a4:	005b      	lsls	r3, r3, #1
 800e1a6:	3f01      	subs	r7, #1
 800e1a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e1ac:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e1b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e1b4:	d1dd      	bne.n	800e172 <__ieee754_sqrt+0xb6>
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	d01b      	beq.n	800e1f2 <__ieee754_sqrt+0x136>
 800e1ba:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e268 <__ieee754_sqrt+0x1ac>
 800e1be:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800e26c <__ieee754_sqrt+0x1b0>
 800e1c2:	e9da 0100 	ldrd	r0, r1, [sl]
 800e1c6:	e9db 2300 	ldrd	r2, r3, [fp]
 800e1ca:	f7f2 f865 	bl	8000298 <__aeabi_dsub>
 800e1ce:	e9da 8900 	ldrd	r8, r9, [sl]
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	4649      	mov	r1, r9
 800e1da:	f7f2 fc91 	bl	8000b00 <__aeabi_dcmple>
 800e1de:	b140      	cbz	r0, 800e1f2 <__ieee754_sqrt+0x136>
 800e1e0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800e1e4:	e9da 0100 	ldrd	r0, r1, [sl]
 800e1e8:	e9db 2300 	ldrd	r2, r3, [fp]
 800e1ec:	d126      	bne.n	800e23c <__ieee754_sqrt+0x180>
 800e1ee:	3501      	adds	r5, #1
 800e1f0:	463c      	mov	r4, r7
 800e1f2:	106a      	asrs	r2, r5, #1
 800e1f4:	0863      	lsrs	r3, r4, #1
 800e1f6:	07e9      	lsls	r1, r5, #31
 800e1f8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e1fc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e200:	bf48      	it	mi
 800e202:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e206:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800e20a:	461c      	mov	r4, r3
 800e20c:	e76d      	b.n	800e0ea <__ieee754_sqrt+0x2e>
 800e20e:	0ad3      	lsrs	r3, r2, #11
 800e210:	3815      	subs	r0, #21
 800e212:	0552      	lsls	r2, r2, #21
 800e214:	2b00      	cmp	r3, #0
 800e216:	d0fa      	beq.n	800e20e <__ieee754_sqrt+0x152>
 800e218:	02dc      	lsls	r4, r3, #11
 800e21a:	d50a      	bpl.n	800e232 <__ieee754_sqrt+0x176>
 800e21c:	f1c1 0420 	rsb	r4, r1, #32
 800e220:	fa22 f404 	lsr.w	r4, r2, r4
 800e224:	1e4d      	subs	r5, r1, #1
 800e226:	408a      	lsls	r2, r1
 800e228:	4323      	orrs	r3, r4
 800e22a:	1b41      	subs	r1, r0, r5
 800e22c:	e772      	b.n	800e114 <__ieee754_sqrt+0x58>
 800e22e:	4608      	mov	r0, r1
 800e230:	e7f0      	b.n	800e214 <__ieee754_sqrt+0x158>
 800e232:	005b      	lsls	r3, r3, #1
 800e234:	3101      	adds	r1, #1
 800e236:	e7ef      	b.n	800e218 <__ieee754_sqrt+0x15c>
 800e238:	46e0      	mov	r8, ip
 800e23a:	e7aa      	b.n	800e192 <__ieee754_sqrt+0xd6>
 800e23c:	f7f2 f82e 	bl	800029c <__adddf3>
 800e240:	e9da 8900 	ldrd	r8, r9, [sl]
 800e244:	4602      	mov	r2, r0
 800e246:	460b      	mov	r3, r1
 800e248:	4640      	mov	r0, r8
 800e24a:	4649      	mov	r1, r9
 800e24c:	f7f2 fc4e 	bl	8000aec <__aeabi_dcmplt>
 800e250:	b120      	cbz	r0, 800e25c <__ieee754_sqrt+0x1a0>
 800e252:	1ca0      	adds	r0, r4, #2
 800e254:	bf08      	it	eq
 800e256:	3501      	addeq	r5, #1
 800e258:	3402      	adds	r4, #2
 800e25a:	e7ca      	b.n	800e1f2 <__ieee754_sqrt+0x136>
 800e25c:	3401      	adds	r4, #1
 800e25e:	f024 0401 	bic.w	r4, r4, #1
 800e262:	e7c6      	b.n	800e1f2 <__ieee754_sqrt+0x136>
 800e264:	7ff00000 	.word	0x7ff00000
 800e268:	200001e0 	.word	0x200001e0
 800e26c:	200001e8 	.word	0x200001e8

0800e270 <_init>:
 800e270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e272:	bf00      	nop
 800e274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e276:	bc08      	pop	{r3}
 800e278:	469e      	mov	lr, r3
 800e27a:	4770      	bx	lr

0800e27c <_fini>:
 800e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27e:	bf00      	nop
 800e280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e282:	bc08      	pop	{r3}
 800e284:	469e      	mov	lr, r3
 800e286:	4770      	bx	lr
